
urat_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08008a4c  08008a4c  00009a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad8  08008ad8  0000a17c  2**0
                  CONTENTS
  4 .ARM          00000000  08008ad8  08008ad8  0000a17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ad8  08008ad8  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ad8  08008ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008adc  08008adc  00009adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08008ae0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a17c  2**0
                  CONTENTS
 10 .bss          00001294  2000017c  2000017c  0000a17c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001410  20001410  0000a17c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123d3  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003276  00000000  00000000  0001c57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  0001f7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b92  00000000  00000000  00020750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd50  00000000  00000000  000212e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015578  00000000  00000000  00041032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b07c2  00000000  00000000  000565aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00106d6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e34  00000000  00000000  00106db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0010abe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000017c 	.word	0x2000017c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a34 	.word	0x08008a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000180 	.word	0x20000180
 80001c4:	08008a34 	.word	0x08008a34

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fabd 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f837 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f915 	bl	8000404 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001da:	f000 f895 	bl	8000308 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001de:	f000 f8d3 	bl	8000388 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80001e2:	f007 ff33 	bl	800804c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t message[] = "Hello via USB VCP\r\n";
 80001e6:	4b15      	ldr	r3, [pc, #84]	@ (800023c <main+0x74>)
 80001e8:	1d3c      	adds	r4, r7, #4
 80001ea:	461d      	mov	r5, r3
 80001ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f0:	682b      	ldr	r3, [r5, #0]
 80001f2:	6023      	str	r3, [r4, #0]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET); // GPIOA 5번 핀: HIGH
 80001f4:	2201      	movs	r2, #1
 80001f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001fa:	4811      	ldr	r0, [pc, #68]	@ (8000240 <main+0x78>)
 80001fc:	f000 fdbc 	bl	8000d78 <HAL_GPIO_WritePin>
        HAL_Delay(500); // 500ms 대기
 8000200:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000204:	f000 fb08 	bl	8000818 <HAL_Delay>

        CDC_Transmit_FS(message, sizeof(message)); // USB VCP로 데이터 전송
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2114      	movs	r1, #20
 800020c:	4618      	mov	r0, r3
 800020e:	f007 ffdb 	bl	80081c8 <CDC_Transmit_FS>
        HAL_Delay(1000);
 8000212:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000216:	f000 faff 	bl	8000818 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET); // GPIOA 5번 핀: LOW
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000220:	4807      	ldr	r0, [pc, #28]	@ (8000240 <main+0x78>)
 8000222:	f000 fda9 	bl	8000d78 <HAL_GPIO_WritePin>
        HAL_Delay(500); // 500ms 대기
 8000226:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800022a:	f000 faf5 	bl	8000818 <HAL_Delay>
		HAL_Delay(1000);
 800022e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000232:	f000 faf1 	bl	8000818 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET); // GPIOA 5번 핀: HIGH
 8000236:	bf00      	nop
 8000238:	e7dc      	b.n	80001f4 <main+0x2c>
 800023a:	bf00      	nop
 800023c:	08008a4c 	.word	0x08008a4c
 8000240:	48001000 	.word	0x48001000

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b09e      	sub	sp, #120	@ 0x78
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800024e:	2228      	movs	r2, #40	@ 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f008 fbc2 	bl	80089dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	463b      	mov	r3, r7
 800026a:	223c      	movs	r2, #60	@ 0x3c
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f008 fbb4 	bl	80089dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000274:	2303      	movs	r3, #3
 8000276:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000278:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800027c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000286:	2310      	movs	r3, #16
 8000288:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000292:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000294:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000298:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 fb7e 	bl	80029a0 <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002aa:	f000 f929 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b2:	2302      	movs	r3, #2
 80002b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002c8:	2101      	movs	r1, #1
 80002ca:	4618      	mov	r0, r3
 80002cc:	f003 fba6 	bl	8003a1c <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002d6:	f000 f913 	bl	8000500 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80002da:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <SystemClock_Config+0xc0>)
 80002dc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002de:	2300      	movs	r3, #0
 80002e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e8:	463b      	mov	r3, r7
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 fd66 	bl	8003dbc <HAL_RCCEx_PeriphCLKConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002f6:	f000 f903 	bl	8000500 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3778      	adds	r7, #120	@ 0x78
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	00020020 	.word	0x00020020

08000308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800030c:	4b1b      	ldr	r3, [pc, #108]	@ (800037c <MX_I2C1_Init+0x74>)
 800030e:	4a1c      	ldr	r2, [pc, #112]	@ (8000380 <MX_I2C1_Init+0x78>)
 8000310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000312:	4b1a      	ldr	r3, [pc, #104]	@ (800037c <MX_I2C1_Init+0x74>)
 8000314:	4a1b      	ldr	r2, [pc, #108]	@ (8000384 <MX_I2C1_Init+0x7c>)
 8000316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000318:	4b18      	ldr	r3, [pc, #96]	@ (800037c <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800031e:	4b17      	ldr	r3, [pc, #92]	@ (800037c <MX_I2C1_Init+0x74>)
 8000320:	2201      	movs	r2, #1
 8000322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000324:	4b15      	ldr	r3, [pc, #84]	@ (800037c <MX_I2C1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800032a:	4b14      	ldr	r3, [pc, #80]	@ (800037c <MX_I2C1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000330:	4b12      	ldr	r3, [pc, #72]	@ (800037c <MX_I2C1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000336:	4b11      	ldr	r3, [pc, #68]	@ (800037c <MX_I2C1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033c:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <MX_I2C1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000342:	480e      	ldr	r0, [pc, #56]	@ (800037c <MX_I2C1_Init+0x74>)
 8000344:	f000 fd30 	bl	8000da8 <HAL_I2C_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800034e:	f000 f8d7 	bl	8000500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000352:	2100      	movs	r1, #0
 8000354:	4809      	ldr	r0, [pc, #36]	@ (800037c <MX_I2C1_Init+0x74>)
 8000356:	f000 fdc2 	bl	8000ede <HAL_I2CEx_ConfigAnalogFilter>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000360:	f000 f8ce 	bl	8000500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000364:	2100      	movs	r1, #0
 8000366:	4805      	ldr	r0, [pc, #20]	@ (800037c <MX_I2C1_Init+0x74>)
 8000368:	f000 fe04 	bl	8000f74 <HAL_I2CEx_ConfigDigitalFilter>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000372:	f000 f8c5 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000198 	.word	0x20000198
 8000380:	40005400 	.word	0x40005400
 8000384:	00201d2b 	.word	0x00201d2b

08000388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800038c:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <MX_SPI1_Init+0x74>)
 800038e:	4a1c      	ldr	r2, [pc, #112]	@ (8000400 <MX_SPI1_Init+0x78>)
 8000390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000392:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <MX_SPI1_Init+0x74>)
 8000394:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800039a:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <MX_SPI1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003a0:	4b16      	ldr	r3, [pc, #88]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003a2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80003a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a8:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ae:	4b13      	ldr	r3, [pc, #76]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003b4:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003be:	2208      	movs	r2, #8
 80003c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003d6:	2207      	movs	r2, #7
 80003d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003e2:	2208      	movs	r2, #8
 80003e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <MX_SPI1_Init+0x74>)
 80003e8:	f003 fe98 	bl	800411c <HAL_SPI_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003f2:	f000 f885 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200001ec 	.word	0x200001ec
 8000400:	40013000 	.word	0x40013000

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	@ 0x28
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 0314 	add.w	r3, r7, #20
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800041a:	4b37      	ldr	r3, [pc, #220]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a36      	ldr	r2, [pc, #216]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000420:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b34      	ldr	r3, [pc, #208]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800042e:	613b      	str	r3, [r7, #16]
 8000430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000432:	4b31      	ldr	r3, [pc, #196]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a30      	ldr	r2, [pc, #192]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000438:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b2e      	ldr	r3, [pc, #184]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800044a:	4b2b      	ldr	r3, [pc, #172]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a2a      	ldr	r2, [pc, #168]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000450:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b28      	ldr	r3, [pc, #160]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a24      	ldr	r2, [pc, #144]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b22      	ldr	r3, [pc, #136]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b1f      	ldr	r3, [pc, #124]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a1e      	ldr	r2, [pc, #120]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <MX_GPIO_Init+0xf4>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000492:	2200      	movs	r2, #0
 8000494:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000498:	4818      	ldr	r0, [pc, #96]	@ (80004fc <MX_GPIO_Init+0xf8>)
 800049a:	f000 fc6d 	bl	8000d78 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800049e:	2337      	movs	r3, #55	@ 0x37
 80004a0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004a2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80004a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	4812      	ldr	r0, [pc, #72]	@ (80004fc <MX_GPIO_Init+0xf8>)
 80004b4:	f000 fae6 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004b8:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80004bc:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2300      	movs	r3, #0
 80004c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	4619      	mov	r1, r3
 80004d0:	480a      	ldr	r0, [pc, #40]	@ (80004fc <MX_GPIO_Init+0xf8>)
 80004d2:	f000 fad7 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004d6:	2301      	movs	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4619      	mov	r1, r3
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ec:	f000 faca 	bl	8000a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f0:	bf00      	nop
 80004f2:	3728      	adds	r7, #40	@ 0x28
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48001000 	.word	0x48001000

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <Error_Handler+0x8>

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <HAL_MspInit+0x44>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <HAL_MspInit+0x44>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <HAL_MspInit+0x44>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <HAL_MspInit+0x44>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <HAL_MspInit+0x44>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <HAL_MspInit+0x44>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000542:	2007      	movs	r0, #7
 8000544:	f000 fa5c 	bl	8000a00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000

08000554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <HAL_I2C_MspInit+0x7c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d127      	bne.n	80005c6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <HAL_I2C_MspInit+0x80>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a16      	ldr	r2, [pc, #88]	@ (80005d4 <HAL_I2C_MspInit+0x80>)
 800057c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <HAL_I2C_MspInit+0x80>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800058e:	23c0      	movs	r3, #192	@ 0xc0
 8000590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000592:	2312      	movs	r3, #18
 8000594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000596:	2301      	movs	r3, #1
 8000598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	2303      	movs	r3, #3
 800059c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800059e:	2304      	movs	r3, #4
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <HAL_I2C_MspInit+0x84>)
 80005aa:	f000 fa6b 	bl	8000a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_I2C_MspInit+0x80>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <HAL_I2C_MspInit+0x80>)
 80005b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b8:	61d3      	str	r3, [r2, #28]
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_I2C_MspInit+0x80>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005c6:	bf00      	nop
 80005c8:	3728      	adds	r7, #40	@ 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40005400 	.word	0x40005400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000400 	.word	0x48000400

080005dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a17      	ldr	r2, [pc, #92]	@ (8000658 <HAL_SPI_MspInit+0x7c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d128      	bne.n	8000650 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005fe:	4b17      	ldr	r3, [pc, #92]	@ (800065c <HAL_SPI_MspInit+0x80>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a16      	ldr	r2, [pc, #88]	@ (800065c <HAL_SPI_MspInit+0x80>)
 8000604:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HAL_SPI_MspInit+0x80>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <HAL_SPI_MspInit+0x80>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a10      	ldr	r2, [pc, #64]	@ (800065c <HAL_SPI_MspInit+0x80>)
 800061c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <HAL_SPI_MspInit+0x80>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800062e:	23e0      	movs	r3, #224	@ 0xe0
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800063e:	2305      	movs	r3, #5
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064c:	f000 fa1a 	bl	8000a84 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	@ 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40013000 	.word	0x40013000
 800065c:	40021000 	.word	0x40021000

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <NMI_Handler+0x4>

08000668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <MemManage_Handler+0x4>

08000678 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <UsageFault_Handler+0x4>

08000688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b6:	f000 f88f 	bl	80007d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006c4:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80006c6:	f000 fd8e 	bl	80011e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000f1c 	.word	0x20000f1c

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <SystemInit+0x20>)
 80006da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006de:	4a05      	ldr	r2, [pc, #20]	@ (80006f4 <SystemInit+0x20>)
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000730 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006fc:	f7ff ffea 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480c      	ldr	r0, [pc, #48]	@ (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 8000702:	490d      	ldr	r1, [pc, #52]	@ (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000704:	4a0d      	ldr	r2, [pc, #52]	@ (800073c <LoopForever+0xe>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000718:	4c0a      	ldr	r4, [pc, #40]	@ (8000744 <LoopForever+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000726:	f008 f961 	bl	80089ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800072a:	f7ff fd4d 	bl	80001c8 <main>

0800072e <LoopForever>:

LoopForever:
    b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000730:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800073c:	08008ae0 	.word	0x08008ae0
  ldr r2, =_sbss
 8000740:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000744:	20001410 	.word	0x20001410

08000748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_2_IRQHandler>
	...

0800074c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <HAL_Init+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <HAL_Init+0x28>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 f94f 	bl	8000a00 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000762:	2000      	movs	r0, #0
 8000764:	f000 f808 	bl	8000778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000768:	f7ff fed0 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40022000 	.word	0x40022000

08000778 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <HAL_InitTick+0x54>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_InitTick+0x58>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000792:	fbb2 f3f3 	udiv	r3, r2, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f967 	bl	8000a6a <HAL_SYSTICK_Config>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00e      	b.n	80007c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d80a      	bhi.n	80007c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ac:	2200      	movs	r2, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007b4:	f000 f92f 	bl	8000a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b8:	4a06      	ldr	r2, [pc, #24]	@ (80007d4 <HAL_InitTick+0x5c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	e000      	b.n	80007c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000004 	.word	0x20000004

080007d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_IncTick+0x20>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_IncTick+0x24>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <HAL_IncTick+0x24>)
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000250 	.word	0x20000250

08000800 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;  
 8000804:	4b03      	ldr	r3, [pc, #12]	@ (8000814 <HAL_GetTick+0x14>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000250 	.word	0x20000250

08000818 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000820:	f7ff ffee 	bl	8000800 <HAL_GetTick>
 8000824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000830:	d005      	beq.n	800083e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <HAL_Delay+0x44>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4413      	add	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800083e:	bf00      	nop
 8000840:	f7ff ffde 	bl	8000800 <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	429a      	cmp	r2, r3
 800084e:	d8f7      	bhi.n	8000840 <HAL_Delay+0x28>
  {
  }
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008

08000860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800088c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000892:	4a04      	ldr	r2, [pc, #16]	@ (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	60d3      	str	r3, [r2, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	f003 0307 	and.w	r3, r3, #7
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db0b      	blt.n	80008ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f003 021f 	and.w	r2, r3, #31
 80008dc:	4907      	ldr	r1, [pc, #28]	@ (80008fc <__NVIC_EnableIRQ+0x38>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	095b      	lsrs	r3, r3, #5
 80008e4:	2001      	movs	r0, #1
 80008e6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000e100 	.word	0xe000e100

08000900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db0a      	blt.n	800092a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	490c      	ldr	r1, [pc, #48]	@ (800094c <__NVIC_SetPriority+0x4c>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	0112      	lsls	r2, r2, #4
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	440b      	add	r3, r1
 8000924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000928:	e00a      	b.n	8000940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4908      	ldr	r1, [pc, #32]	@ (8000950 <__NVIC_SetPriority+0x50>)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	3b04      	subs	r3, #4
 8000938:	0112      	lsls	r2, r2, #4
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	440b      	add	r3, r1
 800093e:	761a      	strb	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b480      	push	{r7}
 8000956:	b089      	sub	sp, #36	@ 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f1c3 0307 	rsb	r3, r3, #7
 800096e:	2b04      	cmp	r3, #4
 8000970:	bf28      	it	cs
 8000972:	2304      	movcs	r3, #4
 8000974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3304      	adds	r3, #4
 800097a:	2b06      	cmp	r3, #6
 800097c:	d902      	bls.n	8000984 <NVIC_EncodePriority+0x30>
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3b03      	subs	r3, #3
 8000982:	e000      	b.n	8000986 <NVIC_EncodePriority+0x32>
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43da      	mvns	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800099c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa01 f303 	lsl.w	r3, r1, r3
 80009a6:	43d9      	mvns	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	4313      	orrs	r3, r2
         );
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3724      	adds	r7, #36	@ 0x24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009cc:	d301      	bcc.n	80009d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00f      	b.n	80009f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009d2:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <SysTick_Config+0x40>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009da:	210f      	movs	r1, #15
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009e0:	f7ff ff8e 	bl	8000900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <SysTick_Config+0x40>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ea:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <SysTick_Config+0x40>)
 80009ec:	2207      	movs	r2, #7
 80009ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	e000e010 	.word	0xe000e010

08000a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ff29 	bl	8000860 <__NVIC_SetPriorityGrouping>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a28:	f7ff ff3e 	bl	80008a8 <__NVIC_GetPriorityGrouping>
 8000a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	6978      	ldr	r0, [r7, #20]
 8000a34:	f7ff ff8e 	bl	8000954 <NVIC_EncodePriority>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff5d 	bl	8000900 <__NVIC_SetPriority>
}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4603      	mov	r3, r0
 8000a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff31 	bl	80008c4 <__NVIC_EnableIRQ>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff ffa2 	bl	80009bc <SysTick_Config>
 8000a78:	4603      	mov	r3, r0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a92:	e154      	b.n	8000d3e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	2101      	movs	r1, #1
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 8146 	beq.w	8000d38 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d005      	beq.n	8000ac4 <HAL_GPIO_Init+0x40>
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d130      	bne.n	8000b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	2203      	movs	r2, #3
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000afa:	2201      	movs	r2, #1
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	091b      	lsrs	r3, r3, #4
 8000b10:	f003 0201 	and.w	r2, r3, #1
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d017      	beq.n	8000b62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d123      	bne.n	8000bb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	08da      	lsrs	r2, r3, #3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3208      	adds	r2, #8
 8000b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	220f      	movs	r2, #15
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	691a      	ldr	r2, [r3, #16]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f003 0307 	and.w	r3, r3, #7
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	08da      	lsrs	r2, r3, #3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3208      	adds	r2, #8
 8000bb0:	6939      	ldr	r1, [r7, #16]
 8000bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0203 	and.w	r2, r3, #3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 80a0 	beq.w	8000d38 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf8:	4b58      	ldr	r3, [pc, #352]	@ (8000d5c <HAL_GPIO_Init+0x2d8>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a57      	ldr	r2, [pc, #348]	@ (8000d5c <HAL_GPIO_Init+0x2d8>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b55      	ldr	r3, [pc, #340]	@ (8000d5c <HAL_GPIO_Init+0x2d8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c10:	4a53      	ldr	r2, [pc, #332]	@ (8000d60 <HAL_GPIO_Init+0x2dc>)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	3302      	adds	r3, #2
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	220f      	movs	r2, #15
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c3a:	d019      	beq.n	8000c70 <HAL_GPIO_Init+0x1ec>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a49      	ldr	r2, [pc, #292]	@ (8000d64 <HAL_GPIO_Init+0x2e0>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d013      	beq.n	8000c6c <HAL_GPIO_Init+0x1e8>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a48      	ldr	r2, [pc, #288]	@ (8000d68 <HAL_GPIO_Init+0x2e4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d00d      	beq.n	8000c68 <HAL_GPIO_Init+0x1e4>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a47      	ldr	r2, [pc, #284]	@ (8000d6c <HAL_GPIO_Init+0x2e8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d007      	beq.n	8000c64 <HAL_GPIO_Init+0x1e0>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a46      	ldr	r2, [pc, #280]	@ (8000d70 <HAL_GPIO_Init+0x2ec>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d101      	bne.n	8000c60 <HAL_GPIO_Init+0x1dc>
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	e008      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c60:	2305      	movs	r3, #5
 8000c62:	e006      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c64:	2303      	movs	r3, #3
 8000c66:	e004      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e002      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e000      	b.n	8000c72 <HAL_GPIO_Init+0x1ee>
 8000c70:	2300      	movs	r3, #0
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	f002 0203 	and.w	r2, r2, #3
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c82:	4937      	ldr	r1, [pc, #220]	@ (8000d60 <HAL_GPIO_Init+0x2dc>)
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3302      	adds	r3, #2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c90:	4b38      	ldr	r3, [pc, #224]	@ (8000d74 <HAL_GPIO_Init+0x2f0>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8000d74 <HAL_GPIO_Init+0x2f0>)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cba:	4b2e      	ldr	r3, [pc, #184]	@ (8000d74 <HAL_GPIO_Init+0x2f0>)
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cde:	4a25      	ldr	r2, [pc, #148]	@ (8000d74 <HAL_GPIO_Init+0x2f0>)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ce4:	4b23      	ldr	r3, [pc, #140]	@ (8000d74 <HAL_GPIO_Init+0x2f0>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d08:	4a1a      	ldr	r2, [pc, #104]	@ (8000d74 <HAL_GPIO_Init+0x2f0>)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_GPIO_Init+0x2f0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d32:	4a10      	ldr	r2, [pc, #64]	@ (8000d74 <HAL_GPIO_Init+0x2f0>)
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa22 f303 	lsr.w	r3, r2, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f47f aea3 	bne.w	8000a94 <HAL_GPIO_Init+0x10>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	bf00      	nop
 8000d52:	371c      	adds	r7, #28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000
 8000d64:	48000400 	.word	0x48000400
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	48000c00 	.word	0x48000c00
 8000d70:	48001000 	.word	0x48001000
 8000d74:	40010400 	.word	0x40010400

08000d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]
 8000d84:	4613      	mov	r3, r2
 8000d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d88:	787b      	ldrb	r3, [r7, #1]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d8e:	887a      	ldrh	r2, [r7, #2]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d94:	e002      	b.n	8000d9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e08d      	b.n	8000ed6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d106      	bne.n	8000dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fbc0 	bl	8000554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2224      	movs	r2, #36	@ 0x24
 8000dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0201 	bic.w	r2, r2, #1
 8000dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000df8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d107      	bne.n	8000e22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	e006      	b.n	8000e30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000e2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d108      	bne.n	8000e4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	e007      	b.n	8000e5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	6812      	ldr	r2, [r2, #0]
 8000e64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69d9      	ldr	r1, [r3, #28]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a1a      	ldr	r2, [r3, #32]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b20      	cmp	r3, #32
 8000ef2:	d138      	bne.n	8000f66 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e032      	b.n	8000f68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2224      	movs	r2, #36	@ 0x24
 8000f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000f30:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f042 0201 	orr.w	r2, r2, #1
 8000f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2220      	movs	r2, #32
 8000f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000f66:	2302      	movs	r3, #2
  }
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b20      	cmp	r3, #32
 8000f88:	d139      	bne.n	8000ffe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e033      	b.n	8001000 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2224      	movs	r2, #36	@ 0x24
 8000fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0201 	bic.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000fc6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f042 0201 	orr.w	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2220      	movs	r2, #32
 8000fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000ffe:	2302      	movs	r3, #2
  }
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e0b9      	b.n	8001192 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f007 f9fe 	bl	8008434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2203      	movs	r2, #3
 800103c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f003 f92b 	bl	80042a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e03e      	b.n	80010ce <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	3311      	adds	r3, #17
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	440b      	add	r3, r1
 8001072:	3310      	adds	r3, #16
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	440b      	add	r3, r1
 8001086:	3313      	adds	r3, #19
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	440b      	add	r3, r1
 800109a:	3320      	adds	r3, #32
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	3324      	adds	r3, #36	@ 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	440b      	add	r3, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	3301      	adds	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d3bb      	bcc.n	8001050 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e044      	b.n	8001168 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	440b      	add	r3, r1
 8001118:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	440b      	add	r3, r1
 800112e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	440b      	add	r3, r1
 800115a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	3301      	adds	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	791b      	ldrb	r3, [r3, #4]
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	429a      	cmp	r2, r3
 8001170:	d3b5      	bcc.n	80010de <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3304      	adds	r3, #4
 800117a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800117e:	f003 f8aa 	bl	80042d6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_PCD_Start+0x16>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e016      	b.n	80011de <HAL_PCD_Start+0x44>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 f858 	bl	8004272 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011c2:	2101      	movs	r1, #1
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f007 fbd1 	bl	800896c <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f005 fb16 	bl	8006800 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 fb0f 	bl	8006816 <USB_ReadInterrupts>
 80011f8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 fab1 	bl	800176c <PCD_EP_ISR_Handler>

    return;
 800120a:	e0bd      	b.n	8001388 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001212:	2b00      	cmp	r3, #0
 8001214:	d013      	beq.n	800123e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800121e:	b29a      	uxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001228:	b292      	uxth	r2, r2
 800122a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f007 f9a1 	bl	8008576 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001234:	2100      	movs	r1, #0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f8a9 	bl	800138e <HAL_PCD_SetAddress>

    return;
 800123c:	e0a4      	b.n	8001388 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00c      	beq.n	8001262 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001250:	b29a      	uxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800125a:	b292      	uxth	r2, r2
 800125c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001260:	e092      	b.n	8001388 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00c      	beq.n	8001286 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001274:	b29a      	uxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800127e:	b292      	uxth	r2, r2
 8001280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001284:	e080      	b.n	8001388 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d027      	beq.n	80012e0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001298:	b29a      	uxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0204 	bic.w	r2, r2, #4
 80012a2:	b292      	uxth	r2, r2
 80012a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0208 	bic.w	r2, r2, #8
 80012ba:	b292      	uxth	r2, r2
 80012bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f007 f991 	bl	80085e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80012d8:	b292      	uxth	r2, r2
 80012da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80012de:	e053      	b.n	8001388 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d027      	beq.n	800133a <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0208 	orr.w	r2, r2, #8
 80012fc:	b292      	uxth	r2, r2
 80012fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800130a:	b29a      	uxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001314:	b292      	uxth	r2, r2
 8001316:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0204 	orr.w	r2, r2, #4
 800132c:	b292      	uxth	r2, r2
 800132e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f007 f93e 	bl	80085b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001338:	e026      	b.n	8001388 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00f      	beq.n	8001364 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001356:	b292      	uxth	r2, r2
 8001358:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f007 f8fc 	bl	800855a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001362:	e011      	b.n	8001388 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00c      	beq.n	8001388 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001380:	b292      	uxth	r2, r2
 8001382:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001386:	bf00      	nop
  }
}
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_PCD_SetAddress+0x1a>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e012      	b.n	80013ce <HAL_PCD_SetAddress+0x40>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f005 fa0a 	bl	80067d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	4608      	mov	r0, r1
 80013e0:	4611      	mov	r1, r2
 80013e2:	461a      	mov	r2, r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	70fb      	strb	r3, [r7, #3]
 80013e8:	460b      	mov	r3, r1
 80013ea:	803b      	strh	r3, [r7, #0]
 80013ec:	4613      	mov	r3, r2
 80013ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013f0:	2300      	movs	r3, #0
 80013f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da0e      	bge.n	800141a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	f003 0207 	and.w	r2, r3, #7
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	3310      	adds	r3, #16
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2201      	movs	r2, #1
 8001416:	705a      	strb	r2, [r3, #1]
 8001418:	e00e      	b.n	8001438 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	f003 0207 	and.w	r2, r3, #7
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	b2da      	uxtb	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001444:	883a      	ldrh	r2, [r7, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	78ba      	ldrb	r2, [r7, #2]
 800144e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001450:	78bb      	ldrb	r3, [r7, #2]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d102      	bne.n	800145c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <HAL_PCD_EP_Open+0x94>
 8001466:	2302      	movs	r3, #2
 8001468:	e00e      	b.n	8001488 <HAL_PCD_EP_Open+0xb2>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68f9      	ldr	r1, [r7, #12]
 8001478:	4618      	mov	r0, r3
 800147a:	f002 ff4b 	bl	8004314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001486:	7afb      	ldrb	r3, [r7, #11]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800149c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	da0e      	bge.n	80014c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	f003 0207 	and.w	r2, r3, #7
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	3310      	adds	r3, #16
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2201      	movs	r2, #1
 80014be:	705a      	strb	r2, [r3, #1]
 80014c0:	e00e      	b.n	80014e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	f003 0207 	and.w	r2, r3, #7
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_PCD_EP_Close+0x6a>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e00e      	b.n	8001518 <HAL_PCD_EP_Close+0x88>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fac7 	bl	8004a9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	460b      	mov	r3, r1
 800152e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	f003 0207 	and.w	r2, r3, #7
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4413      	add	r3, r2
 8001546:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2200      	movs	r2, #0
 800155e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001560:	7afb      	ldrb	r3, [r7, #11]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	b2da      	uxtb	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6979      	ldr	r1, [r7, #20]
 8001572:	4618      	mov	r0, r3
 8001574:	f003 fc7f 	bl	8004e76 <USB_EPStartXfer>

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f003 0207 	and.w	r2, r3, #7
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80015a4:	681b      	ldr	r3, [r3, #0]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	460b      	mov	r3, r1
 80015c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	f003 0207 	and.w	r2, r3, #7
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	3310      	adds	r3, #16
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2200      	movs	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2201      	movs	r2, #1
 80015fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015fe:	7afb      	ldrb	r3, [r7, #11]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	b2da      	uxtb	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6979      	ldr	r1, [r7, #20]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fc30 	bl	8004e76 <USB_EPStartXfer>

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	7912      	ldrb	r2, [r2, #4]
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e03e      	b.n	80016bc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800163e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001642:	2b00      	cmp	r3, #0
 8001644:	da0e      	bge.n	8001664 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	f003 0207 	and.w	r2, r3, #7
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	3310      	adds	r3, #16
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2201      	movs	r2, #1
 8001660:	705a      	strb	r2, [r3, #1]
 8001662:	e00c      	b.n	800167e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001664:	78fa      	ldrb	r2, [r7, #3]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	b2da      	uxtb	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_PCD_EP_SetStall+0x7e>
 800169a:	2302      	movs	r3, #2
 800169c:	e00e      	b.n	80016bc <HAL_PCD_EP_SetStall+0x9c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68f9      	ldr	r1, [r7, #12]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f004 ff94 	bl	80065da <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	7912      	ldrb	r2, [r2, #4]
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e040      	b.n	8001764 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da0e      	bge.n	8001708 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	f003 0207 	and.w	r2, r3, #7
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	3310      	adds	r3, #16
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	705a      	strb	r2, [r3, #1]
 8001706:	e00e      	b.n	8001726 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	f003 0207 	and.w	r2, r3, #7
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	b2da      	uxtb	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_PCD_EP_ClrStall+0x82>
 8001742:	2302      	movs	r3, #2
 8001744:	e00e      	b.n	8001764 <HAL_PCD_EP_ClrStall+0xa0>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f004 ff91 	bl	800667c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b096      	sub	sp, #88	@ 0x58
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001774:	e3bb      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800177e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001782:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8001790:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001794:	2b00      	cmp	r3, #0
 8001796:	f040 8175 	bne.w	8001a84 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800179a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d14e      	bne.n	8001844 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80017b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017b6:	81fb      	strh	r3, [r7, #14]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3310      	adds	r3, #16
 80017ce:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80017d8:	b29b      	uxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	3302      	adds	r3, #2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	441a      	add	r2, r3
 8001806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001808:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800180a:	2100      	movs	r1, #0
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f006 fe8a 	bl	8008526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7b1b      	ldrb	r3, [r3, #12]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8368 	beq.w	8001eee <PCD_EP_ISR_Handler+0x782>
 800181e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 8363 	bne.w	8001eee <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7b1b      	ldrb	r3, [r3, #12]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001832:	b2da      	uxtb	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	731a      	strb	r2, [r3, #12]
 8001842:	e354      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800184a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001856:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800185a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800185e:	2b00      	cmp	r3, #0
 8001860:	d034      	beq.n	80018cc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800186a:	b29b      	uxth	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	3306      	adds	r3, #6
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800188a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800188c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800189c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f005 f80e 	bl	80068c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80018b2:	4013      	ands	r3, r2
 80018b4:	823b      	strh	r3, [r7, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	8a3a      	ldrh	r2, [r7, #16]
 80018bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018c0:	b292      	uxth	r2, r2
 80018c2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f006 fe01 	bl	80084cc <HAL_PCD_SetupStageCallback>
 80018ca:	e310      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f280 830c 	bge.w	8001eee <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80018e2:	4013      	ands	r3, r2
 80018e4:	83fb      	strh	r3, [r7, #30]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	8bfa      	ldrh	r2, [r7, #30]
 80018ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018f0:	b292      	uxth	r2, r2
 80018f2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	3306      	adds	r3, #6
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4413      	add	r3, r2
 8001912:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800191c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800191e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d019      	beq.n	800195c <PCD_EP_ISR_Handler+0x1f0>
 8001928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d015      	beq.n	800195c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001936:	6959      	ldr	r1, [r3, #20]
 8001938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800193c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800193e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001940:	b29b      	uxth	r3, r3
 8001942:	f004 ffbe 	bl	80068c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	441a      	add	r2, r3
 8001950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001952:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001954:	2100      	movs	r1, #0
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f006 fdca 	bl	80084f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001966:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800196a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 82bd 	bne.w	8001eee <PCD_EP_ISR_Handler+0x782>
 8001974:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001978:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800197c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001980:	f000 82b5 	beq.w	8001eee <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4413      	add	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10a      	bne.n	80019d2 <PCD_EP_ISR_Handler+0x266>
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	801a      	strh	r2, [r3, #0]
 80019d0:	e039      	b.n	8001a46 <PCD_EP_ISR_Handler+0x2da>
 80019d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80019d8:	d818      	bhi.n	8001a0c <PCD_EP_ISR_Handler+0x2a0>
 80019da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	085b      	lsrs	r3, r3, #1
 80019e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80019e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <PCD_EP_ISR_Handler+0x288>
 80019ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f0:	3301      	adds	r3, #1
 80019f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	029b      	lsls	r3, r3, #10
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	e01c      	b.n	8001a46 <PCD_EP_ISR_Handler+0x2da>
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <PCD_EP_ISR_Handler+0x2ba>
 8001a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a22:	3b01      	subs	r3, #1
 8001a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	029b      	lsls	r3, r3, #10
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a56:	827b      	strh	r3, [r7, #18]
 8001a58:	8a7b      	ldrh	r3, [r7, #18]
 8001a5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001a5e:	827b      	strh	r3, [r7, #18]
 8001a60:	8a7b      	ldrh	r3, [r7, #18]
 8001a62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001a66:	827b      	strh	r3, [r7, #18]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	8a7b      	ldrh	r3, [r7, #18]
 8001a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	8013      	strh	r3, [r2, #0]
 8001a82:	e234      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a98:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f280 80fc 	bge.w	8001c9a <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001ab8:	4013      	ands	r3, r2
 8001aba:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001ad0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ad4:	b292      	uxth	r2, r2
 8001ad6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ad8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af0:	7b1b      	ldrb	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d125      	bne.n	8001b42 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3306      	adds	r3, #6
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b1e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8001b22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8092 	beq.w	8001c50 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b32:	6959      	ldr	r1, [r3, #20]
 8001b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b36:	88da      	ldrh	r2, [r3, #6]
 8001b38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001b3c:	f004 fec1 	bl	80068c2 <USB_ReadPMA>
 8001b40:	e086      	b.n	8001c50 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b44:	78db      	ldrb	r3, [r3, #3]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d10a      	bne.n	8001b60 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b4a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b4e:	461a      	mov	r2, r3
 8001b50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f9d9 	bl	8001f0a <HAL_PCD_EP_DB_Receive>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8001b5e:	e077      	b.n	8001c50 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b7a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	441a      	add	r2, r3
 8001b8c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d024      	beq.n	8001c08 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001bea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d02e      	beq.n	8001c50 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf8:	6959      	ldr	r1, [r3, #20]
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfc:	891a      	ldrh	r2, [r3, #8]
 8001bfe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c02:	f004 fe5e 	bl	80068c2 <USB_ReadPMA>
 8001c06:	e023      	b.n	8001c50 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3306      	adds	r3, #6
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8001c34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c42:	6959      	ldr	r1, [r3, #20]
 8001c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c46:	895a      	ldrh	r2, [r3, #10]
 8001c48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c4c:	f004 fe39 	bl	80068c2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c58:	441a      	add	r2, r3
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001c66:	441a      	add	r2, r3
 8001c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <PCD_EP_ISR_Handler+0x514>
 8001c74:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d206      	bcs.n	8001c8e <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f006 fc32 	bl	80084f0 <HAL_PCD_DataOutStageCallback>
 8001c8c:	e005      	b.n	8001c9a <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 f8ee 	bl	8004e76 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8123 	beq.w	8001eee <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ca8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	3310      	adds	r3, #16
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	441a      	add	r2, r3
 8001ce8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cfa:	78db      	ldrb	r3, [r3, #3]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	f040 80a2 	bne.w	8001e46 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8001d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d0a:	7b1b      	ldrb	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8093 	beq.w	8001e38 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d12:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d046      	beq.n	8001dac <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d20:	785b      	ldrb	r3, [r3, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d126      	bne.n	8001d74 <PCD_EP_ISR_Handler+0x608>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	4413      	add	r3, r2
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	011a      	lsls	r2, r3, #4
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	4413      	add	r3, r2
 8001d48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	801a      	strh	r2, [r3, #0]
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	801a      	strh	r2, [r3, #0]
 8001d72:	e061      	b.n	8001e38 <PCD_EP_ISR_Handler+0x6cc>
 8001d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d15d      	bne.n	8001e38 <PCD_EP_ISR_Handler+0x6cc>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d90:	4413      	add	r3, r2
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	011a      	lsls	r2, r3, #4
 8001d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8001da2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]
 8001daa:	e045      	b.n	8001e38 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d126      	bne.n	8001e08 <PCD_EP_ISR_Handler+0x69c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dce:	4413      	add	r3, r2
 8001dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	011a      	lsls	r2, r3, #4
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dda:	4413      	add	r3, r2
 8001ddc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	e017      	b.n	8001e38 <PCD_EP_ISR_Handler+0x6cc>
 8001e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0a:	785b      	ldrb	r3, [r3, #1]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d113      	bne.n	8001e38 <PCD_EP_ISR_Handler+0x6cc>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e1e:	4413      	add	r3, r2
 8001e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	011a      	lsls	r2, r3, #4
 8001e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e34:	2200      	movs	r2, #0
 8001e36:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f006 fb71 	bl	8008526 <HAL_PCD_DataInStageCallback>
 8001e44:	e053      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d146      	bne.n	8001ee0 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	3302      	adds	r3, #2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d907      	bls.n	8001e9a <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8001e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001e92:	1ad2      	subs	r2, r2, r3
 8001e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e96:	619a      	str	r2, [r3, #24]
 8001e98:	e002      	b.n	8001ea0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d106      	bne.n	8001eb6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f006 fb39 	bl	8008526 <HAL_PCD_DataInStageCallback>
 8001eb4:	e01b      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ebe:	441a      	add	r2, r3
 8001ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ecc:	441a      	add	r2, r3
 8001ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 ffcc 	bl	8004e76 <USB_EPStartXfer>
 8001ede:	e006      	b.n	8001eee <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ee0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f91b 	bl	8002124 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f6ff ac3b 	blt.w	8001776 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3758      	adds	r7, #88	@ 0x58
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	4613      	mov	r3, r2
 8001f16:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d07e      	beq.n	8002020 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	3302      	adds	r3, #2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	699a      	ldr	r2, [r3, #24]
 8001f50:	8b7b      	ldrh	r3, [r7, #26]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d306      	bcc.n	8001f64 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	8b7b      	ldrh	r3, [r7, #26]
 8001f5c:	1ad2      	subs	r2, r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	619a      	str	r2, [r3, #24]
 8001f62:	e002      	b.n	8001f6a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d123      	bne.n	8001fba <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f8c:	833b      	strh	r3, [r7, #24]
 8001f8e:	8b3b      	ldrh	r3, [r7, #24]
 8001f90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f94:	833b      	strh	r3, [r7, #24]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	441a      	add	r2, r3
 8001fa4:	8b3b      	ldrh	r3, [r7, #24]
 8001fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01f      	beq.n	8002004 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fde:	82fb      	strh	r3, [r7, #22]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	441a      	add	r2, r3
 8001fee:	8afb      	ldrh	r3, [r7, #22]
 8001ff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001ff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ffc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002000:	b29b      	uxth	r3, r3
 8002002:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002004:	8b7b      	ldrh	r3, [r7, #26]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8087 	beq.w	800211a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6959      	ldr	r1, [r3, #20]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	891a      	ldrh	r2, [r3, #8]
 8002018:	8b7b      	ldrh	r3, [r7, #26]
 800201a:	f004 fc52 	bl	80068c2 <USB_ReadPMA>
 800201e:	e07c      	b.n	800211a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	3306      	adds	r3, #6
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002048:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	8b7b      	ldrh	r3, [r7, #26]
 8002050:	429a      	cmp	r2, r3
 8002052:	d306      	bcc.n	8002062 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	8b7b      	ldrh	r3, [r7, #26]
 800205a:	1ad2      	subs	r2, r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	e002      	b.n	8002068 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d123      	bne.n	80020b8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800208a:	83fb      	strh	r3, [r7, #30]
 800208c:	8bfb      	ldrh	r3, [r7, #30]
 800208e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002092:	83fb      	strh	r3, [r7, #30]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	441a      	add	r2, r3
 80020a2:	8bfb      	ldrh	r3, [r7, #30]
 80020a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d11f      	bne.n	8002102 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80020d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020dc:	83bb      	strh	r3, [r7, #28]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	441a      	add	r2, r3
 80020ec:	8bbb      	ldrh	r3, [r7, #28]
 80020ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020fe:	b29b      	uxth	r3, r3
 8002100:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002102:	8b7b      	ldrh	r3, [r7, #26]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	6959      	ldr	r1, [r3, #20]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	895a      	ldrh	r2, [r3, #10]
 8002114:	8b7b      	ldrh	r3, [r7, #26]
 8002116:	f004 fbd4 	bl	80068c2 <USB_ReadPMA>
    }
  }

  return count;
 800211a:	8b7b      	ldrh	r3, [r7, #26]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0a4      	sub	sp, #144	@ 0x90
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 81dd 	beq.w	80024f8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	3302      	adds	r3, #2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002166:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002172:	429a      	cmp	r2, r3
 8002174:	d907      	bls.n	8002186 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	699a      	ldr	r2, [r3, #24]
 800217a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800217e:	1ad2      	subs	r2, r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	619a      	str	r2, [r3, #24]
 8002184:	e002      	b.n	800218c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	f040 80b9 	bne.w	8002308 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	785b      	ldrb	r3, [r3, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d126      	bne.n	80021ec <HAL_PCD_EP_DB_Transmit+0xc8>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b2:	4413      	add	r3, r2
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	011a      	lsls	r2, r3, #4
 80021bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021be:	4413      	add	r3, r2
 80021c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80021c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d4:	801a      	strh	r2, [r3, #0]
 80021d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e8:	801a      	strh	r2, [r3, #0]
 80021ea:	e01a      	b.n	8002222 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	785b      	ldrb	r3, [r3, #1]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d116      	bne.n	8002222 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002208:	4413      	add	r3, r2
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	011a      	lsls	r2, r3, #4
 8002212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002214:	4413      	add	r3, r2
 8002216:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800221a:	633b      	str	r3, [r7, #48]	@ 0x30
 800221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221e:	2200      	movs	r2, #0
 8002220:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d126      	bne.n	800227e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	011a      	lsls	r2, r3, #4
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002262:	b29a      	uxth	r2, r3
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	801a      	strh	r2, [r3, #0]
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002276:	b29a      	uxth	r2, r3
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	801a      	strh	r2, [r3, #0]
 800227c:	e017      	b.n	80022ae <HAL_PCD_EP_DB_Transmit+0x18a>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d113      	bne.n	80022ae <HAL_PCD_EP_DB_Transmit+0x18a>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	4413      	add	r3, r2
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	011a      	lsls	r2, r3, #4
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	4413      	add	r3, r2
 80022a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	2200      	movs	r2, #0
 80022ac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f006 f936 	bl	8008526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 82fc 	beq.w	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80022dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022e0:	82fb      	strh	r3, [r7, #22]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	441a      	add	r2, r3
 80022f0:	8afb      	ldrh	r3, [r7, #22]
 80022f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80022f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80022fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002302:	b29b      	uxth	r3, r3
 8002304:	8013      	strh	r3, [r2, #0]
 8002306:	e2da      	b.n	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d021      	beq.n	8002356 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800232c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	441a      	add	r2, r3
 800233e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800234a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800234e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002352:	b29b      	uxth	r3, r3
 8002354:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 82ae 	bne.w	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800236a:	441a      	add	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002378:	441a      	add	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	429a      	cmp	r2, r3
 8002388:	d30b      	bcc.n	80023a2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	621a      	str	r2, [r3, #32]
 80023a0:	e017      	b.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80023aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80023ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80023ba:	e00a      	b.n	80023d2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	785b      	ldrb	r3, [r3, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d165      	bne.n	80024a6 <HAL_PCD_EP_DB_Transmit+0x382>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ee:	4413      	add	r3, r2
 80023f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	011a      	lsls	r2, r3, #4
 80023f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fa:	4413      	add	r3, r2
 80023fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002400:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240c:	b29a      	uxth	r2, r3
 800240e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <HAL_PCD_EP_DB_Transmit+0x30c>
 800241a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002428:	b29a      	uxth	r2, r3
 800242a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242c:	801a      	strh	r2, [r3, #0]
 800242e:	e057      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002430:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002434:	2b3e      	cmp	r3, #62	@ 0x3e
 8002436:	d818      	bhi.n	800246a <HAL_PCD_EP_DB_Transmit+0x346>
 8002438:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_PCD_EP_DB_Transmit+0x32e>
 800244c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800244e:	3301      	adds	r3, #1
 8002450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29a      	uxth	r2, r3
 8002458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800245a:	b29b      	uxth	r3, r3
 800245c:	029b      	lsls	r3, r3, #10
 800245e:	b29b      	uxth	r3, r3
 8002460:	4313      	orrs	r3, r2
 8002462:	b29a      	uxth	r2, r3
 8002464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002466:	801a      	strh	r2, [r3, #0]
 8002468:	e03a      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800246a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <HAL_PCD_EP_DB_Transmit+0x360>
 800247e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002480:	3b01      	subs	r3, #1
 8002482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	b29a      	uxth	r2, r3
 800248a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800248c:	b29b      	uxth	r3, r3
 800248e:	029b      	lsls	r3, r3, #10
 8002490:	b29b      	uxth	r3, r3
 8002492:	4313      	orrs	r3, r2
 8002494:	b29b      	uxth	r3, r3
 8002496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800249a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249e:	b29a      	uxth	r2, r3
 80024a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	e01c      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d118      	bne.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024bc:	b29b      	uxth	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024c2:	4413      	add	r3, r2
 80024c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	011a      	lsls	r2, r3, #4
 80024cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ce:	4413      	add	r3, r2
 80024d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80024d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80024d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024da:	b29a      	uxth	r2, r3
 80024dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6959      	ldr	r1, [r3, #20]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	891a      	ldrh	r2, [r3, #8]
 80024ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f004 f9a0 	bl	8006836 <USB_WritePMA>
 80024f6:	e1e2      	b.n	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002500:	b29b      	uxth	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	3306      	adds	r3, #6
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002520:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800252c:	429a      	cmp	r2, r3
 800252e:	d307      	bcc.n	8002540 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	699a      	ldr	r2, [r3, #24]
 8002534:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002538:	1ad2      	subs	r2, r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	619a      	str	r2, [r3, #24]
 800253e:	e002      	b.n	8002546 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80c0 	bne.w	80026d0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d126      	bne.n	80025a6 <HAL_PCD_EP_DB_Transmit+0x482>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002566:	b29b      	uxth	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800256c:	4413      	add	r3, r2
 800256e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	011a      	lsls	r2, r3, #4
 8002576:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002578:	4413      	add	r3, r2
 800257a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800257e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258a:	b29a      	uxth	r2, r3
 800258c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	b29b      	uxth	r3, r3
 8002596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800259a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259e:	b29a      	uxth	r2, r3
 80025a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025a2:	801a      	strh	r2, [r3, #0]
 80025a4:	e01a      	b.n	80025dc <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d116      	bne.n	80025dc <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025bc:	b29b      	uxth	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025c2:	4413      	add	r3, r2
 80025c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	011a      	lsls	r2, r3, #4
 80025cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025ce:	4413      	add	r3, r2
 80025d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80025d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80025d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025d8:	2200      	movs	r2, #0
 80025da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d12b      	bne.n	8002642 <HAL_PCD_EP_DB_Transmit+0x51e>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025fe:	4413      	add	r3, r2
 8002600:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	011a      	lsls	r2, r3, #4
 8002608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800260a:	4413      	add	r3, r2
 800260c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002614:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002620:	b29a      	uxth	r2, r3
 8002622:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002626:	801a      	strh	r2, [r3, #0]
 8002628:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002638:	b29a      	uxth	r2, r3
 800263a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800263e:	801a      	strh	r2, [r3, #0]
 8002640:	e017      	b.n	8002672 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	785b      	ldrb	r3, [r3, #1]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d113      	bne.n	8002672 <HAL_PCD_EP_DB_Transmit+0x54e>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002652:	b29b      	uxth	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002658:	4413      	add	r3, r2
 800265a:	677b      	str	r3, [r7, #116]	@ 0x74
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	011a      	lsls	r2, r3, #4
 8002662:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002664:	4413      	add	r3, r2
 8002666:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800266a:	673b      	str	r3, [r7, #112]	@ 0x70
 800266c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800266e:	2200      	movs	r2, #0
 8002670:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f005 ff54 	bl	8008526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002684:	2b00      	cmp	r3, #0
 8002686:	f040 811a 	bne.w	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	441a      	add	r2, r3
 80026b6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80026ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	8013      	strh	r3, [r2, #0]
 80026ce:	e0f6      	b.n	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d121      	bne.n	800271e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026f4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	441a      	add	r2, r3
 8002706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800270a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800270e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800271a:	b29b      	uxth	r3, r3
 800271c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 80ca 	bne.w	80028be <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002732:	441a      	add	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002740:	441a      	add	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	429a      	cmp	r2, r3
 8002750:	d30b      	bcc.n	800276a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	6a1a      	ldr	r2, [r3, #32]
 800275e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002762:	1ad2      	subs	r2, r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	621a      	str	r2, [r3, #32]
 8002768:	e017      	b.n	800279a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002772:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002776:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002782:	e00a      	b.n	800279a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	657b      	str	r3, [r7, #84]	@ 0x54
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d165      	bne.n	8002874 <HAL_PCD_EP_DB_Transmit+0x750>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027bc:	4413      	add	r3, r2
 80027be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	011a      	lsls	r2, r3, #4
 80027c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027c8:	4413      	add	r3, r2
 80027ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <HAL_PCD_EP_DB_Transmit+0x6da>
 80027e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027fa:	801a      	strh	r2, [r3, #0]
 80027fc:	e054      	b.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x784>
 80027fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002802:	2b3e      	cmp	r3, #62	@ 0x3e
 8002804:	d818      	bhi.n	8002838 <HAL_PCD_EP_DB_Transmit+0x714>
 8002806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800280a:	085b      	lsrs	r3, r3, #1
 800280c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800280e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800281a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800281c:	3301      	adds	r3, #1
 800281e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002820:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29a      	uxth	r2, r3
 8002826:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002828:	b29b      	uxth	r3, r3
 800282a:	029b      	lsls	r3, r3, #10
 800282c:	b29b      	uxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	b29a      	uxth	r2, r3
 8002832:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	e037      	b.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <HAL_PCD_EP_DB_Transmit+0x72e>
 800284c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800284e:	3b01      	subs	r3, #1
 8002850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	b29a      	uxth	r2, r3
 8002858:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800285a:	b29b      	uxth	r3, r3
 800285c:	029b      	lsls	r3, r3, #10
 800285e:	b29b      	uxth	r3, r3
 8002860:	4313      	orrs	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800286c:	b29a      	uxth	r2, r3
 800286e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002870:	801a      	strh	r2, [r3, #0]
 8002872:	e019      	b.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x784>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	785b      	ldrb	r3, [r3, #1]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d115      	bne.n	80028a8 <HAL_PCD_EP_DB_Transmit+0x784>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288a:	4413      	add	r3, r2
 800288c:	657b      	str	r3, [r7, #84]	@ 0x54
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	011a      	lsls	r2, r3, #4
 8002894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002896:	4413      	add	r3, r2
 8002898:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800289c:	653b      	str	r3, [r7, #80]	@ 0x50
 800289e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028a6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	6959      	ldr	r1, [r3, #20]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	895a      	ldrh	r2, [r3, #10]
 80028b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f003 ffbc 	bl	8006836 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028d8:	82bb      	strh	r3, [r7, #20]
 80028da:	8abb      	ldrh	r3, [r7, #20]
 80028dc:	f083 0310 	eor.w	r3, r3, #16
 80028e0:	82bb      	strh	r3, [r7, #20]
 80028e2:	8abb      	ldrh	r3, [r7, #20]
 80028e4:	f083 0320 	eor.w	r3, r3, #32
 80028e8:	82bb      	strh	r3, [r7, #20]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	8abb      	ldrh	r3, [r7, #20]
 80028fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800290a:	b29b      	uxth	r3, r3
 800290c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3790      	adds	r7, #144	@ 0x90
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	817b      	strh	r3, [r7, #10]
 8002926:	4613      	mov	r3, r2
 8002928:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	f003 0207 	and.w	r2, r3, #7
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3310      	adds	r3, #16
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e009      	b.n	8002962 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800294e:	897a      	ldrh	r2, [r7, #10]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d107      	bne.n	8002978 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2200      	movs	r2, #0
 800296c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	b29a      	uxth	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	80da      	strh	r2, [r3, #6]
 8002976:	e00b      	b.n	8002990 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2201      	movs	r2, #1
 800297c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	b29a      	uxth	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	b29a      	uxth	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f001 b823 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 817d 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029dc:	4bbc      	ldr	r3, [pc, #752]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d00c      	beq.n	8002a02 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029e8:	4bb9      	ldr	r3, [pc, #740]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d15c      	bne.n	8002aae <HAL_RCC_OscConfig+0x10e>
 80029f4:	4bb6      	ldr	r3, [pc, #728]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a00:	d155      	bne.n	8002aae <HAL_RCC_OscConfig+0x10e>
 8002a02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a06:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d102      	bne.n	8002a34 <HAL_RCC_OscConfig+0x94>
 8002a2e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	e015      	b.n	8002a60 <HAL_RCC_OscConfig+0xc0>
 8002a34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a38:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002a48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a4c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002a50:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002a5c:	4b9c      	ldr	r3, [pc, #624]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a64:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002a68:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002a6c:	fa92 f2a2 	rbit	r2, r2
 8002a70:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002a74:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f002 021f 	and.w	r2, r2, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 811f 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x334>
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 8116 	bne.w	8002cd4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f000 bfaf 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x12e>
 8002ac0:	4b83      	ldr	r3, [pc, #524]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a82      	ldr	r2, [pc, #520]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	e036      	b.n	8002b3c <HAL_RCC_OscConfig+0x19c>
 8002ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x158>
 8002ade:	4b7c      	ldr	r3, [pc, #496]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7b      	ldr	r2, [pc, #492]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b79      	ldr	r3, [pc, #484]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a78      	ldr	r2, [pc, #480]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e021      	b.n	8002b3c <HAL_RCC_OscConfig+0x19c>
 8002af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x184>
 8002b0a:	4b71      	ldr	r3, [pc, #452]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a70      	ldr	r2, [pc, #448]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b6e      	ldr	r3, [pc, #440]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a6d      	ldr	r2, [pc, #436]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e00b      	b.n	8002b3c <HAL_RCC_OscConfig+0x19c>
 8002b24:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a69      	ldr	r2, [pc, #420]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b67      	ldr	r3, [pc, #412]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a66      	ldr	r2, [pc, #408]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b3c:	4b64      	ldr	r3, [pc, #400]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	f023 020f 	bic.w	r2, r3, #15
 8002b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	495f      	ldr	r1, [pc, #380]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d059      	beq.n	8002c1a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fd fe4b 	bl	8000800 <HAL_GetTick>
 8002b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fd fe46 	bl	8000800 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b64      	cmp	r3, #100	@ 0x64
 8002b7e:	d902      	bls.n	8002b86 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	f000 bf43 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8002b86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b8a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002b9a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x218>
 8002bb2:	4b47      	ldr	r3, [pc, #284]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e015      	b.n	8002be4 <HAL_RCC_OscConfig+0x244>
 8002bb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bbc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002bc4:	fa93 f3a3 	rbit	r3, r3
 8002bc8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002bcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002bd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002be0:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002be8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002bec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002bf0:	fa92 f2a2 	rbit	r2, r2
 8002bf4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002bf8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002bfc:	fab2 f282 	clz	r2, r2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f042 0220 	orr.w	r2, r2, #32
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	f002 021f 	and.w	r2, r2, #31
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ab      	beq.n	8002b70 <HAL_RCC_OscConfig+0x1d0>
 8002c18:	e05d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fd fdf1 	bl	8000800 <HAL_GetTick>
 8002c1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fd fdec 	bl	8000800 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	@ 0x64
 8002c32:	d902      	bls.n	8002c3a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	f000 bee9 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8002c3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c3e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002c4e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_OscConfig+0x2cc>
 8002c66:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	e015      	b.n	8002c98 <HAL_RCC_OscConfig+0x2f8>
 8002c6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c70:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002c80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c84:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002c88:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002c94:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <HAL_RCC_OscConfig+0x330>)
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c9c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002ca0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002ca4:	fa92 f2a2 	rbit	r2, r2
 8002ca8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002cac:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002cb0:	fab2 f282 	clz	r2, r2
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f042 0220 	orr.w	r2, r2, #32
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	f002 021f 	and.w	r2, r2, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ab      	bne.n	8002c24 <HAL_RCC_OscConfig+0x284>
 8002ccc:	e003      	b.n	8002cd6 <HAL_RCC_OscConfig+0x336>
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 817d 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cec:	4ba6      	ldr	r3, [pc, #664]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cf8:	4ba3      	ldr	r3, [pc, #652]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d172      	bne.n	8002dea <HAL_RCC_OscConfig+0x44a>
 8002d04:	4ba0      	ldr	r3, [pc, #640]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d16c      	bne.n	8002dea <HAL_RCC_OscConfig+0x44a>
 8002d10:	2302      	movs	r3, #2
 8002d12:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002d22:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_OscConfig+0x3a0>
 8002d3a:	4b93      	ldr	r3, [pc, #588]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	e013      	b.n	8002d68 <HAL_RCC_OscConfig+0x3c8>
 8002d40:	2302      	movs	r3, #2
 8002d42:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002d52:	2302      	movs	r3, #2
 8002d54:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002d58:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002d64:	4b88      	ldr	r3, [pc, #544]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002d6e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002d72:	fa92 f2a2 	rbit	r2, r2
 8002d76:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002d7a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0220 	orr.w	r2, r2, #32
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCC_OscConfig+0x410>
 8002d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d002      	beq.n	8002db0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f000 be2e 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b75      	ldr	r3, [pc, #468]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	21f8      	movs	r1, #248	@ 0xf8
 8002dc6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002dce:	fa91 f1a1 	rbit	r1, r1
 8002dd2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002dd6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002dda:	fab1 f181 	clz	r1, r1
 8002dde:	b2c9      	uxtb	r1, r1
 8002de0:	408b      	lsls	r3, r1
 8002de2:	4969      	ldr	r1, [pc, #420]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de8:	e0fd      	b.n	8002fe6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8088 	beq.w	8002f0c <HAL_RCC_OscConfig+0x56c>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002e0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	2301      	movs	r3, #1
 8002e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fd fcea 	bl	8000800 <HAL_GetTick>
 8002e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e32:	f7fd fce5 	bl	8000800 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	f000 bde2 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002e5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4d8>
 8002e72:	4b45      	ldr	r3, [pc, #276]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e013      	b.n	8002ea0 <HAL_RCC_OscConfig+0x500>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002e90:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002ea6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002eaa:	fa92 f2a2 	rbit	r2, r2
 8002eae:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002eb2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002eb6:	fab2 f282 	clz	r2, r2
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f042 0220 	orr.w	r2, r2, #32
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f002 021f 	and.w	r2, r2, #31
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0af      	beq.n	8002e32 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	21f8      	movs	r1, #248	@ 0xf8
 8002ee8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002ef0:	fa91 f1a1 	rbit	r1, r1
 8002ef4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002ef8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002efc:	fab1 f181 	clz	r1, r1
 8002f00:	b2c9      	uxtb	r1, r1
 8002f02:	408b      	lsls	r3, r1
 8002f04:	4920      	ldr	r1, [pc, #128]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
 8002f0a:	e06c      	b.n	8002fe6 <HAL_RCC_OscConfig+0x646>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002f1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	461a      	mov	r2, r3
 8002f34:	2300      	movs	r3, #0
 8002f36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fd fc62 	bl	8000800 <HAL_GetTick>
 8002f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f42:	f7fd fc5d 	bl	8000800 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	f000 bd5a 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d104      	bne.n	8002f8c <HAL_RCC_OscConfig+0x5ec>
 8002f82:	4b01      	ldr	r3, [pc, #4]	@ (8002f88 <HAL_RCC_OscConfig+0x5e8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	e015      	b.n	8002fb4 <HAL_RCC_OscConfig+0x614>
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002fa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002fb0:	4bc8      	ldr	r3, [pc, #800]	@ (80032d4 <HAL_RCC_OscConfig+0x934>)
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002fba:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002fbe:	fa92 f2a2 	rbit	r2, r2
 8002fc2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002fc6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002fca:	fab2 f282 	clz	r2, r2
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	f042 0220 	orr.w	r2, r2, #32
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f002 021f 	and.w	r2, r2, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ad      	bne.n	8002f42 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8110 	beq.w	800321c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003000:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d079      	beq.n	8003100 <HAL_RCC_OscConfig+0x760>
 800300c:	2301      	movs	r3, #1
 800300e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800301e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	4bab      	ldr	r3, [pc, #684]	@ (80032d8 <HAL_RCC_OscConfig+0x938>)
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	461a      	mov	r2, r3
 8003032:	2301      	movs	r3, #1
 8003034:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003036:	f7fd fbe3 	bl	8000800 <HAL_GetTick>
 800303a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303e:	e00a      	b.n	8003056 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003040:	f7fd fbde 	bl	8000800 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d902      	bls.n	8003056 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	f000 bcdb 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003056:	2302      	movs	r3, #2
 8003058:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003070:	2202      	movs	r2, #2
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003078:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	fa93 f2a3 	rbit	r2, r3
 8003082:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003086:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003094:	2202      	movs	r2, #2
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80030ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b0:	4b88      	ldr	r3, [pc, #544]	@ (80032d4 <HAL_RCC_OscConfig+0x934>)
 80030b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80030bc:	2102      	movs	r1, #2
 80030be:	6019      	str	r1, [r3, #0]
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	fa93 f1a3 	rbit	r1, r3
 80030ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030d6:	6019      	str	r1, [r3, #0]
  return result;
 80030d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0a0      	beq.n	8003040 <HAL_RCC_OscConfig+0x6a0>
 80030fe:	e08d      	b.n	800321c <HAL_RCC_OscConfig+0x87c>
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003110:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	fa93 f2a3 	rbit	r2, r3
 800311a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800311e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003122:	601a      	str	r2, [r3, #0]
  return result;
 8003124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003128:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800312c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	4b68      	ldr	r3, [pc, #416]	@ (80032d8 <HAL_RCC_OscConfig+0x938>)
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	461a      	mov	r2, r3
 800313e:	2300      	movs	r3, #0
 8003140:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003142:	f7fd fb5d 	bl	8000800 <HAL_GetTick>
 8003146:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314a:	e00a      	b.n	8003162 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314c:	f7fd fb58 	bl	8000800 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d902      	bls.n	8003162 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	f000 bc55 	b.w	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003166:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800316a:	2202      	movs	r2, #2
 800316c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003172:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	fa93 f2a3 	rbit	r2, r3
 800317c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003180:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800318e:	2202      	movs	r2, #2
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003196:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	fa93 f2a3 	rbit	r2, r3
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80031b2:	2202      	movs	r2, #2
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	fa93 f2a3 	rbit	r2, r3
 80031c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80031cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ce:	4b41      	ldr	r3, [pc, #260]	@ (80032d4 <HAL_RCC_OscConfig+0x934>)
 80031d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031da:	2102      	movs	r1, #2
 80031dc:	6019      	str	r1, [r3, #0]
 80031de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	fa93 f1a3 	rbit	r1, r3
 80031ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031f4:	6019      	str	r1, [r3, #0]
  return result;
 80031f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d197      	bne.n	800314c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 81a1 	beq.w	8003574 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003238:	4b26      	ldr	r3, [pc, #152]	@ (80032d4 <HAL_RCC_OscConfig+0x934>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d116      	bne.n	8003272 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003244:	4b23      	ldr	r3, [pc, #140]	@ (80032d4 <HAL_RCC_OscConfig+0x934>)
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	4a22      	ldr	r2, [pc, #136]	@ (80032d4 <HAL_RCC_OscConfig+0x934>)
 800324a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324e:	61d3      	str	r3, [r2, #28]
 8003250:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <HAL_RCC_OscConfig+0x934>)
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003266:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800326a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b1a      	ldr	r3, [pc, #104]	@ (80032dc <HAL_RCC_OscConfig+0x93c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11a      	bne.n	80032b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327e:	4b17      	ldr	r3, [pc, #92]	@ (80032dc <HAL_RCC_OscConfig+0x93c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a16      	ldr	r2, [pc, #88]	@ (80032dc <HAL_RCC_OscConfig+0x93c>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003288:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328a:	f7fd fab9 	bl	8000800 <HAL_GetTick>
 800328e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003292:	e009      	b.n	80032a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003294:	f7fd fab4 	bl	8000800 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b64      	cmp	r3, #100	@ 0x64
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e3b1      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b0c      	ldr	r3, [pc, #48]	@ (80032dc <HAL_RCC_OscConfig+0x93c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ef      	beq.n	8003294 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10d      	bne.n	80032e0 <HAL_RCC_OscConfig+0x940>
 80032c4:	4b03      	ldr	r3, [pc, #12]	@ (80032d4 <HAL_RCC_OscConfig+0x934>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	4a02      	ldr	r2, [pc, #8]	@ (80032d4 <HAL_RCC_OscConfig+0x934>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6213      	str	r3, [r2, #32]
 80032d0:	e03c      	b.n	800334c <HAL_RCC_OscConfig+0x9ac>
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	10908120 	.word	0x10908120
 80032dc:	40007000 	.word	0x40007000
 80032e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10c      	bne.n	800330a <HAL_RCC_OscConfig+0x96a>
 80032f0:	4bc1      	ldr	r3, [pc, #772]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4ac0      	ldr	r2, [pc, #768]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	6213      	str	r3, [r2, #32]
 80032fc:	4bbe      	ldr	r3, [pc, #760]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4abd      	ldr	r2, [pc, #756]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003302:	f023 0304 	bic.w	r3, r3, #4
 8003306:	6213      	str	r3, [r2, #32]
 8003308:	e020      	b.n	800334c <HAL_RCC_OscConfig+0x9ac>
 800330a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x994>
 800331a:	4bb7      	ldr	r3, [pc, #732]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4ab6      	ldr	r2, [pc, #728]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	4bb4      	ldr	r3, [pc, #720]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4ab3      	ldr	r2, [pc, #716]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6213      	str	r3, [r2, #32]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0x9ac>
 8003334:	4bb0      	ldr	r3, [pc, #704]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4aaf      	ldr	r2, [pc, #700]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6213      	str	r3, [r2, #32]
 8003340:	4bad      	ldr	r3, [pc, #692]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4aac      	ldr	r2, [pc, #688]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003346:	f023 0304 	bic.w	r3, r3, #4
 800334a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003350:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8081 	beq.w	8003460 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7fd fa4f 	bl	8000800 <HAL_GetTick>
 8003362:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fd fa4a 	bl	8000800 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003378:	4293      	cmp	r3, r2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e345      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003388:	2202      	movs	r2, #2
 800338a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003390:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	fa93 f2a3 	rbit	r2, r3
 800339a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033ac:	2202      	movs	r2, #2
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	fa93 f2a3 	rbit	r2, r3
 80033be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80033c6:	601a      	str	r2, [r3, #0]
  return result;
 80033c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033cc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80033d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f043 0302 	orr.w	r3, r3, #2
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d102      	bne.n	80033ec <HAL_RCC_OscConfig+0xa4c>
 80033e6:	4b84      	ldr	r3, [pc, #528]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	e013      	b.n	8003414 <HAL_RCC_OscConfig+0xa74>
 80033ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80033f4:	2202      	movs	r2, #2
 80033f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	fa93 f2a3 	rbit	r2, r3
 8003406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	4b79      	ldr	r3, [pc, #484]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003418:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800341c:	2102      	movs	r1, #2
 800341e:	6011      	str	r1, [r2, #0]
 8003420:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003424:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	fa92 f1a2 	rbit	r1, r2
 800342e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003432:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003436:	6011      	str	r1, [r2, #0]
  return result;
 8003438:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800343c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	fab2 f282 	clz	r2, r2
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	f002 021f 	and.w	r2, r2, #31
 8003452:	2101      	movs	r1, #1
 8003454:	fa01 f202 	lsl.w	r2, r1, r2
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d084      	beq.n	8003368 <HAL_RCC_OscConfig+0x9c8>
 800345e:	e07f      	b.n	8003560 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7fd f9ce 	bl	8000800 <HAL_GetTick>
 8003464:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003468:	e00b      	b.n	8003482 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fd f9c9 	bl	8000800 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e2c4      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003486:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800348a:	2202      	movs	r2, #2
 800348c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003492:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	fa93 f2a3 	rbit	r2, r3
 800349c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034aa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80034ae:	2202      	movs	r2, #2
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80034c8:	601a      	str	r2, [r3, #0]
  return result;
 80034ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ce:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80034d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f043 0302 	orr.w	r3, r3, #2
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d102      	bne.n	80034ee <HAL_RCC_OscConfig+0xb4e>
 80034e8:	4b43      	ldr	r3, [pc, #268]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	e013      	b.n	8003516 <HAL_RCC_OscConfig+0xb76>
 80034ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80034f6:	2202      	movs	r2, #2
 80034f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	4b39      	ldr	r3, [pc, #228]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800351a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800351e:	2102      	movs	r1, #2
 8003520:	6011      	str	r1, [r2, #0]
 8003522:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003526:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	fa92 f1a2 	rbit	r1, r2
 8003530:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003534:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003538:	6011      	str	r1, [r2, #0]
  return result;
 800353a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800353e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	fab2 f282 	clz	r2, r2
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	f002 021f 	and.w	r2, r2, #31
 8003554:	2101      	movs	r1, #1
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d184      	bne.n	800346a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003560:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003568:	4b23      	ldr	r3, [pc, #140]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	4a22      	ldr	r2, [pc, #136]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 800356e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003572:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003578:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8242 	beq.w	8003a0a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003586:	4b1c      	ldr	r3, [pc, #112]	@ (80035f8 <HAL_RCC_OscConfig+0xc58>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b08      	cmp	r3, #8
 8003590:	f000 8213 	beq.w	80039ba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003598:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	f040 8162 	bne.w	800386a <HAL_RCC_OscConfig+0xeca>
 80035a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035aa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80035ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80035ca:	601a      	str	r2, [r3, #0]
  return result;
 80035cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80035d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	461a      	mov	r2, r3
 80035e8:	2300      	movs	r3, #0
 80035ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fd f908 	bl	8000800 <HAL_GetTick>
 80035f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f4:	e00c      	b.n	8003610 <HAL_RCC_OscConfig+0xc70>
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fd f900 	bl	8000800 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e1fd      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003614:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003618:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800361c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003622:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	fa93 f2a3 	rbit	r2, r3
 800362c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003630:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003634:	601a      	str	r2, [r3, #0]
  return result;
 8003636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800363e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003640:	fab3 f383 	clz	r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d102      	bne.n	800365a <HAL_RCC_OscConfig+0xcba>
 8003654:	4bb0      	ldr	r3, [pc, #704]	@ (8003918 <HAL_RCC_OscConfig+0xf78>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	e027      	b.n	80036aa <HAL_RCC_OscConfig+0xd0a>
 800365a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003662:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	fa93 f2a3 	rbit	r2, r3
 8003676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003684:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003688:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003692:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	fa93 f2a3 	rbit	r2, r3
 800369c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	4b9c      	ldr	r3, [pc, #624]	@ (8003918 <HAL_RCC_OscConfig+0xf78>)
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036ae:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80036b2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036b6:	6011      	str	r1, [r2, #0]
 80036b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036bc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	fa92 f1a2 	rbit	r1, r2
 80036c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036ca:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80036ce:	6011      	str	r1, [r2, #0]
  return result;
 80036d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036d4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	fab2 f282 	clz	r2, r2
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	f042 0220 	orr.w	r2, r2, #32
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f002 021f 	and.w	r2, r2, #31
 80036ea:	2101      	movs	r1, #1
 80036ec:	fa01 f202 	lsl.w	r2, r1, r2
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d182      	bne.n	80035fc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f6:	4b88      	ldr	r3, [pc, #544]	@ (8003918 <HAL_RCC_OscConfig+0xf78>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800370a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	430b      	orrs	r3, r1
 8003718:	497f      	ldr	r1, [pc, #508]	@ (8003918 <HAL_RCC_OscConfig+0xf78>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
 800371e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003722:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003726:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800372a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003730:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	fa93 f2a3 	rbit	r2, r3
 800373a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003742:	601a      	str	r2, [r3, #0]
  return result;
 8003744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003748:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800374c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003758:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	461a      	mov	r2, r3
 8003760:	2301      	movs	r3, #1
 8003762:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fd f84c 	bl	8000800 <HAL_GetTick>
 8003768:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800376c:	e009      	b.n	8003782 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376e:	f7fd f847 	bl	8000800 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e144      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
 8003782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003786:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800378a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800378e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003794:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	fa93 f2a3 	rbit	r2, r3
 800379e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80037a6:	601a      	str	r2, [r3, #0]
  return result;
 80037a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80037b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d102      	bne.n	80037cc <HAL_RCC_OscConfig+0xe2c>
 80037c6:	4b54      	ldr	r3, [pc, #336]	@ (8003918 <HAL_RCC_OscConfig+0xf78>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	e027      	b.n	800381c <HAL_RCC_OscConfig+0xe7c>
 80037cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80037d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037de:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	fa93 f2a3 	rbit	r2, r3
 80037e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ec:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80037fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003804:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f2a3 	rbit	r2, r3
 800380e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003812:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	4b3f      	ldr	r3, [pc, #252]	@ (8003918 <HAL_RCC_OscConfig+0xf78>)
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003820:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003824:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003828:	6011      	str	r1, [r2, #0]
 800382a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800382e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	fa92 f1a2 	rbit	r1, r2
 8003838:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800383c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003840:	6011      	str	r1, [r2, #0]
  return result;
 8003842:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003846:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	fab2 f282 	clz	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f002 021f 	and.w	r2, r2, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d082      	beq.n	800376e <HAL_RCC_OscConfig+0xdce>
 8003868:	e0cf      	b.n	8003a0a <HAL_RCC_OscConfig+0x106a>
 800386a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003872:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fa93 f2a3 	rbit	r2, r3
 8003886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800388e:	601a      	str	r2, [r3, #0]
  return result;
 8003890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003894:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003898:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	461a      	mov	r2, r3
 80038ac:	2300      	movs	r3, #0
 80038ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b0:	f7fc ffa6 	bl	8000800 <HAL_GetTick>
 80038b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b8:	e009      	b.n	80038ce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ba:	f7fc ffa1 	bl	8000800 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e09e      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
 80038ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80038d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	fa93 f2a3 	rbit	r2, r3
 80038ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80038f2:	601a      	str	r2, [r3, #0]
  return result;
 80038f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80038fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b01      	cmp	r3, #1
 8003910:	d104      	bne.n	800391c <HAL_RCC_OscConfig+0xf7c>
 8003912:	4b01      	ldr	r3, [pc, #4]	@ (8003918 <HAL_RCC_OscConfig+0xf78>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	e029      	b.n	800396c <HAL_RCC_OscConfig+0xfcc>
 8003918:	40021000 	.word	0x40021000
 800391c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003920:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003924:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	fa93 f2a3 	rbit	r2, r3
 8003938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003946:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800394a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003954:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	fa93 f2a3 	rbit	r2, r3
 800395e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003962:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	4b2b      	ldr	r3, [pc, #172]	@ (8003a18 <HAL_RCC_OscConfig+0x1078>)
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003970:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003974:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003978:	6011      	str	r1, [r2, #0]
 800397a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800397e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	fa92 f1a2 	rbit	r1, r2
 8003988:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800398c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003990:	6011      	str	r1, [r2, #0]
  return result;
 8003992:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003996:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	fab2 f282 	clz	r2, r2
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	f042 0220 	orr.w	r2, r2, #32
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	f002 021f 	and.w	r2, r2, #31
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d180      	bne.n	80038ba <HAL_RCC_OscConfig+0xf1a>
 80039b8:	e027      	b.n	8003a0a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e01e      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039ce:	4b12      	ldr	r3, [pc, #72]	@ (8003a18 <HAL_RCC_OscConfig+0x1078>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80039da:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d10b      	bne.n	8003a06 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80039f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80039f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000

08003a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b09e      	sub	sp, #120	@ 0x78
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e162      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b90      	ldr	r3, [pc, #576]	@ (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d910      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b8d      	ldr	r3, [pc, #564]	@ (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 0207 	bic.w	r2, r3, #7
 8003a4a:	498b      	ldr	r1, [pc, #556]	@ (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b89      	ldr	r3, [pc, #548]	@ (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e14a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a70:	4b82      	ldr	r3, [pc, #520]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	497f      	ldr	r1, [pc, #508]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80dc 	beq.w	8003c48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d13c      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xf6>
 8003a98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a9c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa8:	fab3 f383 	clz	r3, r3
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d102      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xa6>
 8003abc:	4b6f      	ldr	r3, [pc, #444]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	e00f      	b.n	8003ae2 <HAL_RCC_ClockConfig+0xc6>
 8003ac2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ac6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ad0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ad4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ad6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ad8:	fa93 f3a3 	rbit	r3, r3
 8003adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ade:	4b67      	ldr	r3, [pc, #412]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ae6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ae8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aea:	fa92 f2a2 	rbit	r2, r2
 8003aee:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003af0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003af2:	fab2 f282 	clz	r2, r2
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	f042 0220 	orr.w	r2, r2, #32
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	f002 021f 	and.w	r2, r2, #31
 8003b02:	2101      	movs	r1, #1
 8003b04:	fa01 f202 	lsl.w	r2, r1, r2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d17b      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0f3      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d13c      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x178>
 8003b1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_ClockConfig+0x128>
 8003b3e:	4b4f      	ldr	r3, [pc, #316]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	e00f      	b.n	8003b64 <HAL_RCC_ClockConfig+0x148>
 8003b44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b56:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b60:	4b46      	ldr	r3, [pc, #280]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b68:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b6c:	fa92 f2a2 	rbit	r2, r2
 8003b70:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003b72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b74:	fab2 f282 	clz	r2, r2
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	f042 0220 	orr.w	r2, r2, #32
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	f002 021f 	and.w	r2, r2, #31
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d13a      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0b2      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
 8003b94:	2302      	movs	r3, #2
 8003b96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d102      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x1a0>
 8003bb6:	4b31      	ldr	r3, [pc, #196]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	e00d      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x1bc>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc8:	2302      	movs	r3, #2
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	4b29      	ldr	r3, [pc, #164]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	2202      	movs	r2, #2
 8003bda:	61ba      	str	r2, [r7, #24]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	fa92 f2a2 	rbit	r2, r2
 8003be2:	617a      	str	r2, [r7, #20]
  return result;
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	fab2 f282 	clz	r2, r2
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	f042 0220 	orr.w	r2, r2, #32
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	f002 021f 	and.w	r2, r2, #31
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e079      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c06:	4b1d      	ldr	r3, [pc, #116]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f023 0203 	bic.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	491a      	ldr	r1, [pc, #104]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c18:	f7fc fdf2 	bl	8000800 <HAL_GetTick>
 8003c1c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c20:	f7fc fdee 	bl	8000800 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e061      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_ClockConfig+0x260>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f003 020c 	and.w	r2, r3, #12
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d1eb      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d214      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c56:	4b08      	ldr	r3, [pc, #32]	@ (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 0207 	bic.w	r2, r3, #7
 8003c5e:	4906      	ldr	r1, [pc, #24]	@ (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <HAL_RCC_ClockConfig+0x25c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e040      	b.n	8003cfa <HAL_RCC_ClockConfig+0x2de>
 8003c78:	40022000 	.word	0x40022000
 8003c7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <HAL_RCC_ClockConfig+0x2e8>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	491a      	ldr	r1, [pc, #104]	@ (8003d04 <HAL_RCC_ClockConfig+0x2e8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003caa:	4b16      	ldr	r3, [pc, #88]	@ (8003d04 <HAL_RCC_ClockConfig+0x2e8>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4912      	ldr	r1, [pc, #72]	@ (8003d04 <HAL_RCC_ClockConfig+0x2e8>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cbe:	f000 f829 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <HAL_RCC_ClockConfig+0x2e8>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ccc:	22f0      	movs	r2, #240	@ 0xf0
 8003cce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	fa92 f2a2 	rbit	r2, r2
 8003cd6:	60fa      	str	r2, [r7, #12]
  return result;
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	fab2 f282 	clz	r2, r2
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	40d3      	lsrs	r3, r2
 8003ce2:	4a09      	ldr	r2, [pc, #36]	@ (8003d08 <HAL_RCC_ClockConfig+0x2ec>)
 8003ce4:	5cd3      	ldrb	r3, [r2, r3]
 8003ce6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cea:	4a08      	ldr	r2, [pc, #32]	@ (8003d0c <HAL_RCC_ClockConfig+0x2f0>)
 8003cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003cee:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <HAL_RCC_ClockConfig+0x2f4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc fd40 	bl	8000778 <HAL_InitTick>
  
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3778      	adds	r7, #120	@ 0x78
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000
 8003d08:	08008aa8 	.word	0x08008aa8
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	20000004 	.word	0x20000004

08003d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x30>
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x36>
 8003d42:	e026      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d44:	4b19      	ldr	r3, [pc, #100]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x98>)
 8003d46:	613b      	str	r3, [r7, #16]
      break;
 8003d48:	e026      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	0c9b      	lsrs	r3, r3, #18
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	4a17      	ldr	r2, [pc, #92]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d54:	5cd3      	ldrb	r3, [r2, r3]
 8003d56:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003d58:	4b13      	ldr	r3, [pc, #76]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	4a14      	ldr	r2, [pc, #80]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
 8003d64:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d70:	4a0e      	ldr	r2, [pc, #56]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x98>)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e004      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a0c      	ldr	r2, [pc, #48]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	613b      	str	r3, [r7, #16]
      break;
 8003d90:	e002      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d92:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x98>)
 8003d94:	613b      	str	r3, [r7, #16]
      break;
 8003d96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d98:	693b      	ldr	r3, [r7, #16]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	007a1200 	.word	0x007a1200
 8003db0:	08008ab8 	.word	0x08008ab8
 8003db4:	08008ac8 	.word	0x08008ac8
 8003db8:	003d0900 	.word	0x003d0900

08003dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b092      	sub	sp, #72	@ 0x48
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80d4 	beq.w	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de0:	4b4e      	ldr	r3, [pc, #312]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10e      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dec:	4b4b      	ldr	r3, [pc, #300]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4a4a      	ldr	r2, [pc, #296]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df6:	61d3      	str	r3, [r2, #28]
 8003df8:	4b48      	ldr	r3, [pc, #288]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b45      	ldr	r3, [pc, #276]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d118      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e16:	4b42      	ldr	r3, [pc, #264]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a41      	ldr	r2, [pc, #260]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e22:	f7fc fced 	bl	8000800 <HAL_GetTick>
 8003e26:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fc fce9 	bl	8000800 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b64      	cmp	r3, #100	@ 0x64
 8003e36:	d901      	bls.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e169      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	4b38      	ldr	r3, [pc, #224]	@ (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e48:	4b34      	ldr	r3, [pc, #208]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8084 	beq.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d07c      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e68:	4b2c      	ldr	r3, [pc, #176]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e76:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b26      	ldr	r3, [pc, #152]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	461a      	mov	r2, r3
 8003e92:	2301      	movs	r3, #1
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9e:	fa93 f3a3 	rbit	r3, r3
 8003ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	4b1d      	ldr	r3, [pc, #116]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eba:	4a18      	ldr	r2, [pc, #96]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ebe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d04b      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fc fc99 	bl	8000800 <HAL_GetTick>
 8003ece:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7fc fc95 	bl	8000800 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e113      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	623b      	str	r3, [r7, #32]
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	61fb      	str	r3, [r7, #28]
  return result;
 8003f00:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d108      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f16:	4b01      	ldr	r3, [pc, #4]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	e00d      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40007000 	.word	0x40007000
 8003f24:	10908100 	.word	0x10908100
 8003f28:	2302      	movs	r3, #2
 8003f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	4b78      	ldr	r3, [pc, #480]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	2202      	movs	r2, #2
 8003f3a:	613a      	str	r2, [r7, #16]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	fa92 f2a2 	rbit	r2, r2
 8003f42:	60fa      	str	r2, [r7, #12]
  return result;
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	fab2 f282 	clz	r2, r2
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	f002 021f 	and.w	r2, r2, #31
 8003f56:	2101      	movs	r1, #1
 8003f58:	fa01 f202 	lsl.w	r2, r1, r2
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0b7      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f62:	4b6d      	ldr	r3, [pc, #436]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	496a      	ldr	r1, [pc, #424]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f74:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7c:	4b66      	ldr	r3, [pc, #408]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	4a65      	ldr	r2, [pc, #404]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f94:	4b60      	ldr	r3, [pc, #384]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	f023 0203 	bic.w	r2, r3, #3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	495d      	ldr	r1, [pc, #372]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fb2:	4b59      	ldr	r3, [pc, #356]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	4956      	ldr	r1, [pc, #344]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fd0:	4b51      	ldr	r3, [pc, #324]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	494e      	ldr	r1, [pc, #312]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fee:	4b4a      	ldr	r3, [pc, #296]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	f023 0210 	bic.w	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4947      	ldr	r1, [pc, #284]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800400c:	4b42      	ldr	r3, [pc, #264]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	493f      	ldr	r1, [pc, #252]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	f023 0220 	bic.w	r2, r3, #32
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4938      	ldr	r1, [pc, #224]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004038:	4313      	orrs	r3, r2
 800403a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004048:	4b33      	ldr	r3, [pc, #204]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	4930      	ldr	r1, [pc, #192]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004066:	4b2c      	ldr	r3, [pc, #176]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	4929      	ldr	r1, [pc, #164]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004074:	4313      	orrs	r3, r2
 8004076:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004084:	4b24      	ldr	r3, [pc, #144]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	4921      	ldr	r1, [pc, #132]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80040a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	491a      	ldr	r1, [pc, #104]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80040c0:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	4912      	ldr	r1, [pc, #72]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040de:	4b0e      	ldr	r3, [pc, #56]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ea:	490b      	ldr	r1, [pc, #44]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004100:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004108:	4903      	ldr	r1, [pc, #12]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3748      	adds	r7, #72	@ 0x48
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000

0800411c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e09d      	b.n	800426a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800413e:	d009      	beq.n	8004154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	61da      	str	r2, [r3, #28]
 8004146:	e005      	b.n	8004154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fc fa34 	bl	80005dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800418a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004194:	d902      	bls.n	800419c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e002      	b.n	80041a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800419c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80041aa:	d007      	beq.n	80041bc <HAL_SPI_Init+0xa0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041b4:	d002      	beq.n	80041bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fe:	ea42 0103 	orr.w	r1, r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	0c1b      	lsrs	r3, r3, #16
 8004218:	f003 0204 	and.w	r2, r3, #4
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004238:	ea42 0103 	orr.w	r1, r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004258:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004282:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004286:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	b29a      	uxth	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042a8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	b29b      	uxth	r3, r3
 80042be:	4013      	ands	r3, r2
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b085      	sub	sp, #20
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	1d3b      	adds	r3, r7, #4
 80042e0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004314:	b480      	push	{r7}
 8004316:	b09d      	sub	sp, #116	@ 0x74
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	78db      	ldrb	r3, [r3, #3]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d81f      	bhi.n	8004386 <USB_ActivateEndpoint+0x72>
 8004346:	a201      	add	r2, pc, #4	@ (adr r2, 800434c <USB_ActivateEndpoint+0x38>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	0800435d 	.word	0x0800435d
 8004350:	08004379 	.word	0x08004379
 8004354:	0800438f 	.word	0x0800438f
 8004358:	0800436b 	.word	0x0800436b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800435c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004360:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004364:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004368:	e012      	b.n	8004390 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800436a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800436e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004372:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004376:	e00b      	b.n	8004390 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004378:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800437c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004380:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004384:	e004      	b.n	8004390 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800438c:	e000      	b.n	8004390 <USB_ActivateEndpoint+0x7c>
      break;
 800438e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	441a      	add	r2, r3
 800439a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800439e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	b21b      	sxth	r3, r3
 80043c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ca:	b21a      	sxth	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b21b      	sxth	r3, r3
 80043d2:	4313      	orrs	r3, r2
 80043d4:	b21b      	sxth	r3, r3
 80043d6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	441a      	add	r2, r3
 80043e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80043e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	7b1b      	ldrb	r3, [r3, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f040 8178 	bne.w	80046f6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	785b      	ldrb	r3, [r3, #1]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8084 	beq.w	8004518 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800441a:	b29b      	uxth	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	4413      	add	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	011a      	lsls	r2, r3, #4
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	88db      	ldrh	r3, [r3, #6]
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	b29b      	uxth	r3, r3
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	827b      	strh	r3, [r7, #18]
 8004452:	8a7b      	ldrh	r3, [r7, #18]
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01b      	beq.n	8004494 <USB_ActivateEndpoint+0x180>
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004472:	823b      	strh	r3, [r7, #16]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	8a3b      	ldrh	r3, [r7, #16]
 8004480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800448c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004490:	b29b      	uxth	r3, r3
 8004492:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	78db      	ldrb	r3, [r3, #3]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d020      	beq.n	80044de <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044b2:	81bb      	strh	r3, [r7, #12]
 80044b4:	89bb      	ldrh	r3, [r7, #12]
 80044b6:	f083 0320 	eor.w	r3, r3, #32
 80044ba:	81bb      	strh	r3, [r7, #12]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	441a      	add	r2, r3
 80044c6:	89bb      	ldrh	r3, [r7, #12]
 80044c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044d8:	b29b      	uxth	r3, r3
 80044da:	8013      	strh	r3, [r2, #0]
 80044dc:	e2d5      	b.n	8004a8a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f4:	81fb      	strh	r3, [r7, #14]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800450a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800450e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004512:	b29b      	uxth	r3, r3
 8004514:	8013      	strh	r3, [r2, #0]
 8004516:	e2b8      	b.n	8004a8a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	633b      	str	r3, [r7, #48]	@ 0x30
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	4413      	add	r3, r2
 800452a:	633b      	str	r3, [r7, #48]	@ 0x30
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	011a      	lsls	r2, r3, #4
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	4413      	add	r3, r2
 8004536:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800453a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	88db      	ldrh	r3, [r3, #6]
 8004540:	085b      	lsrs	r3, r3, #1
 8004542:	b29b      	uxth	r3, r3
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	4413      	add	r3, r2
 800455e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	011a      	lsls	r2, r3, #4
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	4413      	add	r3, r2
 800456a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800457a:	b29a      	uxth	r2, r3
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <USB_ActivateEndpoint+0x28a>
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004596:	b29a      	uxth	r2, r3
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	801a      	strh	r2, [r3, #0]
 800459c:	e039      	b.n	8004612 <USB_ActivateEndpoint+0x2fe>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80045a4:	d818      	bhi.n	80045d8 <USB_ActivateEndpoint+0x2c4>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	085b      	lsrs	r3, r3, #1
 80045ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <USB_ActivateEndpoint+0x2ac>
 80045ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045bc:	3301      	adds	r3, #1
 80045be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	029b      	lsls	r3, r3, #10
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	4313      	orrs	r3, r2
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	e01c      	b.n	8004612 <USB_ActivateEndpoint+0x2fe>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <USB_ActivateEndpoint+0x2de>
 80045ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045ee:	3b01      	subs	r3, #1
 80045f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	029b      	lsls	r3, r3, #10
 80045fe:	b29b      	uxth	r3, r3
 8004600:	4313      	orrs	r3, r2
 8004602:	b29b      	uxth	r3, r3
 8004604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800460c:	b29a      	uxth	r2, r3
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004620:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01b      	beq.n	8004662 <USB_ActivateEndpoint+0x34e>
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800463c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004640:	843b      	strh	r3, [r7, #32]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	441a      	add	r2, r3
 800464c:	8c3b      	ldrh	r3, [r7, #32]
 800464e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800465a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800465e:	b29b      	uxth	r3, r3
 8004660:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d124      	bne.n	80046b4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800467c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004680:	83bb      	strh	r3, [r7, #28]
 8004682:	8bbb      	ldrh	r3, [r7, #28]
 8004684:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004688:	83bb      	strh	r3, [r7, #28]
 800468a:	8bbb      	ldrh	r3, [r7, #28]
 800468c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004690:	83bb      	strh	r3, [r7, #28]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	441a      	add	r2, r3
 800469c:	8bbb      	ldrh	r3, [r7, #28]
 800469e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	8013      	strh	r3, [r2, #0]
 80046b2:	e1ea      	b.n	8004a8a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	83fb      	strh	r3, [r7, #30]
 80046cc:	8bfb      	ldrh	r3, [r7, #30]
 80046ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046d2:	83fb      	strh	r3, [r7, #30]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	8bfb      	ldrh	r3, [r7, #30]
 80046e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	8013      	strh	r3, [r2, #0]
 80046f4:	e1c9      	b.n	8004a8a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	78db      	ldrb	r3, [r3, #3]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d11e      	bne.n	800473c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004714:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004726:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800472a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800472e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004736:	b29b      	uxth	r3, r3
 8004738:	8013      	strh	r3, [r2, #0]
 800473a:	e01d      	b.n	8004778 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800474e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004752:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	441a      	add	r2, r3
 8004760:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800476c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004774:	b29b      	uxth	r3, r3
 8004776:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004782:	b29b      	uxth	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004788:	4413      	add	r3, r2
 800478a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	011a      	lsls	r2, r3, #4
 8004792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004794:	4413      	add	r3, r2
 8004796:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800479a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	891b      	ldrh	r3, [r3, #8]
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047bc:	4413      	add	r3, r2
 80047be:	657b      	str	r3, [r7, #84]	@ 0x54
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	011a      	lsls	r2, r3, #4
 80047c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80047ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	895b      	ldrh	r3, [r3, #10]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f040 8093 	bne.w	8004910 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80047fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80047fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01b      	beq.n	800483e <USB_ActivateEndpoint+0x52a>
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800481c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	441a      	add	r2, r3
 8004828:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800482a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800482e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004832:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800483a:	b29b      	uxth	r3, r3
 800483c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800484c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800484e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01b      	beq.n	800488e <USB_ActivateEndpoint+0x57a>
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	441a      	add	r2, r3
 8004878:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800487a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800487e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004886:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800488a:	b29b      	uxth	r3, r3
 800488c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a4:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048a6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80048a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048ac:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048ae:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80048b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80048b4:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80048c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	441a      	add	r2, r3
 80048f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80048fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800490a:	b29b      	uxth	r3, r3
 800490c:	8013      	strh	r3, [r2, #0]
 800490e:	e0bc      	b.n	8004a8a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004920:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01d      	beq.n	8004968 <USB_ActivateEndpoint+0x654>
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800493e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004942:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004954:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004958:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800495c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004978:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800497c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01d      	beq.n	80049c0 <USB_ActivateEndpoint+0x6ac>
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80049ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049bc:	b29b      	uxth	r3, r3
 80049be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	78db      	ldrb	r3, [r3, #3]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d024      	beq.n	8004a12 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049de:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80049e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80049e6:	f083 0320 	eor.w	r3, r3, #32
 80049ea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80049fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	8013      	strh	r3, [r2, #0]
 8004a10:	e01d      	b.n	8004a4e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a28:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	441a      	add	r2, r3
 8004a36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a64:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	441a      	add	r2, r3
 8004a72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004a76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004a8a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3774      	adds	r7, #116	@ 0x74
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop

08004a9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b08d      	sub	sp, #52	@ 0x34
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	7b1b      	ldrb	r3, [r3, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 808e 	bne.w	8004bcc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d044      	beq.n	8004b42 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	81bb      	strh	r3, [r7, #12]
 8004ac6:	89bb      	ldrh	r3, [r7, #12]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01b      	beq.n	8004b08 <USB_DeactivateEndpoint+0x6c>
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae6:	817b      	strh	r3, [r7, #10]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	897b      	ldrh	r3, [r7, #10]
 8004af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004afc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b1e:	813b      	strh	r3, [r7, #8]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	893b      	ldrh	r3, [r7, #8]
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
 8004b40:	e192      	b.n	8004e68 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	827b      	strh	r3, [r7, #18]
 8004b50:	8a7b      	ldrh	r3, [r7, #18]
 8004b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01b      	beq.n	8004b92 <USB_DeactivateEndpoint+0xf6>
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b70:	823b      	strh	r3, [r7, #16]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	441a      	add	r2, r3
 8004b7c:	8a3b      	ldrh	r3, [r7, #16]
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba8:	81fb      	strh	r3, [r7, #14]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	89fb      	ldrh	r3, [r7, #14]
 8004bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]
 8004bca:	e14d      	b.n	8004e68 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	785b      	ldrb	r3, [r3, #1]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f040 80a5 	bne.w	8004d20 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	843b      	strh	r3, [r7, #32]
 8004be4:	8c3b      	ldrh	r3, [r7, #32]
 8004be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01b      	beq.n	8004c26 <USB_DeactivateEndpoint+0x18a>
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c04:	83fb      	strh	r3, [r7, #30]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	8bfb      	ldrh	r3, [r7, #30]
 8004c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	83bb      	strh	r3, [r7, #28]
 8004c34:	8bbb      	ldrh	r3, [r7, #28]
 8004c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01b      	beq.n	8004c76 <USB_DeactivateEndpoint+0x1da>
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c54:	837b      	strh	r3, [r7, #26]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	8b7b      	ldrh	r3, [r7, #26]
 8004c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8c:	833b      	strh	r3, [r7, #24]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	441a      	add	r2, r3
 8004c98:	8b3b      	ldrh	r3, [r7, #24]
 8004c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cc4:	82fb      	strh	r3, [r7, #22]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	8afb      	ldrh	r3, [r7, #22]
 8004cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cfc:	82bb      	strh	r3, [r7, #20]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	441a      	add	r2, r3
 8004d08:	8abb      	ldrh	r3, [r7, #20]
 8004d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	8013      	strh	r3, [r2, #0]
 8004d1e:	e0a3      	b.n	8004e68 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004d2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01b      	beq.n	8004d70 <USB_DeactivateEndpoint+0x2d4>
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004d7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01b      	beq.n	8004dc0 <USB_DeactivateEndpoint+0x324>
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004db8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004de4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004de8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	441a      	add	r2, r3
 8004e1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e46:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	441a      	add	r2, r3
 8004e52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3734      	adds	r7, #52	@ 0x34
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b0c2      	sub	sp, #264	@ 0x108
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e84:	6018      	str	r0, [r3, #0]
 8004e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e8e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	f040 86b7 	bne.w	8005c10 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d908      	bls.n	8004ed0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004ece:	e007      	b.n	8004ee0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	7b1b      	ldrb	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d13a      	bne.n	8004f66 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6959      	ldr	r1, [r3, #20]
 8004efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	88da      	ldrh	r2, [r3, #6]
 8004f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f16:	6800      	ldr	r0, [r0, #0]
 8004f18:	f001 fc8d 	bl	8006836 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	011a      	lsls	r2, r3, #4
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4413      	add	r3, r2
 8004f52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	f000 be1f 	b.w	8005ba4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	78db      	ldrb	r3, [r3, #3]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	f040 8462 	bne.w	800583c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1a      	ldr	r2, [r3, #32]
 8004f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	f240 83df 	bls.w	8005754 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fbc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	441a      	add	r2, r3
 8004fda:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004fde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fe2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fe6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6a1a      	ldr	r2, [r3, #32]
 8004ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005002:	1ad2      	subs	r2, r2, r3
 8005004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800501e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	b29b      	uxth	r3, r3
 800502e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 81c7 	beq.w	80053c6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800503c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	633b      	str	r3, [r7, #48]	@ 0x30
 8005044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d177      	bne.n	8005144 <USB_EPStartXfer+0x2ce>
 8005054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005058:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800506e:	b29b      	uxth	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005074:	4413      	add	r3, r2
 8005076:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800507c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	011a      	lsls	r2, r3, #4
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	4413      	add	r3, r2
 800508a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800509a:	b29a      	uxth	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	801a      	strh	r2, [r3, #0]
 80050a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <USB_EPStartXfer+0x248>
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	e067      	b.n	800518e <USB_EPStartXfer+0x318>
 80050be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80050c4:	d81c      	bhi.n	8005100 <USB_EPStartXfer+0x28a>
 80050c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <USB_EPStartXfer+0x270>
 80050dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80050e0:	3301      	adds	r3, #1
 80050e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	029b      	lsls	r3, r3, #10
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4313      	orrs	r3, r2
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	801a      	strh	r2, [r3, #0]
 80050fe:	e046      	b.n	800518e <USB_EPStartXfer+0x318>
 8005100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800510a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <USB_EPStartXfer+0x2aa>
 8005116:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800511a:	3b01      	subs	r3, #1
 800511c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29a      	uxth	r2, r3
 8005126:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800512a:	b29b      	uxth	r3, r3
 800512c:	029b      	lsls	r3, r3, #10
 800512e:	b29b      	uxth	r3, r3
 8005130:	4313      	orrs	r3, r2
 8005132:	b29b      	uxth	r3, r3
 8005134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513c:	b29a      	uxth	r2, r3
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	e024      	b.n	800518e <USB_EPStartXfer+0x318>
 8005144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d11c      	bne.n	800518e <USB_EPStartXfer+0x318>
 8005154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005158:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	4413      	add	r3, r2
 800516a:	633b      	str	r3, [r7, #48]	@ 0x30
 800516c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	011a      	lsls	r2, r3, #4
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	4413      	add	r3, r2
 800517e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005182:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005188:	b29a      	uxth	r2, r3
 800518a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800518e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	895b      	ldrh	r3, [r3, #10]
 800519a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800519e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6959      	ldr	r1, [r3, #20]
 80051aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80051b4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80051b8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80051bc:	6800      	ldr	r0, [r0, #0]
 80051be:	f001 fb3a 	bl	8006836 <USB_WritePMA>
            ep->xfer_buff += len;
 80051c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d2:	441a      	add	r2, r3
 80051d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a1a      	ldr	r2, [r3, #32]
 80051ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d90f      	bls.n	800521c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80051fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a1a      	ldr	r2, [r3, #32]
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800520c:	1ad2      	subs	r2, r2, r3
 800520e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	621a      	str	r2, [r3, #32]
 800521a:	e00e      	b.n	800523a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800521c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800522c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2200      	movs	r2, #0
 8005238:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800523a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d177      	bne.n	800533a <USB_EPStartXfer+0x4c4>
 800524a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005264:	b29b      	uxth	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	4413      	add	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	011a      	lsls	r2, r3, #4
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	4413      	add	r3, r2
 8005280:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005290:	b29a      	uxth	r2, r3
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	801a      	strh	r2, [r3, #0]
 8005296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <USB_EPStartXfer+0x43e>
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	e06d      	b.n	8005390 <USB_EPStartXfer+0x51a>
 80052b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80052ba:	d81c      	bhi.n	80052f6 <USB_EPStartXfer+0x480>
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <USB_EPStartXfer+0x466>
 80052d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d6:	3301      	adds	r3, #1
 80052d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	029b      	lsls	r3, r3, #10
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	e04c      	b.n	8005390 <USB_EPStartXfer+0x51a>
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2b00      	cmp	r3, #0
 800530a:	d104      	bne.n	8005316 <USB_EPStartXfer+0x4a0>
 800530c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005310:	3b01      	subs	r3, #1
 8005312:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29a      	uxth	r2, r3
 800531c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005320:	b29b      	uxth	r3, r3
 8005322:	029b      	lsls	r3, r3, #10
 8005324:	b29b      	uxth	r3, r3
 8005326:	4313      	orrs	r3, r2
 8005328:	b29b      	uxth	r3, r3
 800532a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005332:	b29a      	uxth	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e02a      	b.n	8005390 <USB_EPStartXfer+0x51a>
 800533a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800533e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d122      	bne.n	8005390 <USB_EPStartXfer+0x51a>
 800534a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	623b      	str	r3, [r7, #32]
 8005356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	4413      	add	r3, r2
 800536c:	623b      	str	r3, [r7, #32]
 800536e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	011a      	lsls	r2, r3, #4
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	4413      	add	r3, r2
 8005380:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538a:	b29a      	uxth	r2, r3
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	891b      	ldrh	r3, [r3, #8]
 800539c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6959      	ldr	r1, [r3, #20]
 80053ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80053b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80053ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80053be:	6800      	ldr	r0, [r0, #0]
 80053c0:	f001 fa39 	bl	8006836 <USB_WritePMA>
 80053c4:	e3ee      	b.n	8005ba4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d177      	bne.n	80054c6 <USB_EPStartXfer+0x650>
 80053d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f6:	4413      	add	r3, r2
 80053f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	011a      	lsls	r2, r3, #4
 8005408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800540a:	4413      	add	r3, r2
 800540c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005410:	647b      	str	r3, [r7, #68]	@ 0x44
 8005412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800541c:	b29a      	uxth	r2, r3
 800541e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <USB_EPStartXfer+0x5ca>
 800542a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005438:	b29a      	uxth	r2, r3
 800543a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	e06d      	b.n	800551c <USB_EPStartXfer+0x6a6>
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005444:	2b3e      	cmp	r3, #62	@ 0x3e
 8005446:	d81c      	bhi.n	8005482 <USB_EPStartXfer+0x60c>
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544c:	085b      	lsrs	r3, r3, #1
 800544e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <USB_EPStartXfer+0x5f2>
 800545e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005462:	3301      	adds	r3, #1
 8005464:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29a      	uxth	r2, r3
 800546e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005472:	b29b      	uxth	r3, r3
 8005474:	029b      	lsls	r3, r3, #10
 8005476:	b29b      	uxth	r3, r3
 8005478:	4313      	orrs	r3, r2
 800547a:	b29a      	uxth	r2, r3
 800547c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	e04c      	b.n	800551c <USB_EPStartXfer+0x6a6>
 8005482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800548c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <USB_EPStartXfer+0x62c>
 8005498:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800549c:	3b01      	subs	r3, #1
 800549e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	029b      	lsls	r3, r3, #10
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	4313      	orrs	r3, r2
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e02a      	b.n	800551c <USB_EPStartXfer+0x6a6>
 80054c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	785b      	ldrb	r3, [r3, #1]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d122      	bne.n	800551c <USB_EPStartXfer+0x6a6>
 80054d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80054e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054f6:	4413      	add	r3, r2
 80054f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80054fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	011a      	lsls	r2, r3, #4
 8005508:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800550a:	4413      	add	r3, r2
 800550c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005516:	b29a      	uxth	r2, r3
 8005518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800551a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800551c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	891b      	ldrh	r3, [r3, #8]
 8005528:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800552c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6959      	ldr	r1, [r3, #20]
 8005538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553c:	b29b      	uxth	r3, r3
 800553e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005542:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005546:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800554a:	6800      	ldr	r0, [r0, #0]
 800554c:	f001 f973 	bl	8006836 <USB_WritePMA>
            ep->xfer_buff += len;
 8005550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005560:	441a      	add	r2, r3
 8005562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800556e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d90f      	bls.n	80055aa <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800558a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6a1a      	ldr	r2, [r3, #32]
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800559a:	1ad2      	subs	r2, r2, r3
 800559c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	621a      	str	r2, [r3, #32]
 80055a8:	e00e      	b.n	80055c8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80055aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80055ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2200      	movs	r2, #0
 80055c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80055d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d177      	bne.n	80056d4 <USB_EPStartXfer+0x85e>
 80055e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055fe:	b29b      	uxth	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	4413      	add	r3, r2
 8005606:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	011a      	lsls	r2, r3, #4
 8005616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005618:	4413      	add	r3, r2
 800561a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800561e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29b      	uxth	r3, r3
 8005626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800562a:	b29a      	uxth	r2, r3
 800562c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <USB_EPStartXfer+0x7d8>
 8005638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29b      	uxth	r3, r3
 800563e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005646:	b29a      	uxth	r2, r3
 8005648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	e067      	b.n	800571e <USB_EPStartXfer+0x8a8>
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005652:	2b3e      	cmp	r3, #62	@ 0x3e
 8005654:	d81c      	bhi.n	8005690 <USB_EPStartXfer+0x81a>
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <USB_EPStartXfer+0x800>
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005670:	3301      	adds	r3, #1
 8005672:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29a      	uxth	r2, r3
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005680:	b29b      	uxth	r3, r3
 8005682:	029b      	lsls	r3, r3, #10
 8005684:	b29b      	uxth	r3, r3
 8005686:	4313      	orrs	r3, r2
 8005688:	b29a      	uxth	r2, r3
 800568a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	e046      	b.n	800571e <USB_EPStartXfer+0x8a8>
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800569a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <USB_EPStartXfer+0x83a>
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056aa:	3b01      	subs	r3, #1
 80056ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	029b      	lsls	r3, r3, #10
 80056be:	b29b      	uxth	r3, r3
 80056c0:	4313      	orrs	r3, r2
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e024      	b.n	800571e <USB_EPStartXfer+0x8a8>
 80056d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d11c      	bne.n	800571e <USB_EPStartXfer+0x8a8>
 80056e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f8:	4413      	add	r3, r2
 80056fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80056fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	011a      	lsls	r2, r3, #4
 800570a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570c:	4413      	add	r3, r2
 800570e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005718:	b29a      	uxth	r2, r3
 800571a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800571e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	895b      	ldrh	r3, [r3, #10]
 800572a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800572e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6959      	ldr	r1, [r3, #20]
 800573a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573e:	b29b      	uxth	r3, r3
 8005740:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005744:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005748:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800574c:	6800      	ldr	r0, [r0, #0]
 800574e:	f001 f872 	bl	8006836 <USB_WritePMA>
 8005752:	e227      	b.n	8005ba4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800578e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	441a      	add	r2, r3
 80057a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80057ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057bc:	b29b      	uxth	r3, r3
 80057be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057da:	b29b      	uxth	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057e0:	4413      	add	r3, r2
 80057e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	011a      	lsls	r2, r3, #4
 80057f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057f4:	4413      	add	r3, r2
 80057f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005800:	b29a      	uxth	r2, r3
 8005802:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005804:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	891b      	ldrh	r3, [r3, #8]
 8005812:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6959      	ldr	r1, [r3, #20]
 8005822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005826:	b29b      	uxth	r3, r3
 8005828:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800582c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005830:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005834:	6800      	ldr	r0, [r0, #0]
 8005836:	f000 fffe 	bl	8006836 <USB_WritePMA>
 800583a:	e1b3      	b.n	8005ba4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800583c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6a1a      	ldr	r2, [r3, #32]
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584c:	1ad2      	subs	r2, r2, r3
 800584e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800585a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800585e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 80c6 	beq.w	8005a0e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005886:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	673b      	str	r3, [r7, #112]	@ 0x70
 800588e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	785b      	ldrb	r3, [r3, #1]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d177      	bne.n	800598e <USB_EPStartXfer+0xb18>
 800589e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058be:	4413      	add	r3, r2
 80058c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	011a      	lsls	r2, r3, #4
 80058d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058d2:	4413      	add	r3, r2
 80058d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80058d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80058da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <USB_EPStartXfer+0xa92>
 80058f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005900:	b29a      	uxth	r2, r3
 8005902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005904:	801a      	strh	r2, [r3, #0]
 8005906:	e067      	b.n	80059d8 <USB_EPStartXfer+0xb62>
 8005908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590c:	2b3e      	cmp	r3, #62	@ 0x3e
 800590e:	d81c      	bhi.n	800594a <USB_EPStartXfer+0xad4>
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <USB_EPStartXfer+0xaba>
 8005926:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800592a:	3301      	adds	r3, #1
 800592c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29a      	uxth	r2, r3
 8005936:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800593a:	b29b      	uxth	r3, r3
 800593c:	029b      	lsls	r3, r3, #10
 800593e:	b29b      	uxth	r3, r3
 8005940:	4313      	orrs	r3, r2
 8005942:	b29a      	uxth	r2, r3
 8005944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e046      	b.n	80059d8 <USB_EPStartXfer+0xb62>
 800594a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <USB_EPStartXfer+0xaf4>
 8005960:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005964:	3b01      	subs	r3, #1
 8005966:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800596a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29a      	uxth	r2, r3
 8005970:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005974:	b29b      	uxth	r3, r3
 8005976:	029b      	lsls	r3, r3, #10
 8005978:	b29b      	uxth	r3, r3
 800597a:	4313      	orrs	r3, r2
 800597c:	b29b      	uxth	r3, r3
 800597e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005986:	b29a      	uxth	r2, r3
 8005988:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	e024      	b.n	80059d8 <USB_EPStartXfer+0xb62>
 800598e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d11c      	bne.n	80059d8 <USB_EPStartXfer+0xb62>
 800599e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059b2:	4413      	add	r3, r2
 80059b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80059b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	011a      	lsls	r2, r3, #4
 80059c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80059cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	895b      	ldrh	r3, [r3, #10]
 80059e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6959      	ldr	r1, [r3, #20]
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80059fe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a02:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a06:	6800      	ldr	r0, [r0, #0]
 8005a08:	f000 ff15 	bl	8006836 <USB_WritePMA>
 8005a0c:	e0ca      	b.n	8005ba4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d177      	bne.n	8005b0e <USB_EPStartXfer+0xc98>
 8005a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a3e:	4413      	add	r3, r2
 8005a40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	011a      	lsls	r2, r3, #4
 8005a50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a52:	4413      	add	r3, r2
 8005a54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10a      	bne.n	8005a88 <USB_EPStartXfer+0xc12>
 8005a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	e073      	b.n	8005b70 <USB_EPStartXfer+0xcfa>
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a8e:	d81c      	bhi.n	8005aca <USB_EPStartXfer+0xc54>
 8005a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a94:	085b      	lsrs	r3, r3, #1
 8005a96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d004      	beq.n	8005ab0 <USB_EPStartXfer+0xc3a>
 8005aa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005aaa:	3301      	adds	r3, #1
 8005aac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	029b      	lsls	r3, r3, #10
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ac6:	801a      	strh	r2, [r3, #0]
 8005ac8:	e052      	b.n	8005b70 <USB_EPStartXfer+0xcfa>
 8005aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <USB_EPStartXfer+0xc74>
 8005ae0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005aea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	029b      	lsls	r3, r3, #10
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	4313      	orrs	r3, r2
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e030      	b.n	8005b70 <USB_EPStartXfer+0xcfa>
 8005b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d128      	bne.n	8005b70 <USB_EPStartXfer+0xcfa>
 8005b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b42:	4413      	add	r3, r2
 8005b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	011a      	lsls	r2, r3, #4
 8005b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	891b      	ldrh	r3, [r3, #8]
 8005b7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6959      	ldr	r1, [r3, #20]
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b96:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b9a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b9e:	6800      	ldr	r0, [r0, #0]
 8005ba0:	f000 fe49 	bl	8006836 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bca:	817b      	strh	r3, [r7, #10]
 8005bcc:	897b      	ldrh	r3, [r7, #10]
 8005bce:	f083 0310 	eor.w	r3, r3, #16
 8005bd2:	817b      	strh	r3, [r7, #10]
 8005bd4:	897b      	ldrh	r3, [r7, #10]
 8005bd6:	f083 0320 	eor.w	r3, r3, #32
 8005bda:	817b      	strh	r3, [r7, #10]
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	897b      	ldrh	r3, [r7, #10]
 8005bf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	8013      	strh	r3, [r2, #0]
 8005c0c:	f000 bcdf 	b.w	80065ce <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	7b1b      	ldrb	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f040 80bc 	bne.w	8005d9a <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d917      	bls.n	8005c6e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5e:	1ad2      	subs	r2, r2, r3
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	619a      	str	r2, [r3, #24]
 8005c6c:	e00e      	b.n	8005c8c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	011a      	lsls	r2, r3, #4
 8005cc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005cc8:	4413      	add	r3, r2
 8005cca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10d      	bne.n	8005d0a <USB_EPStartXfer+0xe94>
 8005cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	f000 bc28 	b.w	800655a <USB_EPStartXfer+0x16e4>
 8005d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d10:	d81f      	bhi.n	8005d52 <USB_EPStartXfer+0xedc>
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d004      	beq.n	8005d32 <USB_EPStartXfer+0xebc>
 8005d28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	029b      	lsls	r3, r3, #10
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	4313      	orrs	r3, r2
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d4c:	801a      	strh	r2, [r3, #0]
 8005d4e:	f000 bc04 	b.w	800655a <USB_EPStartXfer+0x16e4>
 8005d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d60:	f003 031f 	and.w	r3, r3, #31
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <USB_EPStartXfer+0xefc>
 8005d68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	029b      	lsls	r3, r3, #10
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	4313      	orrs	r3, r2
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e3df      	b.n	800655a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	78db      	ldrb	r3, [r3, #3]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	f040 8218 	bne.w	80061dc <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f040 809d 	bne.w	8005ef8 <USB_EPStartXfer+0x1082>
 8005dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005de2:	4413      	add	r3, r2
 8005de4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	011a      	lsls	r2, r3, #4
 8005df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e16:	801a      	strh	r2, [r3, #0]
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10c      	bne.n	8005e42 <USB_EPStartXfer+0xfcc>
 8005e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e3e:	801a      	strh	r2, [r3, #0]
 8005e40:	e08f      	b.n	8005f62 <USB_EPStartXfer+0x10ec>
 8005e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e50:	d826      	bhi.n	8005ea0 <USB_EPStartXfer+0x102a>
 8005e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <USB_EPStartXfer+0x100c>
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	029b      	lsls	r3, r3, #10
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e9c:	801a      	strh	r2, [r3, #0]
 8005e9e:	e060      	b.n	8005f62 <USB_EPStartXfer+0x10ec>
 8005ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 031f 	and.w	r3, r3, #31
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d104      	bne.n	8005ed0 <USB_EPStartXfer+0x105a>
 8005ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ed0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	029b      	lsls	r3, r3, #10
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	e034      	b.n	8005f62 <USB_EPStartXfer+0x10ec>
 8005ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d12c      	bne.n	8005f62 <USB_EPStartXfer+0x10ec>
 8005f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	461a      	mov	r2, r3
 8005f28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	011a      	lsls	r2, r3, #4
 8005f40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f44:	4413      	add	r3, r2
 8005f46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	785b      	ldrb	r3, [r3, #1]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f040 809d 	bne.w	80060bc <USB_EPStartXfer+0x1246>
 8005f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	011a      	lsls	r2, r3, #4
 8005fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10c      	bne.n	8006006 <USB_EPStartXfer+0x1190>
 8005fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e088      	b.n	8006118 <USB_EPStartXfer+0x12a2>
 8006006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800600a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b3e      	cmp	r3, #62	@ 0x3e
 8006014:	d826      	bhi.n	8006064 <USB_EPStartXfer+0x11ee>
 8006016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800601a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	085b      	lsrs	r3, r3, #1
 8006024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d004      	beq.n	8006046 <USB_EPStartXfer+0x11d0>
 800603c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006040:	3301      	adds	r3, #1
 8006042:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006046:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29a      	uxth	r2, r3
 800604e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006052:	b29b      	uxth	r3, r3
 8006054:	029b      	lsls	r3, r3, #10
 8006056:	b29b      	uxth	r3, r3
 8006058:	4313      	orrs	r3, r2
 800605a:	b29a      	uxth	r2, r3
 800605c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	e059      	b.n	8006118 <USB_EPStartXfer+0x12a2>
 8006064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	2b00      	cmp	r3, #0
 8006088:	d104      	bne.n	8006094 <USB_EPStartXfer+0x121e>
 800608a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800608e:	3b01      	subs	r3, #1
 8006090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006094:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29a      	uxth	r2, r3
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	4313      	orrs	r3, r2
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	e02d      	b.n	8006118 <USB_EPStartXfer+0x12a2>
 80060bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d125      	bne.n	8006118 <USB_EPStartXfer+0x12a2>
 80060cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060da:	b29b      	uxth	r3, r3
 80060dc:	461a      	mov	r2, r3
 80060de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80060e2:	4413      	add	r3, r2
 80060e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	011a      	lsls	r2, r3, #4
 80060f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80060fa:	4413      	add	r3, r2
 80060fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006100:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	b29a      	uxth	r2, r3
 8006112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006116:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8218 	beq.w	800655a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800612a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800614a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800614e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <USB_EPStartXfer+0x12ec>
 8006156:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800615a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10d      	bne.n	800617e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006162:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800616a:	2b00      	cmp	r3, #0
 800616c:	f040 81f5 	bne.w	800655a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006170:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 81ee 	bne.w	800655a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800617e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80061a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	441a      	add	r2, r3
 80061c2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80061c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	8013      	strh	r3, [r2, #0]
 80061da:	e1be      	b.n	800655a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80061dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	78db      	ldrb	r3, [r3, #3]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	f040 81b4 	bne.w	8006556 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80061ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	429a      	cmp	r2, r3
 8006208:	d917      	bls.n	800623a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800620a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800621a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800621e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	619a      	str	r2, [r3, #24]
 8006238:	e00e      	b.n	8006258 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800623a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800624a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2200      	movs	r2, #0
 8006256:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f040 8085 	bne.w	8006374 <USB_EPStartXfer+0x14fe>
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006286:	b29b      	uxth	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800628e:	4413      	add	r3, r2
 8006290:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	011a      	lsls	r2, r3, #4
 80062a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062a6:	4413      	add	r3, r2
 80062a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062bc:	b29a      	uxth	r2, r3
 80062be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10c      	bne.n	80062e6 <USB_EPStartXfer+0x1470>
 80062cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062dc:	b29a      	uxth	r2, r3
 80062de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062e2:	801a      	strh	r2, [r3, #0]
 80062e4:	e077      	b.n	80063d6 <USB_EPStartXfer+0x1560>
 80062e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80062ec:	d81e      	bhi.n	800632c <USB_EPStartXfer+0x14b6>
 80062ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <USB_EPStartXfer+0x1498>
 8006304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006308:	3301      	adds	r3, #1
 800630a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800630e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29a      	uxth	r2, r3
 8006316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800631a:	b29b      	uxth	r3, r3
 800631c:	029b      	lsls	r3, r3, #10
 800631e:	b29b      	uxth	r3, r3
 8006320:	4313      	orrs	r3, r2
 8006322:	b29a      	uxth	r2, r3
 8006324:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	e054      	b.n	80063d6 <USB_EPStartXfer+0x1560>
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800633a:	f003 031f 	and.w	r3, r3, #31
 800633e:	2b00      	cmp	r3, #0
 8006340:	d104      	bne.n	800634c <USB_EPStartXfer+0x14d6>
 8006342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006346:	3b01      	subs	r3, #1
 8006348:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800634c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	b29a      	uxth	r2, r3
 8006354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006358:	b29b      	uxth	r3, r3
 800635a:	029b      	lsls	r3, r3, #10
 800635c:	b29b      	uxth	r3, r3
 800635e:	4313      	orrs	r3, r2
 8006360:	b29b      	uxth	r3, r3
 8006362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800636a:	b29a      	uxth	r2, r3
 800636c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	e030      	b.n	80063d6 <USB_EPStartXfer+0x1560>
 8006374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d128      	bne.n	80063d6 <USB_EPStartXfer+0x1560>
 8006384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063a8:	4413      	add	r3, r2
 80063aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	011a      	lsls	r2, r3, #4
 80063bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80063d4:	801a      	strh	r2, [r3, #0]
 80063d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 8085 	bne.w	8006500 <USB_EPStartXfer+0x168a>
 80063f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006408:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006412:	b29b      	uxth	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800641a:	4413      	add	r3, r2
 800641c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	011a      	lsls	r2, r3, #4
 800642e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006432:	4413      	add	r3, r2
 8006434:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800643c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006448:	b29a      	uxth	r2, r3
 800644a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10c      	bne.n	8006472 <USB_EPStartXfer+0x15fc>
 8006458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006468:	b29a      	uxth	r2, r3
 800646a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e073      	b.n	800655a <USB_EPStartXfer+0x16e4>
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	2b3e      	cmp	r3, #62	@ 0x3e
 8006478:	d81e      	bhi.n	80064b8 <USB_EPStartXfer+0x1642>
 800647a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <USB_EPStartXfer+0x1624>
 8006490:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006494:	3301      	adds	r3, #1
 8006496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800649a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	029b      	lsls	r3, r3, #10
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	4313      	orrs	r3, r2
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064b4:	801a      	strh	r2, [r3, #0]
 80064b6:	e050      	b.n	800655a <USB_EPStartXfer+0x16e4>
 80064b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <USB_EPStartXfer+0x1662>
 80064ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064d2:	3b01      	subs	r3, #1
 80064d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	029b      	lsls	r3, r3, #10
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	4313      	orrs	r3, r2
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e02c      	b.n	800655a <USB_EPStartXfer+0x16e4>
 8006500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d124      	bne.n	800655a <USB_EPStartXfer+0x16e4>
 8006510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800651e:	b29b      	uxth	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006526:	4413      	add	r3, r2
 8006528:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800652c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	011a      	lsls	r2, r3, #4
 800653a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800653e:	4413      	add	r3, r2
 8006540:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006544:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654c:	b29a      	uxth	r2, r3
 800654e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	e001      	b.n	800655a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e03a      	b.n	80065d0 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800655a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800657c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006580:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006584:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006588:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800658c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006590:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006594:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006598:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800659c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	441a      	add	r2, r3
 80065b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d020      	beq.n	800662e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006602:	81bb      	strh	r3, [r7, #12]
 8006604:	89bb      	ldrh	r3, [r7, #12]
 8006606:	f083 0310 	eor.w	r3, r3, #16
 800660a:	81bb      	strh	r3, [r7, #12]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	441a      	add	r2, r3
 8006616:	89bb      	ldrh	r3, [r7, #12]
 8006618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800661c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006628:	b29b      	uxth	r3, r3
 800662a:	8013      	strh	r3, [r2, #0]
 800662c:	e01f      	b.n	800666e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006644:	81fb      	strh	r3, [r7, #14]
 8006646:	89fb      	ldrh	r3, [r7, #14]
 8006648:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800664c:	81fb      	strh	r3, [r7, #14]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	441a      	add	r2, r3
 8006658:	89fb      	ldrh	r3, [r7, #14]
 800665a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800665e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800666a:	b29b      	uxth	r3, r3
 800666c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	7b1b      	ldrb	r3, [r3, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 809d 	bne.w	80067ca <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d04c      	beq.n	8006732 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	823b      	strh	r3, [r7, #16]
 80066a6:	8a3b      	ldrh	r3, [r7, #16]
 80066a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d01b      	beq.n	80066e8 <USB_EPClearStall+0x6c>
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c6:	81fb      	strh	r3, [r7, #14]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	89fb      	ldrh	r3, [r7, #14]
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	78db      	ldrb	r3, [r3, #3]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d06c      	beq.n	80067ca <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006706:	81bb      	strh	r3, [r7, #12]
 8006708:	89bb      	ldrh	r3, [r7, #12]
 800670a:	f083 0320 	eor.w	r3, r3, #32
 800670e:	81bb      	strh	r3, [r7, #12]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	441a      	add	r2, r3
 800671a:	89bb      	ldrh	r3, [r7, #12]
 800671c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800672c:	b29b      	uxth	r3, r3
 800672e:	8013      	strh	r3, [r2, #0]
 8006730:	e04b      	b.n	80067ca <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	82fb      	strh	r3, [r7, #22]
 8006740:	8afb      	ldrh	r3, [r7, #22]
 8006742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01b      	beq.n	8006782 <USB_EPClearStall+0x106>
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800675c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006760:	82bb      	strh	r3, [r7, #20]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	441a      	add	r2, r3
 800676c:	8abb      	ldrh	r3, [r7, #20]
 800676e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006772:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006776:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800677a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677e:	b29b      	uxth	r3, r3
 8006780:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006798:	827b      	strh	r3, [r7, #18]
 800679a:	8a7b      	ldrh	r3, [r7, #18]
 800679c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067a0:	827b      	strh	r3, [r7, #18]
 80067a2:	8a7b      	ldrh	r3, [r7, #18]
 80067a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067a8:	827b      	strh	r3, [r7, #18]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	441a      	add	r2, r3
 80067b4:	8a7b      	ldrh	r3, [r7, #18]
 80067b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d103      	bne.n	80067f2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2280      	movs	r2, #128	@ 0x80
 80067ee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006816:	b480      	push	{r7}
 8006818:	b085      	sub	sp, #20
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006824:	b29b      	uxth	r3, r3
 8006826:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006828:	68fb      	ldr	r3, [r7, #12]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006836:	b480      	push	{r7}
 8006838:	b08b      	sub	sp, #44	@ 0x2c
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	4611      	mov	r1, r2
 8006842:	461a      	mov	r2, r3
 8006844:	460b      	mov	r3, r1
 8006846:	80fb      	strh	r3, [r7, #6]
 8006848:	4613      	mov	r3, r2
 800684a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800684c:	88bb      	ldrh	r3, [r7, #4]
 800684e:	3301      	adds	r3, #1
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	005a      	lsls	r2, r3, #1
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006868:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
 800686e:	e01e      	b.n	80068ae <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	3301      	adds	r3, #1
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	b21a      	sxth	r2, r3
 8006880:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006884:	4313      	orrs	r3, r2
 8006886:	b21b      	sxth	r3, r3
 8006888:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	8a7a      	ldrh	r2, [r7, #18]
 800688e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	3302      	adds	r3, #2
 8006894:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	3302      	adds	r3, #2
 800689a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	3301      	adds	r3, #1
 80068a0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	3301      	adds	r3, #1
 80068a6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80068a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068aa:	3b01      	subs	r3, #1
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1dd      	bne.n	8006870 <USB_WritePMA+0x3a>
  }
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	372c      	adds	r7, #44	@ 0x2c
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b08b      	sub	sp, #44	@ 0x2c
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	4611      	mov	r1, r2
 80068ce:	461a      	mov	r2, r3
 80068d0:	460b      	mov	r3, r1
 80068d2:	80fb      	strh	r3, [r7, #6]
 80068d4:	4613      	mov	r3, r2
 80068d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80068d8:	88bb      	ldrh	r3, [r7, #4]
 80068da:	085b      	lsrs	r3, r3, #1
 80068dc:	b29b      	uxth	r3, r3
 80068de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068e8:	88fb      	ldrh	r3, [r7, #6]
 80068ea:	005a      	lsls	r2, r3, #1
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068fa:	e01b      	b.n	8006934 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	3302      	adds	r3, #2
 8006908:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	b2da      	uxtb	r2, r3
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	3301      	adds	r3, #1
 8006916:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	0a1b      	lsrs	r3, r3, #8
 800691c:	b2da      	uxtb	r2, r3
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	3301      	adds	r3, #1
 8006926:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	3302      	adds	r3, #2
 800692c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	3b01      	subs	r3, #1
 8006932:	627b      	str	r3, [r7, #36]	@ 0x24
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e0      	bne.n	80068fc <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800693a:	88bb      	ldrh	r3, [r7, #4]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	701a      	strb	r2, [r3, #0]
  }
}
 8006956:	bf00      	nop
 8006958:	372c      	adds	r7, #44	@ 0x2c
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	460b      	mov	r3, r1
 800696c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	7c1b      	ldrb	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d115      	bne.n	80069a6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800697a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800697e:	2202      	movs	r2, #2
 8006980:	2181      	movs	r1, #129	@ 0x81
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 feb3 	bl	80086ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800698e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006992:	2202      	movs	r2, #2
 8006994:	2101      	movs	r1, #1
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 fea9 	bl	80086ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80069a4:	e012      	b.n	80069cc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069a6:	2340      	movs	r3, #64	@ 0x40
 80069a8:	2202      	movs	r2, #2
 80069aa:	2181      	movs	r1, #129	@ 0x81
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 fe9e 	bl	80086ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069b8:	2340      	movs	r3, #64	@ 0x40
 80069ba:	2202      	movs	r2, #2
 80069bc:	2101      	movs	r1, #1
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fe95 	bl	80086ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069cc:	2308      	movs	r3, #8
 80069ce:	2203      	movs	r2, #3
 80069d0:	2182      	movs	r1, #130	@ 0x82
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fe8b 	bl	80086ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069de:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80069e2:	f001 ffab 	bl	800893c <USBD_static_malloc>
 80069e6:	4602      	mov	r2, r0
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d102      	bne.n	80069fe <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80069f8:	2301      	movs	r3, #1
 80069fa:	73fb      	strb	r3, [r7, #15]
 80069fc:	e026      	b.n	8006a4c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a04:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	7c1b      	ldrb	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d109      	bne.n	8006a3c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a32:	2101      	movs	r1, #1
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 ff4b 	bl	80088d0 <USBD_LL_PrepareReceive>
 8006a3a:	e007      	b.n	8006a4c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a42:	2340      	movs	r3, #64	@ 0x40
 8006a44:	2101      	movs	r1, #1
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 ff42 	bl	80088d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a66:	2181      	movs	r1, #129	@ 0x81
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 fe66 	bl	800873a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a74:	2101      	movs	r1, #1
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 fe5f 	bl	800873a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a84:	2182      	movs	r1, #130	@ 0x82
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 fe57 	bl	800873a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00e      	beq.n	8006aba <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006aac:	4618      	mov	r0, r3
 8006aae:	f001 ff53 	bl	8008958 <USBD_static_free>
    pdev->pClassData = NULL;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ad4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d039      	beq.n	8006b62 <USBD_CDC_Setup+0x9e>
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d17f      	bne.n	8006bf2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	88db      	ldrh	r3, [r3, #6]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d029      	beq.n	8006b4e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b25b      	sxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da11      	bge.n	8006b28 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006b10:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	88d2      	ldrh	r2, [r2, #6]
 8006b16:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b18:	6939      	ldr	r1, [r7, #16]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	88db      	ldrh	r3, [r3, #6]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 fa0f 	bl	8007f44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006b26:	e06b      	b.n	8006c00 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	785a      	ldrb	r2, [r3, #1]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	88db      	ldrh	r3, [r3, #6]
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b3e:	6939      	ldr	r1, [r7, #16]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	88db      	ldrh	r3, [r3, #6]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fa2a 	bl	8007fa0 <USBD_CtlPrepareRx>
      break;
 8006b4c:	e058      	b.n	8006c00 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	7850      	ldrb	r0, [r2, #1]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	4798      	blx	r3
      break;
 8006b60:	e04e      	b.n	8006c00 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	2b0b      	cmp	r3, #11
 8006b68:	d02e      	beq.n	8006bc8 <USBD_CDC_Setup+0x104>
 8006b6a:	2b0b      	cmp	r3, #11
 8006b6c:	dc38      	bgt.n	8006be0 <USBD_CDC_Setup+0x11c>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <USBD_CDC_Setup+0xb4>
 8006b72:	2b0a      	cmp	r3, #10
 8006b74:	d014      	beq.n	8006ba0 <USBD_CDC_Setup+0xdc>
 8006b76:	e033      	b.n	8006be0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d107      	bne.n	8006b92 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b82:	f107 030c 	add.w	r3, r7, #12
 8006b86:	2202      	movs	r2, #2
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 f9da 	bl	8007f44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b90:	e02e      	b.n	8006bf0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 f96a 	bl	8007e6e <USBD_CtlError>
            ret = USBD_FAIL;
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b9e:	e027      	b.n	8006bf0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d107      	bne.n	8006bba <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006baa:	f107 030f 	add.w	r3, r7, #15
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 f9c6 	bl	8007f44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bb8:	e01a      	b.n	8006bf0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 f956 	bl	8007e6e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8006bc6:	e013      	b.n	8006bf0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d00d      	beq.n	8006bee <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f94a 	bl	8007e6e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006bde:	e006      	b.n	8006bee <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 f943 	bl	8007e6e <USBD_CtlError>
          ret = USBD_FAIL;
 8006be8:	2302      	movs	r3, #2
 8006bea:	75fb      	strb	r3, [r7, #23]
          break;
 8006bec:	e000      	b.n	8006bf0 <USBD_CDC_Setup+0x12c>
          break;
 8006bee:	bf00      	nop
      }
      break;
 8006bf0:	e006      	b.n	8006c00 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 f93a 	bl	8007e6e <USBD_CtlError>
      ret = USBD_FAIL;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfe:	bf00      	nop
  }

  return ret;
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c1c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c24:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d03a      	beq.n	8006ca6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c30:	78fa      	ldrb	r2, [r7, #3]
 8006c32:	6879      	ldr	r1, [r7, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	331c      	adds	r3, #28
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d029      	beq.n	8006c9a <USBD_CDC_DataIn+0x90>
 8006c46:	78fa      	ldrb	r2, [r7, #3]
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	331c      	adds	r3, #28
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	78f9      	ldrb	r1, [r7, #3]
 8006c5a:	68b8      	ldr	r0, [r7, #8]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	4403      	add	r3, r0
 8006c66:	3320      	adds	r3, #32
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c6e:	fb01 f303 	mul.w	r3, r1, r3
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d110      	bne.n	8006c9a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c78:	78fa      	ldrb	r2, [r7, #3]
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	440b      	add	r3, r1
 8006c86:	331c      	adds	r3, #28
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c8c:	78f9      	ldrb	r1, [r7, #3]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2200      	movs	r2, #0
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fdf9 	bl	800888a <USBD_LL_Transmit>
 8006c98:	e003      	b.n	8006ca2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e000      	b.n	8006ca8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006ca6:	2302      	movs	r3, #2
  }
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006cc4:	78fb      	ldrb	r3, [r7, #3]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fe24 	bl	8008916 <USBD_LL_GetRxDataSize>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00d      	beq.n	8006cfc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4798      	blx	r3

    return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e000      	b.n	8006cfe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006cfc:	2302      	movs	r3, #2
  }
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d14:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d014      	beq.n	8006d4a <USBD_CDC_EP0_RxReady+0x44>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006d26:	2bff      	cmp	r3, #255	@ 0xff
 8006d28:	d00f      	beq.n	8006d4a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006d38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d40:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	22ff      	movs	r2, #255	@ 0xff
 8006d46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2243      	movs	r2, #67	@ 0x43
 8006d60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006d62:	4b03      	ldr	r3, [pc, #12]	@ (8006d70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	20000094 	.word	0x20000094

08006d74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2243      	movs	r2, #67	@ 0x43
 8006d80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d82:	4b03      	ldr	r3, [pc, #12]	@ (8006d90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	20000050 	.word	0x20000050

08006d94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2243      	movs	r2, #67	@ 0x43
 8006da0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006da2:	4b03      	ldr	r3, [pc, #12]	@ (8006db0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	200000d8 	.word	0x200000d8

08006db4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	220a      	movs	r2, #10
 8006dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006dc2:	4b03      	ldr	r3, [pc, #12]	@ (8006dd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	2000000c 	.word	0x2000000c

08006dd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006dde:	2302      	movs	r3, #2
 8006de0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b087      	sub	sp, #28
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e16:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006e20:	88fa      	ldrh	r2, [r7, #6]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b085      	sub	sp, #20
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e46:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01c      	beq.n	8006eb2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d115      	bne.n	8006eae <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2181      	movs	r1, #129	@ 0x81
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fcf0 	bl	800888a <USBD_LL_Transmit>

      return USBD_OK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e002      	b.n	8006eb4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e000      	b.n	8006eb4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006eb2:	2302      	movs	r3, #2
  }
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d017      	beq.n	8006f06 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	7c1b      	ldrb	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ee8:	2101      	movs	r1, #1
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 fcf0 	bl	80088d0 <USBD_LL_PrepareReceive>
 8006ef0:	e007      	b.n	8006f02 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ef8:	2340      	movs	r3, #64	@ 0x40
 8006efa:	2101      	movs	r1, #1
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fce7 	bl	80088d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	e000      	b.n	8006f08 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006f06:	2302      	movs	r3, #2
  }
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f24:	2302      	movs	r3, #2
 8006f26:	e01a      	b.n	8006f5e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	79fa      	ldrb	r2, [r7, #7]
 8006f54:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f001 fb54 	bl	8008604 <USBD_LL_Init>

  return USBD_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d006      	beq.n	8006f88 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
 8006f86:	e001      	b.n	8006f8c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006f88:	2302      	movs	r3, #2
 8006f8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fb88 	bl	80086b8 <USBD_LL_Start>

  return USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	78fa      	ldrb	r2, [r7, #3]
 8006fec:	4611      	mov	r1, r2
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	78fa      	ldrb	r2, [r7, #3]
 800701c:	4611      	mov	r1, r2
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3

  return USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fedb 	bl	8007dfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007052:	461a      	mov	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	2b02      	cmp	r3, #2
 8007066:	d016      	beq.n	8007096 <USBD_LL_SetupStage+0x6a>
 8007068:	2b02      	cmp	r3, #2
 800706a:	d81c      	bhi.n	80070a6 <USBD_LL_SetupStage+0x7a>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <USBD_LL_SetupStage+0x4a>
 8007070:	2b01      	cmp	r3, #1
 8007072:	d008      	beq.n	8007086 <USBD_LL_SetupStage+0x5a>
 8007074:	e017      	b.n	80070a6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f9ce 	bl	8007420 <USBD_StdDevReq>
      break;
 8007084:	e01a      	b.n	80070bc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa30 	bl	80074f4 <USBD_StdItfReq>
      break;
 8007094:	e012      	b.n	80070bc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800709c:	4619      	mov	r1, r3
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa70 	bl	8007584 <USBD_StdEPReq>
      break;
 80070a4:	e00a      	b.n	80070bc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80070ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fb5f 	bl	8008778 <USBD_LL_StallEP>
      break;
 80070ba:	bf00      	nop
  }

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b086      	sub	sp, #24
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	60f8      	str	r0, [r7, #12]
 80070ce:	460b      	mov	r3, r1
 80070d0:	607a      	str	r2, [r7, #4]
 80070d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070d4:	7afb      	ldrb	r3, [r7, #11]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d14b      	bne.n	8007172 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80070e0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d134      	bne.n	8007156 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d919      	bls.n	800712c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	1ad2      	subs	r2, r2, r3
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800710e:	429a      	cmp	r2, r3
 8007110:	d203      	bcs.n	800711a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007116:	b29b      	uxth	r3, r3
 8007118:	e002      	b.n	8007120 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800711e:	b29b      	uxth	r3, r3
 8007120:	461a      	mov	r2, r3
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 ff59 	bl	8007fdc <USBD_CtlContinueRx>
 800712a:	e038      	b.n	800719e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800713e:	2b03      	cmp	r3, #3
 8007140:	d105      	bne.n	800714e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 ff56 	bl	8008000 <USBD_CtlSendStatus>
 8007154:	e023      	b.n	800719e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800715c:	2b05      	cmp	r3, #5
 800715e:	d11e      	bne.n	800719e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007168:	2100      	movs	r1, #0
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f001 fb04 	bl	8008778 <USBD_LL_StallEP>
 8007170:	e015      	b.n	800719e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00d      	beq.n	800719a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007184:	2b03      	cmp	r3, #3
 8007186:	d108      	bne.n	800719a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	7afa      	ldrb	r2, [r7, #11]
 8007192:	4611      	mov	r1, r2
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	4798      	blx	r3
 8007198:	e001      	b.n	800719e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800719a:	2302      	movs	r3, #2
 800719c:	e000      	b.n	80071a0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	460b      	mov	r3, r1
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80071b6:	7afb      	ldrb	r3, [r7, #11]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d17f      	bne.n	80072bc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3314      	adds	r3, #20
 80071c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d15c      	bne.n	8007286 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d915      	bls.n	8007204 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	1ad2      	subs	r2, r2, r3
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fec3 	bl	8007f7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071f6:	2300      	movs	r3, #0
 80071f8:	2200      	movs	r2, #0
 80071fa:	2100      	movs	r1, #0
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f001 fb67 	bl	80088d0 <USBD_LL_PrepareReceive>
 8007202:	e04e      	b.n	80072a2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	6912      	ldr	r2, [r2, #16]
 800720c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007210:	fb01 f202 	mul.w	r2, r1, r2
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d11c      	bne.n	8007254 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007222:	429a      	cmp	r2, r3
 8007224:	d316      	bcc.n	8007254 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007230:	429a      	cmp	r2, r3
 8007232:	d20f      	bcs.n	8007254 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007234:	2200      	movs	r2, #0
 8007236:	2100      	movs	r1, #0
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 fe9f 	bl	8007f7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007246:	2300      	movs	r3, #0
 8007248:	2200      	movs	r2, #0
 800724a:	2100      	movs	r1, #0
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f001 fb3f 	bl	80088d0 <USBD_LL_PrepareReceive>
 8007252:	e026      	b.n	80072a2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007266:	2b03      	cmp	r3, #3
 8007268:	d105      	bne.n	8007276 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007276:	2180      	movs	r1, #128	@ 0x80
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f001 fa7d 	bl	8008778 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 fed1 	bl	8008026 <USBD_CtlReceiveStatus>
 8007284:	e00d      	b.n	80072a2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800728c:	2b04      	cmp	r3, #4
 800728e:	d004      	beq.n	800729a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007296:	2b00      	cmp	r3, #0
 8007298:	d103      	bne.n	80072a2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800729a:	2180      	movs	r1, #128	@ 0x80
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f001 fa6b 	bl	8008778 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d11d      	bne.n	80072e8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff fe80 	bl	8006fb2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80072ba:	e015      	b.n	80072e8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00d      	beq.n	80072e4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d108      	bne.n	80072e4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	7afa      	ldrb	r2, [r7, #11]
 80072dc:	4611      	mov	r1, r2
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	4798      	blx	r3
 80072e2:	e001      	b.n	80072e8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072e4:	2302      	movs	r3, #2
 80072e6:	e000      	b.n	80072ea <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072fa:	2340      	movs	r3, #64	@ 0x40
 80072fc:	2200      	movs	r2, #0
 80072fe:	2100      	movs	r1, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 f9f4 	bl	80086ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2240      	movs	r2, #64	@ 0x40
 8007312:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007316:	2340      	movs	r3, #64	@ 0x40
 8007318:	2200      	movs	r2, #0
 800731a:	2180      	movs	r1, #128	@ 0x80
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 f9e6 	bl	80086ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2240      	movs	r2, #64	@ 0x40
 800732c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6852      	ldr	r2, [r2, #4]
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	4611      	mov	r1, r2
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	4798      	blx	r3
  }

  return USBD_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	460b      	mov	r3, r1
 800737e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2204      	movs	r2, #4
 80073ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d105      	bne.n	80073dc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b082      	sub	sp, #8
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d10b      	bne.n	8007414 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007436:	2b40      	cmp	r3, #64	@ 0x40
 8007438:	d005      	beq.n	8007446 <USBD_StdDevReq+0x26>
 800743a:	2b40      	cmp	r3, #64	@ 0x40
 800743c:	d84f      	bhi.n	80074de <USBD_StdDevReq+0xbe>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d009      	beq.n	8007456 <USBD_StdDevReq+0x36>
 8007442:	2b20      	cmp	r3, #32
 8007444:	d14b      	bne.n	80074de <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
      break;
 8007454:	e048      	b.n	80074e8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	2b09      	cmp	r3, #9
 800745c:	d839      	bhi.n	80074d2 <USBD_StdDevReq+0xb2>
 800745e:	a201      	add	r2, pc, #4	@ (adr r2, 8007464 <USBD_StdDevReq+0x44>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	080074b5 	.word	0x080074b5
 8007468:	080074c9 	.word	0x080074c9
 800746c:	080074d3 	.word	0x080074d3
 8007470:	080074bf 	.word	0x080074bf
 8007474:	080074d3 	.word	0x080074d3
 8007478:	08007497 	.word	0x08007497
 800747c:	0800748d 	.word	0x0800748d
 8007480:	080074d3 	.word	0x080074d3
 8007484:	080074ab 	.word	0x080074ab
 8007488:	080074a1 	.word	0x080074a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f9dc 	bl	800784c <USBD_GetDescriptor>
          break;
 8007494:	e022      	b.n	80074dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fb3f 	bl	8007b1c <USBD_SetAddress>
          break;
 800749e:	e01d      	b.n	80074dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fb7e 	bl	8007ba4 <USBD_SetConfig>
          break;
 80074a8:	e018      	b.n	80074dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fc07 	bl	8007cc0 <USBD_GetConfig>
          break;
 80074b2:	e013      	b.n	80074dc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fc37 	bl	8007d2a <USBD_GetStatus>
          break;
 80074bc:	e00e      	b.n	80074dc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fc65 	bl	8007d90 <USBD_SetFeature>
          break;
 80074c6:	e009      	b.n	80074dc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fc74 	bl	8007db8 <USBD_ClrFeature>
          break;
 80074d0:	e004      	b.n	80074dc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fcca 	bl	8007e6e <USBD_CtlError>
          break;
 80074da:	bf00      	nop
      }
      break;
 80074dc:	e004      	b.n	80074e8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fcc4 	bl	8007e6e <USBD_CtlError>
      break;
 80074e6:	bf00      	nop
  }

  return ret;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop

080074f4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800750a:	2b40      	cmp	r3, #64	@ 0x40
 800750c:	d005      	beq.n	800751a <USBD_StdItfReq+0x26>
 800750e:	2b40      	cmp	r3, #64	@ 0x40
 8007510:	d82e      	bhi.n	8007570 <USBD_StdItfReq+0x7c>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <USBD_StdItfReq+0x26>
 8007516:	2b20      	cmp	r3, #32
 8007518:	d12a      	bne.n	8007570 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007520:	3b01      	subs	r3, #1
 8007522:	2b02      	cmp	r3, #2
 8007524:	d81d      	bhi.n	8007562 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	889b      	ldrh	r3, [r3, #4]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b01      	cmp	r3, #1
 800752e:	d813      	bhi.n	8007558 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
 800753e:	4603      	mov	r3, r0
 8007540:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	88db      	ldrh	r3, [r3, #6]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d110      	bne.n	800756c <USBD_StdItfReq+0x78>
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10d      	bne.n	800756c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fd55 	bl	8008000 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007556:	e009      	b.n	800756c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fc87 	bl	8007e6e <USBD_CtlError>
          break;
 8007560:	e004      	b.n	800756c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fc82 	bl	8007e6e <USBD_CtlError>
          break;
 800756a:	e000      	b.n	800756e <USBD_StdItfReq+0x7a>
          break;
 800756c:	bf00      	nop
      }
      break;
 800756e:	e004      	b.n	800757a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fc7b 	bl	8007e6e <USBD_CtlError>
      break;
 8007578:	bf00      	nop
  }

  return USBD_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	889b      	ldrh	r3, [r3, #4]
 8007596:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075a0:	2b40      	cmp	r3, #64	@ 0x40
 80075a2:	d007      	beq.n	80075b4 <USBD_StdEPReq+0x30>
 80075a4:	2b40      	cmp	r3, #64	@ 0x40
 80075a6:	f200 8146 	bhi.w	8007836 <USBD_StdEPReq+0x2b2>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <USBD_StdEPReq+0x40>
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	f040 8141 	bne.w	8007836 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4798      	blx	r3
      break;
 80075c2:	e13d      	b.n	8007840 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075cc:	2b20      	cmp	r3, #32
 80075ce:	d10a      	bne.n	80075e6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	e12d      	b.n	8007842 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d007      	beq.n	80075fe <USBD_StdEPReq+0x7a>
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	f300 811b 	bgt.w	800782a <USBD_StdEPReq+0x2a6>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d072      	beq.n	80076de <USBD_StdEPReq+0x15a>
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d03a      	beq.n	8007672 <USBD_StdEPReq+0xee>
 80075fc:	e115      	b.n	800782a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007604:	2b02      	cmp	r3, #2
 8007606:	d002      	beq.n	800760e <USBD_StdEPReq+0x8a>
 8007608:	2b03      	cmp	r3, #3
 800760a:	d015      	beq.n	8007638 <USBD_StdEPReq+0xb4>
 800760c:	e02b      	b.n	8007666 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00c      	beq.n	800762e <USBD_StdEPReq+0xaa>
 8007614:	7bbb      	ldrb	r3, [r7, #14]
 8007616:	2b80      	cmp	r3, #128	@ 0x80
 8007618:	d009      	beq.n	800762e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f001 f8aa 	bl	8008778 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007624:	2180      	movs	r1, #128	@ 0x80
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 f8a6 	bl	8008778 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800762c:	e020      	b.n	8007670 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fc1c 	bl	8007e6e <USBD_CtlError>
              break;
 8007636:	e01b      	b.n	8007670 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	885b      	ldrh	r3, [r3, #2]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10e      	bne.n	800765e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00b      	beq.n	800765e <USBD_StdEPReq+0xda>
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	2b80      	cmp	r3, #128	@ 0x80
 800764a:	d008      	beq.n	800765e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	88db      	ldrh	r3, [r3, #6]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 f88d 	bl	8008778 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fcce 	bl	8008000 <USBD_CtlSendStatus>

              break;
 8007664:	e004      	b.n	8007670 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fc00 	bl	8007e6e <USBD_CtlError>
              break;
 800766e:	bf00      	nop
          }
          break;
 8007670:	e0e0      	b.n	8007834 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007678:	2b02      	cmp	r3, #2
 800767a:	d002      	beq.n	8007682 <USBD_StdEPReq+0xfe>
 800767c:	2b03      	cmp	r3, #3
 800767e:	d015      	beq.n	80076ac <USBD_StdEPReq+0x128>
 8007680:	e026      	b.n	80076d0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00c      	beq.n	80076a2 <USBD_StdEPReq+0x11e>
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b80      	cmp	r3, #128	@ 0x80
 800768c:	d009      	beq.n	80076a2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 f870 	bl	8008778 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007698:	2180      	movs	r1, #128	@ 0x80
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 f86c 	bl	8008778 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076a0:	e01c      	b.n	80076dc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80076a2:	6839      	ldr	r1, [r7, #0]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fbe2 	bl	8007e6e <USBD_CtlError>
              break;
 80076aa:	e017      	b.n	80076dc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	885b      	ldrh	r3, [r3, #2]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d112      	bne.n	80076da <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076b4:	7bbb      	ldrb	r3, [r7, #14]
 80076b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d004      	beq.n	80076c8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 f877 	bl	80087b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fc99 	bl	8008000 <USBD_CtlSendStatus>
              }
              break;
 80076ce:	e004      	b.n	80076da <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fbcb 	bl	8007e6e <USBD_CtlError>
              break;
 80076d8:	e000      	b.n	80076dc <USBD_StdEPReq+0x158>
              break;
 80076da:	bf00      	nop
          }
          break;
 80076dc:	e0aa      	b.n	8007834 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d002      	beq.n	80076ee <USBD_StdEPReq+0x16a>
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d032      	beq.n	8007752 <USBD_StdEPReq+0x1ce>
 80076ec:	e097      	b.n	800781e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <USBD_StdEPReq+0x180>
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b80      	cmp	r3, #128	@ 0x80
 80076f8:	d004      	beq.n	8007704 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fbb6 	bl	8007e6e <USBD_CtlError>
                break;
 8007702:	e091      	b.n	8007828 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007708:	2b00      	cmp	r3, #0
 800770a:	da0b      	bge.n	8007724 <USBD_StdEPReq+0x1a0>
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	3310      	adds	r3, #16
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	4413      	add	r3, r2
 8007720:	3304      	adds	r3, #4
 8007722:	e00b      	b.n	800773c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	4413      	add	r3, r2
 800773a:	3304      	adds	r3, #4
 800773c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2202      	movs	r2, #2
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fbfa 	bl	8007f44 <USBD_CtlSendData>
              break;
 8007750:	e06a      	b.n	8007828 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007752:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007756:	2b00      	cmp	r3, #0
 8007758:	da11      	bge.n	800777e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	f003 020f 	and.w	r2, r3, #15
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	440b      	add	r3, r1
 800776c:	3318      	adds	r3, #24
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d117      	bne.n	80077a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fb79 	bl	8007e6e <USBD_CtlError>
                  break;
 800777c:	e054      	b.n	8007828 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	f003 020f 	and.w	r2, r3, #15
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	440b      	add	r3, r1
 8007790:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fb66 	bl	8007e6e <USBD_CtlError>
                  break;
 80077a2:	e041      	b.n	8007828 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	da0b      	bge.n	80077c4 <USBD_StdEPReq+0x240>
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077b2:	4613      	mov	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	3310      	adds	r3, #16
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	4413      	add	r3, r2
 80077c0:	3304      	adds	r3, #4
 80077c2:	e00b      	b.n	80077dc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	4413      	add	r3, r2
 80077da:	3304      	adds	r3, #4
 80077dc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <USBD_StdEPReq+0x266>
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2b80      	cmp	r3, #128	@ 0x80
 80077e8:	d103      	bne.n	80077f2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	e00e      	b.n	8007810 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fffc 	bl	80087f4 <USBD_LL_IsStallEP>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2201      	movs	r2, #1
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	e002      	b.n	8007810 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2202      	movs	r2, #2
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fb94 	bl	8007f44 <USBD_CtlSendData>
              break;
 800781c:	e004      	b.n	8007828 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fb24 	bl	8007e6e <USBD_CtlError>
              break;
 8007826:	bf00      	nop
          }
          break;
 8007828:	e004      	b.n	8007834 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fb1e 	bl	8007e6e <USBD_CtlError>
          break;
 8007832:	bf00      	nop
      }
      break;
 8007834:	e004      	b.n	8007840 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fb18 	bl	8007e6e <USBD_CtlError>
      break;
 800783e:	bf00      	nop
  }

  return ret;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	885b      	ldrh	r3, [r3, #2]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	b29b      	uxth	r3, r3
 800786a:	3b01      	subs	r3, #1
 800786c:	2b06      	cmp	r3, #6
 800786e:	f200 8128 	bhi.w	8007ac2 <USBD_GetDescriptor+0x276>
 8007872:	a201      	add	r2, pc, #4	@ (adr r2, 8007878 <USBD_GetDescriptor+0x2c>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	08007895 	.word	0x08007895
 800787c:	080078ad 	.word	0x080078ad
 8007880:	080078ed 	.word	0x080078ed
 8007884:	08007ac3 	.word	0x08007ac3
 8007888:	08007ac3 	.word	0x08007ac3
 800788c:	08007a63 	.word	0x08007a63
 8007890:	08007a8f 	.word	0x08007a8f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	7c12      	ldrb	r2, [r2, #16]
 80078a0:	f107 0108 	add.w	r1, r7, #8
 80078a4:	4610      	mov	r0, r2
 80078a6:	4798      	blx	r3
 80078a8:	60f8      	str	r0, [r7, #12]
      break;
 80078aa:	e112      	b.n	8007ad2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	7c1b      	ldrb	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10d      	bne.n	80078d0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078bc:	f107 0208 	add.w	r2, r7, #8
 80078c0:	4610      	mov	r0, r2
 80078c2:	4798      	blx	r3
 80078c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3301      	adds	r3, #1
 80078ca:	2202      	movs	r2, #2
 80078cc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078ce:	e100      	b.n	8007ad2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	f107 0208 	add.w	r2, r7, #8
 80078dc:	4610      	mov	r0, r2
 80078de:	4798      	blx	r3
 80078e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	2202      	movs	r2, #2
 80078e8:	701a      	strb	r2, [r3, #0]
      break;
 80078ea:	e0f2      	b.n	8007ad2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	885b      	ldrh	r3, [r3, #2]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b05      	cmp	r3, #5
 80078f4:	f200 80ac 	bhi.w	8007a50 <USBD_GetDescriptor+0x204>
 80078f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007900 <USBD_GetDescriptor+0xb4>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007919 	.word	0x08007919
 8007904:	0800794d 	.word	0x0800794d
 8007908:	08007981 	.word	0x08007981
 800790c:	080079b5 	.word	0x080079b5
 8007910:	080079e9 	.word	0x080079e9
 8007914:	08007a1d 	.word	0x08007a1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00b      	beq.n	800793c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	7c12      	ldrb	r2, [r2, #16]
 8007930:	f107 0108 	add.w	r1, r7, #8
 8007934:	4610      	mov	r0, r2
 8007936:	4798      	blx	r3
 8007938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800793a:	e091      	b.n	8007a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa95 	bl	8007e6e <USBD_CtlError>
            err++;
 8007944:	7afb      	ldrb	r3, [r7, #11]
 8007946:	3301      	adds	r3, #1
 8007948:	72fb      	strb	r3, [r7, #11]
          break;
 800794a:	e089      	b.n	8007a60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00b      	beq.n	8007970 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	7c12      	ldrb	r2, [r2, #16]
 8007964:	f107 0108 	add.w	r1, r7, #8
 8007968:	4610      	mov	r0, r2
 800796a:	4798      	blx	r3
 800796c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800796e:	e077      	b.n	8007a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fa7b 	bl	8007e6e <USBD_CtlError>
            err++;
 8007978:	7afb      	ldrb	r3, [r7, #11]
 800797a:	3301      	adds	r3, #1
 800797c:	72fb      	strb	r3, [r7, #11]
          break;
 800797e:	e06f      	b.n	8007a60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	7c12      	ldrb	r2, [r2, #16]
 8007998:	f107 0108 	add.w	r1, r7, #8
 800799c:	4610      	mov	r0, r2
 800799e:	4798      	blx	r3
 80079a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079a2:	e05d      	b.n	8007a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fa61 	bl	8007e6e <USBD_CtlError>
            err++;
 80079ac:	7afb      	ldrb	r3, [r7, #11]
 80079ae:	3301      	adds	r3, #1
 80079b0:	72fb      	strb	r3, [r7, #11]
          break;
 80079b2:	e055      	b.n	8007a60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00b      	beq.n	80079d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	7c12      	ldrb	r2, [r2, #16]
 80079cc:	f107 0108 	add.w	r1, r7, #8
 80079d0:	4610      	mov	r0, r2
 80079d2:	4798      	blx	r3
 80079d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079d6:	e043      	b.n	8007a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa47 	bl	8007e6e <USBD_CtlError>
            err++;
 80079e0:	7afb      	ldrb	r3, [r7, #11]
 80079e2:	3301      	adds	r3, #1
 80079e4:	72fb      	strb	r3, [r7, #11]
          break;
 80079e6:	e03b      	b.n	8007a60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00b      	beq.n	8007a0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	7c12      	ldrb	r2, [r2, #16]
 8007a00:	f107 0108 	add.w	r1, r7, #8
 8007a04:	4610      	mov	r0, r2
 8007a06:	4798      	blx	r3
 8007a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a0a:	e029      	b.n	8007a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa2d 	bl	8007e6e <USBD_CtlError>
            err++;
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	3301      	adds	r3, #1
 8007a18:	72fb      	strb	r3, [r7, #11]
          break;
 8007a1a:	e021      	b.n	8007a60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	7c12      	ldrb	r2, [r2, #16]
 8007a34:	f107 0108 	add.w	r1, r7, #8
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4798      	blx	r3
 8007a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a3e:	e00f      	b.n	8007a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa13 	bl	8007e6e <USBD_CtlError>
            err++;
 8007a48:	7afb      	ldrb	r3, [r7, #11]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a4e:	e007      	b.n	8007a60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa0b 	bl	8007e6e <USBD_CtlError>
          err++;
 8007a58:	7afb      	ldrb	r3, [r7, #11]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007a5e:	e038      	b.n	8007ad2 <USBD_GetDescriptor+0x286>
 8007a60:	e037      	b.n	8007ad2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7c1b      	ldrb	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d109      	bne.n	8007a7e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a72:	f107 0208 	add.w	r2, r7, #8
 8007a76:	4610      	mov	r0, r2
 8007a78:	4798      	blx	r3
 8007a7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a7c:	e029      	b.n	8007ad2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f9f4 	bl	8007e6e <USBD_CtlError>
        err++;
 8007a86:	7afb      	ldrb	r3, [r7, #11]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a8c:	e021      	b.n	8007ad2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	7c1b      	ldrb	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10d      	bne.n	8007ab2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9e:	f107 0208 	add.w	r2, r7, #8
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4798      	blx	r3
 8007aa6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	2207      	movs	r2, #7
 8007aae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ab0:	e00f      	b.n	8007ad2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f9da 	bl	8007e6e <USBD_CtlError>
        err++;
 8007aba:	7afb      	ldrb	r3, [r7, #11]
 8007abc:	3301      	adds	r3, #1
 8007abe:	72fb      	strb	r3, [r7, #11]
      break;
 8007ac0:	e007      	b.n	8007ad2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f9d2 	bl	8007e6e <USBD_CtlError>
      err++;
 8007aca:	7afb      	ldrb	r3, [r7, #11]
 8007acc:	3301      	adds	r3, #1
 8007ace:	72fb      	strb	r3, [r7, #11]
      break;
 8007ad0:	bf00      	nop
  }

  if (err != 0U)
 8007ad2:	7afb      	ldrb	r3, [r7, #11]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d11c      	bne.n	8007b12 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ad8:	893b      	ldrh	r3, [r7, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d011      	beq.n	8007b02 <USBD_GetDescriptor+0x2b6>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	88db      	ldrh	r3, [r3, #6]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00d      	beq.n	8007b02 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	88da      	ldrh	r2, [r3, #6]
 8007aea:	893b      	ldrh	r3, [r7, #8]
 8007aec:	4293      	cmp	r3, r2
 8007aee:	bf28      	it	cs
 8007af0:	4613      	movcs	r3, r2
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007af6:	893b      	ldrh	r3, [r7, #8]
 8007af8:	461a      	mov	r2, r3
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fa21 	bl	8007f44 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	88db      	ldrh	r3, [r3, #6]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa78 	bl	8008000 <USBD_CtlSendStatus>
 8007b10:	e000      	b.n	8007b14 <USBD_GetDescriptor+0x2c8>
    return;
 8007b12:	bf00      	nop
    }
  }
}
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop

08007b1c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	889b      	ldrh	r3, [r3, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d130      	bne.n	8007b90 <USBD_SetAddress+0x74>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	88db      	ldrh	r3, [r3, #6]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d12c      	bne.n	8007b90 <USBD_SetAddress+0x74>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	885b      	ldrh	r3, [r3, #2]
 8007b3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b3c:	d828      	bhi.n	8007b90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	885b      	ldrh	r3, [r3, #2]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d104      	bne.n	8007b5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f989 	bl	8007e6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5c:	e01d      	b.n	8007b9a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7bfa      	ldrb	r2, [r7, #15]
 8007b62:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fe6e 	bl	800884c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fa45 	bl	8008000 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b84:	e009      	b.n	8007b9a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8e:	e004      	b.n	8007b9a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f96b 	bl	8007e6e <USBD_CtlError>
  }
}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
	...

08007ba4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	885b      	ldrh	r3, [r3, #2]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	4b41      	ldr	r3, [pc, #260]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007bb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bb8:	4b40      	ldr	r3, [pc, #256]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d904      	bls.n	8007bca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f953 	bl	8007e6e <USBD_CtlError>
 8007bc8:	e075      	b.n	8007cb6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d002      	beq.n	8007bda <USBD_SetConfig+0x36>
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d023      	beq.n	8007c20 <USBD_SetConfig+0x7c>
 8007bd8:	e062      	b.n	8007ca0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007bda:	4b38      	ldr	r3, [pc, #224]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d01a      	beq.n	8007c18 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007be2:	4b36      	ldr	r3, [pc, #216]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2203      	movs	r2, #3
 8007bf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bf4:	4b31      	ldr	r3, [pc, #196]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff f9e4 	bl	8006fc8 <USBD_SetClassConfig>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d104      	bne.n	8007c10 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f930 	bl	8007e6e <USBD_CtlError>
            return;
 8007c0e:	e052      	b.n	8007cb6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f9f5 	bl	8008000 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c16:	e04e      	b.n	8007cb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f9f1 	bl	8008000 <USBD_CtlSendStatus>
        break;
 8007c1e:	e04a      	b.n	8007cb6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c20:	4b26      	ldr	r3, [pc, #152]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d112      	bne.n	8007c4e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007c30:	4b22      	ldr	r3, [pc, #136]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c3a:	4b20      	ldr	r3, [pc, #128]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff f9e0 	bl	8007006 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f9da 	bl	8008000 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c4c:	e033      	b.n	8007cb6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d01d      	beq.n	8007c98 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff f9ce 	bl	8007006 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007c6a:	4b14      	ldr	r3, [pc, #80]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c74:	4b11      	ldr	r3, [pc, #68]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff f9a4 	bl	8006fc8 <USBD_SetClassConfig>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d104      	bne.n	8007c90 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f8f0 	bl	8007e6e <USBD_CtlError>
            return;
 8007c8e:	e012      	b.n	8007cb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f9b5 	bl	8008000 <USBD_CtlSendStatus>
        break;
 8007c96:	e00e      	b.n	8007cb6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f9b1 	bl	8008000 <USBD_CtlSendStatus>
        break;
 8007c9e:	e00a      	b.n	8007cb6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f8e3 	bl	8007e6e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ca8:	4b04      	ldr	r3, [pc, #16]	@ (8007cbc <USBD_SetConfig+0x118>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff f9a9 	bl	8007006 <USBD_ClrClassConfig>
        break;
 8007cb4:	bf00      	nop
    }
  }
}
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	20000254 	.word	0x20000254

08007cc0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	88db      	ldrh	r3, [r3, #6]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d004      	beq.n	8007cdc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f8ca 	bl	8007e6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cda:	e022      	b.n	8007d22 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	dc02      	bgt.n	8007cec <USBD_GetConfig+0x2c>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	dc03      	bgt.n	8007cf2 <USBD_GetConfig+0x32>
 8007cea:	e015      	b.n	8007d18 <USBD_GetConfig+0x58>
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d00b      	beq.n	8007d08 <USBD_GetConfig+0x48>
 8007cf0:	e012      	b.n	8007d18 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f91f 	bl	8007f44 <USBD_CtlSendData>
        break;
 8007d06:	e00c      	b.n	8007d22 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f917 	bl	8007f44 <USBD_CtlSendData>
        break;
 8007d16:	e004      	b.n	8007d22 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8a7 	bl	8007e6e <USBD_CtlError>
        break;
 8007d20:	bf00      	nop
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d81e      	bhi.n	8007d7e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	88db      	ldrh	r3, [r3, #6]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d004      	beq.n	8007d52 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f88f 	bl	8007e6e <USBD_CtlError>
        break;
 8007d50:	e01a      	b.n	8007d88 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f043 0202 	orr.w	r2, r3, #2
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	330c      	adds	r3, #12
 8007d72:	2202      	movs	r2, #2
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f8e4 	bl	8007f44 <USBD_CtlSendData>
      break;
 8007d7c:	e004      	b.n	8007d88 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f874 	bl	8007e6e <USBD_CtlError>
      break;
 8007d86:	bf00      	nop
  }
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	885b      	ldrh	r3, [r3, #2]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d106      	bne.n	8007db0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f928 	bl	8008000 <USBD_CtlSendStatus>
  }
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d80b      	bhi.n	8007de6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	885b      	ldrh	r3, [r3, #2]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d10c      	bne.n	8007df0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f90e 	bl	8008000 <USBD_CtlSendStatus>
      }
      break;
 8007de4:	e004      	b.n	8007df0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f840 	bl	8007e6e <USBD_CtlError>
      break;
 8007dee:	e000      	b.n	8007df2 <USBD_ClrFeature+0x3a>
      break;
 8007df0:	bf00      	nop
  }
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	781a      	ldrb	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	785a      	ldrb	r2, [r3, #1]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	3302      	adds	r3, #2
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	3303      	adds	r3, #3
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4413      	add	r3, r2
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	3304      	adds	r3, #4
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	3305      	adds	r3, #5
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	4413      	add	r3, r2
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	3306      	adds	r3, #6
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	3307      	adds	r3, #7
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	021b      	lsls	r3, r3, #8
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	80da      	strh	r2, [r3, #6]

}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b082      	sub	sp, #8
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007e78:	2180      	movs	r1, #128	@ 0x80
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fc7c 	bl	8008778 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e80:	2100      	movs	r1, #0
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fc78 	bl	8008778 <USBD_LL_StallEP>
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d032      	beq.n	8007f0c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 f834 	bl	8007f14 <USBD_GetLen>
 8007eac:	4603      	mov	r3, r0
 8007eae:	3301      	adds	r3, #1
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	75fa      	strb	r2, [r7, #23]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	7812      	ldrb	r2, [r2, #0]
 8007eca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	75fa      	strb	r2, [r7, #23]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	2203      	movs	r2, #3
 8007eda:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007edc:	e012      	b.n	8007f04 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	60fa      	str	r2, [r7, #12]
 8007ee4:	7dfa      	ldrb	r2, [r7, #23]
 8007ee6:	1c51      	adds	r1, r2, #1
 8007ee8:	75f9      	strb	r1, [r7, #23]
 8007eea:	4611      	mov	r1, r2
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	440a      	add	r2, r1
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	75fa      	strb	r2, [r7, #23]
 8007efa:	461a      	mov	r2, r3
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	4413      	add	r3, r2
 8007f00:	2200      	movs	r2, #0
 8007f02:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e8      	bne.n	8007ede <USBD_GetString+0x4e>
    }
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f20:	e005      	b.n	8007f2e <USBD_GetLen+0x1a>
  {
    len++;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	3301      	adds	r3, #1
 8007f26:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f5      	bne.n	8007f22 <USBD_GetLen+0xe>
  }

  return len;
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2202      	movs	r2, #2
 8007f56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007f5a:	88fa      	ldrh	r2, [r7, #6]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f60:	88fa      	ldrh	r2, [r7, #6]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 fc8c 	bl	800888a <USBD_LL_Transmit>

  return USBD_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	4613      	mov	r3, r2
 8007f88:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f8a:	88fb      	ldrh	r3, [r7, #6]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	2100      	movs	r1, #0
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fc7a 	bl	800888a <USBD_LL_Transmit>

  return USBD_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2203      	movs	r2, #3
 8007fb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007fb6:	88fa      	ldrh	r2, [r7, #6]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007fbe:	88fa      	ldrh	r2, [r7, #6]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	2100      	movs	r1, #0
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 fc7f 	bl	80088d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	2100      	movs	r1, #0
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fc6d 	bl	80088d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2204      	movs	r2, #4
 800800c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008010:	2300      	movs	r3, #0
 8008012:	2200      	movs	r2, #0
 8008014:	2100      	movs	r1, #0
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fc37 	bl	800888a <USBD_LL_Transmit>

  return USBD_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2205      	movs	r2, #5
 8008032:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008036:	2300      	movs	r3, #0
 8008038:	2200      	movs	r2, #0
 800803a:	2100      	movs	r1, #0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fc47 	bl	80088d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008050:	2200      	movs	r2, #0
 8008052:	4912      	ldr	r1, [pc, #72]	@ (800809c <MX_USB_DEVICE_Init+0x50>)
 8008054:	4812      	ldr	r0, [pc, #72]	@ (80080a0 <MX_USB_DEVICE_Init+0x54>)
 8008056:	f7fe ff5b 	bl	8006f10 <USBD_Init>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008060:	f7f8 fa4e 	bl	8000500 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008064:	490f      	ldr	r1, [pc, #60]	@ (80080a4 <MX_USB_DEVICE_Init+0x58>)
 8008066:	480e      	ldr	r0, [pc, #56]	@ (80080a0 <MX_USB_DEVICE_Init+0x54>)
 8008068:	f7fe ff7d 	bl	8006f66 <USBD_RegisterClass>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008072:	f7f8 fa45 	bl	8000500 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008076:	490c      	ldr	r1, [pc, #48]	@ (80080a8 <MX_USB_DEVICE_Init+0x5c>)
 8008078:	4809      	ldr	r0, [pc, #36]	@ (80080a0 <MX_USB_DEVICE_Init+0x54>)
 800807a:	f7fe feab 	bl	8006dd4 <USBD_CDC_RegisterInterface>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008084:	f7f8 fa3c 	bl	8000500 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008088:	4805      	ldr	r0, [pc, #20]	@ (80080a0 <MX_USB_DEVICE_Init+0x54>)
 800808a:	f7fe ff86 	bl	8006f9a <USBD_Start>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008094:	f7f8 fa34 	bl	8000500 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008098:	bf00      	nop
 800809a:	bd80      	pop	{r7, pc}
 800809c:	2000012c 	.word	0x2000012c
 80080a0:	20000258 	.word	0x20000258
 80080a4:	20000018 	.word	0x20000018
 80080a8:	2000011c 	.word	0x2000011c

080080ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80080b0:	2200      	movs	r2, #0
 80080b2:	4905      	ldr	r1, [pc, #20]	@ (80080c8 <CDC_Init_FS+0x1c>)
 80080b4:	4805      	ldr	r0, [pc, #20]	@ (80080cc <CDC_Init_FS+0x20>)
 80080b6:	f7fe fea4 	bl	8006e02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80080ba:	4905      	ldr	r1, [pc, #20]	@ (80080d0 <CDC_Init_FS+0x24>)
 80080bc:	4803      	ldr	r0, [pc, #12]	@ (80080cc <CDC_Init_FS+0x20>)
 80080be:	f7fe feba 	bl	8006e36 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	2000091c 	.word	0x2000091c
 80080cc:	20000258 	.word	0x20000258
 80080d0:	2000051c 	.word	0x2000051c

080080d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080da:	4618      	mov	r0, r3
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	6039      	str	r1, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
 80080f0:	4613      	mov	r3, r2
 80080f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080f4:	79fb      	ldrb	r3, [r7, #7]
 80080f6:	2b23      	cmp	r3, #35	@ 0x23
 80080f8:	d84a      	bhi.n	8008190 <CDC_Control_FS+0xac>
 80080fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008100 <CDC_Control_FS+0x1c>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008191 	.word	0x08008191
 8008104:	08008191 	.word	0x08008191
 8008108:	08008191 	.word	0x08008191
 800810c:	08008191 	.word	0x08008191
 8008110:	08008191 	.word	0x08008191
 8008114:	08008191 	.word	0x08008191
 8008118:	08008191 	.word	0x08008191
 800811c:	08008191 	.word	0x08008191
 8008120:	08008191 	.word	0x08008191
 8008124:	08008191 	.word	0x08008191
 8008128:	08008191 	.word	0x08008191
 800812c:	08008191 	.word	0x08008191
 8008130:	08008191 	.word	0x08008191
 8008134:	08008191 	.word	0x08008191
 8008138:	08008191 	.word	0x08008191
 800813c:	08008191 	.word	0x08008191
 8008140:	08008191 	.word	0x08008191
 8008144:	08008191 	.word	0x08008191
 8008148:	08008191 	.word	0x08008191
 800814c:	08008191 	.word	0x08008191
 8008150:	08008191 	.word	0x08008191
 8008154:	08008191 	.word	0x08008191
 8008158:	08008191 	.word	0x08008191
 800815c:	08008191 	.word	0x08008191
 8008160:	08008191 	.word	0x08008191
 8008164:	08008191 	.word	0x08008191
 8008168:	08008191 	.word	0x08008191
 800816c:	08008191 	.word	0x08008191
 8008170:	08008191 	.word	0x08008191
 8008174:	08008191 	.word	0x08008191
 8008178:	08008191 	.word	0x08008191
 800817c:	08008191 	.word	0x08008191
 8008180:	08008191 	.word	0x08008191
 8008184:	08008191 	.word	0x08008191
 8008188:	08008191 	.word	0x08008191
 800818c:	08008191 	.word	0x08008191
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008190:	bf00      	nop
  }

  return (USBD_OK);
 8008192:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4805      	ldr	r0, [pc, #20]	@ (80081c4 <CDC_Receive_FS+0x24>)
 80081ae:	f7fe fe42 	bl	8006e36 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80081b2:	4804      	ldr	r0, [pc, #16]	@ (80081c4 <CDC_Receive_FS+0x24>)
 80081b4:	f7fe fe82 	bl	8006ebc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80081b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000258 	.word	0x20000258

080081c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008210 <CDC_Transmit_FS+0x48>)
 80081da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e00b      	b.n	8008206 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80081ee:	887b      	ldrh	r3, [r7, #2]
 80081f0:	461a      	mov	r2, r3
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	4806      	ldr	r0, [pc, #24]	@ (8008210 <CDC_Transmit_FS+0x48>)
 80081f6:	f7fe fe04 	bl	8006e02 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80081fa:	4805      	ldr	r0, [pc, #20]	@ (8008210 <CDC_Transmit_FS+0x48>)
 80081fc:	f7fe fe2f 	bl	8006e5e <USBD_CDC_TransmitPacket>
 8008200:	4603      	mov	r3, r0
 8008202:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20000258 	.word	0x20000258

08008214 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	6039      	str	r1, [r7, #0]
 800821e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2212      	movs	r2, #18
 8008224:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008226:	4b03      	ldr	r3, [pc, #12]	@ (8008234 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	20000148 	.word	0x20000148

08008238 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2204      	movs	r2, #4
 8008248:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800824a:	4b03      	ldr	r3, [pc, #12]	@ (8008258 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	2000015c 	.word	0x2000015c

0800825c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d105      	bne.n	800827a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	4907      	ldr	r1, [pc, #28]	@ (8008290 <USBD_FS_ProductStrDescriptor+0x34>)
 8008272:	4808      	ldr	r0, [pc, #32]	@ (8008294 <USBD_FS_ProductStrDescriptor+0x38>)
 8008274:	f7ff fe0c 	bl	8007e90 <USBD_GetString>
 8008278:	e004      	b.n	8008284 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	4904      	ldr	r1, [pc, #16]	@ (8008290 <USBD_FS_ProductStrDescriptor+0x34>)
 800827e:	4805      	ldr	r0, [pc, #20]	@ (8008294 <USBD_FS_ProductStrDescriptor+0x38>)
 8008280:	f7ff fe06 	bl	8007e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008284:	4b02      	ldr	r3, [pc, #8]	@ (8008290 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000d1c 	.word	0x20000d1c
 8008294:	08008a60 	.word	0x08008a60

08008298 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	4904      	ldr	r1, [pc, #16]	@ (80082b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082a8:	4804      	ldr	r0, [pc, #16]	@ (80082bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082aa:	f7ff fdf1 	bl	8007e90 <USBD_GetString>
  return USBD_StrDesc;
 80082ae:	4b02      	ldr	r3, [pc, #8]	@ (80082b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000d1c 	.word	0x20000d1c
 80082bc:	08008a78 	.word	0x08008a78

080082c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	221a      	movs	r2, #26
 80082d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082d2:	f000 f843 	bl	800835c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082d6:	4b02      	ldr	r3, [pc, #8]	@ (80082e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20000160 	.word	0x20000160

080082e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	6039      	str	r1, [r7, #0]
 80082ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d105      	bne.n	8008302 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	4907      	ldr	r1, [pc, #28]	@ (8008318 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082fa:	4808      	ldr	r0, [pc, #32]	@ (800831c <USBD_FS_ConfigStrDescriptor+0x38>)
 80082fc:	f7ff fdc8 	bl	8007e90 <USBD_GetString>
 8008300:	e004      	b.n	800830c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	4904      	ldr	r1, [pc, #16]	@ (8008318 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008306:	4805      	ldr	r0, [pc, #20]	@ (800831c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008308:	f7ff fdc2 	bl	8007e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800830c:	4b02      	ldr	r3, [pc, #8]	@ (8008318 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20000d1c 	.word	0x20000d1c
 800831c:	08008a8c 	.word	0x08008a8c

08008320 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	6039      	str	r1, [r7, #0]
 800832a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d105      	bne.n	800833e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	4907      	ldr	r1, [pc, #28]	@ (8008354 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008336:	4808      	ldr	r0, [pc, #32]	@ (8008358 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008338:	f7ff fdaa 	bl	8007e90 <USBD_GetString>
 800833c:	e004      	b.n	8008348 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	4904      	ldr	r1, [pc, #16]	@ (8008354 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008342:	4805      	ldr	r0, [pc, #20]	@ (8008358 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008344:	f7ff fda4 	bl	8007e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008348:	4b02      	ldr	r3, [pc, #8]	@ (8008354 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20000d1c 	.word	0x20000d1c
 8008358:	08008a98 	.word	0x08008a98

0800835c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008362:	4b0f      	ldr	r3, [pc, #60]	@ (80083a0 <Get_SerialNum+0x44>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008368:	4b0e      	ldr	r3, [pc, #56]	@ (80083a4 <Get_SerialNum+0x48>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800836e:	4b0e      	ldr	r3, [pc, #56]	@ (80083a8 <Get_SerialNum+0x4c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4413      	add	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d009      	beq.n	8008396 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008382:	2208      	movs	r2, #8
 8008384:	4909      	ldr	r1, [pc, #36]	@ (80083ac <Get_SerialNum+0x50>)
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 f814 	bl	80083b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800838c:	2204      	movs	r2, #4
 800838e:	4908      	ldr	r1, [pc, #32]	@ (80083b0 <Get_SerialNum+0x54>)
 8008390:	68b8      	ldr	r0, [r7, #8]
 8008392:	f000 f80f 	bl	80083b4 <IntToUnicode>
  }
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	1ffff7ac 	.word	0x1ffff7ac
 80083a4:	1ffff7b0 	.word	0x1ffff7b0
 80083a8:	1ffff7b4 	.word	0x1ffff7b4
 80083ac:	20000162 	.word	0x20000162
 80083b0:	20000172 	.word	0x20000172

080083b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	4613      	mov	r3, r2
 80083c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]
 80083ca:	e027      	b.n	800841c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	0f1b      	lsrs	r3, r3, #28
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	d80b      	bhi.n	80083ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	0f1b      	lsrs	r3, r3, #28
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	005b      	lsls	r3, r3, #1
 80083de:	4619      	mov	r1, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	440b      	add	r3, r1
 80083e4:	3230      	adds	r2, #48	@ 0x30
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	e00a      	b.n	8008402 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	0f1b      	lsrs	r3, r3, #28
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	4619      	mov	r1, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	440b      	add	r3, r1
 80083fc:	3237      	adds	r2, #55	@ 0x37
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	011b      	lsls	r3, r3, #4
 8008406:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008408:	7dfb      	ldrb	r3, [r7, #23]
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	3301      	adds	r3, #1
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	4413      	add	r3, r2
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	3301      	adds	r3, #1
 800841a:	75fb      	strb	r3, [r7, #23]
 800841c:	7dfa      	ldrb	r2, [r7, #23]
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	429a      	cmp	r2, r3
 8008422:	d3d3      	bcc.n	80083cc <IntToUnicode+0x18>
  }
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	371c      	adds	r7, #28
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
	...

08008434 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	@ 0x28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800843c:	f107 0314 	add.w	r3, r7, #20
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	605a      	str	r2, [r3, #4]
 8008446:	609a      	str	r2, [r3, #8]
 8008448:	60da      	str	r2, [r3, #12]
 800844a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a1c      	ldr	r2, [pc, #112]	@ (80084c4 <HAL_PCD_MspInit+0x90>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d131      	bne.n	80084ba <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008456:	4b1c      	ldr	r3, [pc, #112]	@ (80084c8 <HAL_PCD_MspInit+0x94>)
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	4a1b      	ldr	r2, [pc, #108]	@ (80084c8 <HAL_PCD_MspInit+0x94>)
 800845c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008460:	6153      	str	r3, [r2, #20]
 8008462:	4b19      	ldr	r3, [pc, #100]	@ (80084c8 <HAL_PCD_MspInit+0x94>)
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846a:	613b      	str	r3, [r7, #16]
 800846c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800846e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008474:	2302      	movs	r3, #2
 8008476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008478:	2300      	movs	r3, #0
 800847a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800847c:	2303      	movs	r3, #3
 800847e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8008480:	230e      	movs	r3, #14
 8008482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008484:	f107 0314 	add.w	r3, r7, #20
 8008488:	4619      	mov	r1, r3
 800848a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800848e:	f7f8 faf9 	bl	8000a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008492:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <HAL_PCD_MspInit+0x94>)
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	4a0c      	ldr	r2, [pc, #48]	@ (80084c8 <HAL_PCD_MspInit+0x94>)
 8008498:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800849c:	61d3      	str	r3, [r2, #28]
 800849e:	4b0a      	ldr	r3, [pc, #40]	@ (80084c8 <HAL_PCD_MspInit+0x94>)
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80084aa:	2200      	movs	r2, #0
 80084ac:	2100      	movs	r1, #0
 80084ae:	2014      	movs	r0, #20
 80084b0:	f7f8 fab1 	bl	8000a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80084b4:	2014      	movs	r0, #20
 80084b6:	f7f8 faca 	bl	8000a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80084ba:	bf00      	nop
 80084bc:	3728      	adds	r7, #40	@ 0x28
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	40005c00 	.word	0x40005c00
 80084c8:	40021000 	.word	0x40021000

080084cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80084e0:	4619      	mov	r1, r3
 80084e2:	4610      	mov	r0, r2
 80084e4:	f7fe fda2 	bl	800702c <USBD_LL_SetupStage>
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8008502:	78fa      	ldrb	r2, [r7, #3]
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	4613      	mov	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	440b      	add	r3, r1
 8008510:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	4619      	mov	r1, r3
 800851a:	f7fe fdd4 	bl	80070c6 <USBD_LL_DataOutStage>
}
 800851e:	bf00      	nop
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	460b      	mov	r3, r1
 8008530:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8008538:	78fa      	ldrb	r2, [r7, #3]
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	4613      	mov	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	440b      	add	r3, r1
 8008546:	3324      	adds	r3, #36	@ 0x24
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	4619      	mov	r1, r3
 800854e:	f7fe fe2b 	bl	80071a8 <USBD_LL_DataInStage>
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe ff3e 	bl	80073ea <USBD_LL_SOF>
}
 800856e:	bf00      	nop
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800857e:	2301      	movs	r3, #1
 8008580:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	795b      	ldrb	r3, [r3, #5]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d001      	beq.n	800858e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800858a:	f7f7 ffb9 	bl	8000500 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8008594:	7bfa      	ldrb	r2, [r7, #15]
 8008596:	4611      	mov	r1, r2
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe feeb 	bl	8007374 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe fea4 	bl	80072f2 <USBD_LL_Reset>
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
	...

080085b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fee6 	bl	8007394 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	7a5b      	ldrb	r3, [r3, #9]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d005      	beq.n	80085dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085d0:	4b04      	ldr	r3, [pc, #16]	@ (80085e4 <HAL_PCD_SuspendCallback+0x30>)
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	4a03      	ldr	r2, [pc, #12]	@ (80085e4 <HAL_PCD_SuspendCallback+0x30>)
 80085d6:	f043 0306 	orr.w	r3, r3, #6
 80085da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	e000ed00 	.word	0xe000ed00

080085e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fee1 	bl	80073be <USBD_LL_Resume>
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800860c:	4a28      	ldr	r2, [pc, #160]	@ (80086b0 <USBD_LL_Init+0xac>)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a26      	ldr	r2, [pc, #152]	@ (80086b0 <USBD_LL_Init+0xac>)
 8008618:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800861c:	4b24      	ldr	r3, [pc, #144]	@ (80086b0 <USBD_LL_Init+0xac>)
 800861e:	4a25      	ldr	r2, [pc, #148]	@ (80086b4 <USBD_LL_Init+0xb0>)
 8008620:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008622:	4b23      	ldr	r3, [pc, #140]	@ (80086b0 <USBD_LL_Init+0xac>)
 8008624:	2208      	movs	r2, #8
 8008626:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008628:	4b21      	ldr	r3, [pc, #132]	@ (80086b0 <USBD_LL_Init+0xac>)
 800862a:	2202      	movs	r2, #2
 800862c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800862e:	4b20      	ldr	r3, [pc, #128]	@ (80086b0 <USBD_LL_Init+0xac>)
 8008630:	2202      	movs	r2, #2
 8008632:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008634:	4b1e      	ldr	r3, [pc, #120]	@ (80086b0 <USBD_LL_Init+0xac>)
 8008636:	2200      	movs	r2, #0
 8008638:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800863a:	4b1d      	ldr	r3, [pc, #116]	@ (80086b0 <USBD_LL_Init+0xac>)
 800863c:	2200      	movs	r2, #0
 800863e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008640:	481b      	ldr	r0, [pc, #108]	@ (80086b0 <USBD_LL_Init+0xac>)
 8008642:	f7f8 fce3 	bl	800100c <HAL_PCD_Init>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800864c:	f7f7 ff58 	bl	8000500 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008656:	2318      	movs	r3, #24
 8008658:	2200      	movs	r2, #0
 800865a:	2100      	movs	r1, #0
 800865c:	f7fa f95c 	bl	8002918 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008666:	2358      	movs	r3, #88	@ 0x58
 8008668:	2200      	movs	r2, #0
 800866a:	2180      	movs	r1, #128	@ 0x80
 800866c:	f7fa f954 	bl	8002918 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008676:	23c0      	movs	r3, #192	@ 0xc0
 8008678:	2200      	movs	r2, #0
 800867a:	2181      	movs	r1, #129	@ 0x81
 800867c:	f7fa f94c 	bl	8002918 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008686:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800868a:	2200      	movs	r2, #0
 800868c:	2101      	movs	r1, #1
 800868e:	f7fa f943 	bl	8002918 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008698:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800869c:	2200      	movs	r2, #0
 800869e:	2182      	movs	r1, #130	@ 0x82
 80086a0:	f7fa f93a 	bl	8002918 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000f1c 	.word	0x20000f1c
 80086b4:	40005c00 	.word	0x40005c00

080086b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7f8 fd63 	bl	800119a <HAL_PCD_Start>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f952 	bl	8008984 <USBD_Get_USB_Status>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	4608      	mov	r0, r1
 80086f8:	4611      	mov	r1, r2
 80086fa:	461a      	mov	r2, r3
 80086fc:	4603      	mov	r3, r0
 80086fe:	70fb      	strb	r3, [r7, #3]
 8008700:	460b      	mov	r3, r1
 8008702:	70bb      	strb	r3, [r7, #2]
 8008704:	4613      	mov	r3, r2
 8008706:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008716:	78bb      	ldrb	r3, [r7, #2]
 8008718:	883a      	ldrh	r2, [r7, #0]
 800871a:	78f9      	ldrb	r1, [r7, #3]
 800871c:	f7f8 fe5b 	bl	80013d6 <HAL_PCD_EP_Open>
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	4618      	mov	r0, r3
 8008728:	f000 f92c 	bl	8008984 <USBD_Get_USB_Status>
 800872c:	4603      	mov	r3, r0
 800872e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008730:	7bbb      	ldrb	r3, [r7, #14]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	460b      	mov	r3, r1
 8008744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008754:	78fa      	ldrb	r2, [r7, #3]
 8008756:	4611      	mov	r1, r2
 8008758:	4618      	mov	r0, r3
 800875a:	f7f8 fe99 	bl	8001490 <HAL_PCD_EP_Close>
 800875e:	4603      	mov	r3, r0
 8008760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	4618      	mov	r0, r3
 8008766:	f000 f90d 	bl	8008984 <USBD_Get_USB_Status>
 800876a:	4603      	mov	r3, r0
 800876c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008792:	78fa      	ldrb	r2, [r7, #3]
 8008794:	4611      	mov	r1, r2
 8008796:	4618      	mov	r0, r3
 8008798:	f7f8 ff42 	bl	8001620 <HAL_PCD_EP_SetStall>
 800879c:	4603      	mov	r3, r0
 800879e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 f8ee 	bl	8008984 <USBD_Get_USB_Status>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087d0:	78fa      	ldrb	r2, [r7, #3]
 80087d2:	4611      	mov	r1, r2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7f8 ff75 	bl	80016c4 <HAL_PCD_EP_ClrStall>
 80087da:	4603      	mov	r3, r0
 80087dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 f8cf 	bl	8008984 <USBD_Get_USB_Status>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008806:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800880c:	2b00      	cmp	r3, #0
 800880e:	da0b      	bge.n	8008828 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008816:	68f9      	ldr	r1, [r7, #12]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	440b      	add	r3, r1
 8008822:	3312      	adds	r3, #18
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	e00b      	b.n	8008840 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008828:	78fb      	ldrb	r3, [r7, #3]
 800882a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	4613      	mov	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	440b      	add	r3, r1
 800883a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800883e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f7f8 fd8f 	bl	800138e <HAL_PCD_SetAddress>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 f884 	bl	8008984 <USBD_Get_USB_Status>
 800887c:	4603      	mov	r3, r0
 800887e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008880:	7bbb      	ldrb	r3, [r7, #14]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b086      	sub	sp, #24
 800888e:	af00      	add	r7, sp, #0
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	461a      	mov	r2, r3
 8008896:	460b      	mov	r3, r1
 8008898:	72fb      	strb	r3, [r7, #11]
 800889a:	4613      	mov	r3, r2
 800889c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088ac:	893b      	ldrh	r3, [r7, #8]
 80088ae:	7af9      	ldrb	r1, [r7, #11]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	f7f8 fe7e 	bl	80015b2 <HAL_PCD_EP_Transmit>
 80088b6:	4603      	mov	r3, r0
 80088b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 f861 	bl	8008984 <USBD_Get_USB_Status>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	607a      	str	r2, [r7, #4]
 80088da:	461a      	mov	r2, r3
 80088dc:	460b      	mov	r3, r1
 80088de:	72fb      	strb	r3, [r7, #11]
 80088e0:	4613      	mov	r3, r2
 80088e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088f2:	893b      	ldrh	r3, [r7, #8]
 80088f4:	7af9      	ldrb	r1, [r7, #11]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	f7f8 fe12 	bl	8001520 <HAL_PCD_EP_Receive>
 80088fc:	4603      	mov	r3, r0
 80088fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f83e 	bl	8008984 <USBD_Get_USB_Status>
 8008908:	4603      	mov	r3, r0
 800890a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800890c:	7dbb      	ldrb	r3, [r7, #22]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b082      	sub	sp, #8
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008928:	78fa      	ldrb	r2, [r7, #3]
 800892a:	4611      	mov	r1, r2
 800892c:	4618      	mov	r0, r3
 800892e:	f7f8 fe28 	bl	8001582 <HAL_PCD_EP_GetRxCount>
 8008932:	4603      	mov	r3, r0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008944:	4b03      	ldr	r3, [pc, #12]	@ (8008954 <USBD_static_malloc+0x18>)
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	200011f0 	.word	0x200011f0

08008958 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]

}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	2b03      	cmp	r3, #3
 8008996:	d817      	bhi.n	80089c8 <USBD_Get_USB_Status+0x44>
 8008998:	a201      	add	r2, pc, #4	@ (adr r2, 80089a0 <USBD_Get_USB_Status+0x1c>)
 800899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899e:	bf00      	nop
 80089a0:	080089b1 	.word	0x080089b1
 80089a4:	080089b7 	.word	0x080089b7
 80089a8:	080089bd 	.word	0x080089bd
 80089ac:	080089c3 	.word	0x080089c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73fb      	strb	r3, [r7, #15]
    break;
 80089b4:	e00b      	b.n	80089ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089b6:	2302      	movs	r3, #2
 80089b8:	73fb      	strb	r3, [r7, #15]
    break;
 80089ba:	e008      	b.n	80089ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089bc:	2301      	movs	r3, #1
 80089be:	73fb      	strb	r3, [r7, #15]
    break;
 80089c0:	e005      	b.n	80089ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089c2:	2302      	movs	r3, #2
 80089c4:	73fb      	strb	r3, [r7, #15]
    break;
 80089c6:	e002      	b.n	80089ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089c8:	2302      	movs	r3, #2
 80089ca:	73fb      	strb	r3, [r7, #15]
    break;
 80089cc:	bf00      	nop
  }
  return usb_status;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <memset>:
 80089dc:	4402      	add	r2, r0
 80089de:	4603      	mov	r3, r0
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d100      	bne.n	80089e6 <memset+0xa>
 80089e4:	4770      	bx	lr
 80089e6:	f803 1b01 	strb.w	r1, [r3], #1
 80089ea:	e7f9      	b.n	80089e0 <memset+0x4>

080089ec <__libc_init_array>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	4d0d      	ldr	r5, [pc, #52]	@ (8008a24 <__libc_init_array+0x38>)
 80089f0:	4c0d      	ldr	r4, [pc, #52]	@ (8008a28 <__libc_init_array+0x3c>)
 80089f2:	1b64      	subs	r4, r4, r5
 80089f4:	10a4      	asrs	r4, r4, #2
 80089f6:	2600      	movs	r6, #0
 80089f8:	42a6      	cmp	r6, r4
 80089fa:	d109      	bne.n	8008a10 <__libc_init_array+0x24>
 80089fc:	4d0b      	ldr	r5, [pc, #44]	@ (8008a2c <__libc_init_array+0x40>)
 80089fe:	4c0c      	ldr	r4, [pc, #48]	@ (8008a30 <__libc_init_array+0x44>)
 8008a00:	f000 f818 	bl	8008a34 <_init>
 8008a04:	1b64      	subs	r4, r4, r5
 8008a06:	10a4      	asrs	r4, r4, #2
 8008a08:	2600      	movs	r6, #0
 8008a0a:	42a6      	cmp	r6, r4
 8008a0c:	d105      	bne.n	8008a1a <__libc_init_array+0x2e>
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a14:	4798      	blx	r3
 8008a16:	3601      	adds	r6, #1
 8008a18:	e7ee      	b.n	80089f8 <__libc_init_array+0xc>
 8008a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a1e:	4798      	blx	r3
 8008a20:	3601      	adds	r6, #1
 8008a22:	e7f2      	b.n	8008a0a <__libc_init_array+0x1e>
 8008a24:	08008ad8 	.word	0x08008ad8
 8008a28:	08008ad8 	.word	0x08008ad8
 8008a2c:	08008ad8 	.word	0x08008ad8
 8008a30:	08008adc 	.word	0x08008adc

08008a34 <_init>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr

08008a40 <_fini>:
 8008a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a42:	bf00      	nop
 8008a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a46:	bc08      	pop	{r3}
 8008a48:	469e      	mov	lr, r3
 8008a4a:	4770      	bx	lr
