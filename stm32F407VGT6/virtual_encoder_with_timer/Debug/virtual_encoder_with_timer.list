
virtual_encoder_with_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003ec8  08003ec8  00004ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f20  08003f20  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f20  08003f20  00004f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f28  08003f28  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f28  08003f28  00004f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f2c  08003f2c  00004f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f30  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          0000027c  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce94  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cb5  00000000  00000000  00011f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00013bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ab  00000000  00000000  00014830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002052a  00000000  00000000  000151db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e274  00000000  00000000  00035705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c970b  00000000  00000000  00043979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010d084  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003930  00000000  00000000  0010d0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  001109f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003eb0 	.word	0x08003eb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003eb0 	.word	0x08003eb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fb08 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f820 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f946 	bl	800080c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000580:	f000 f896 	bl	80006b0 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000584:	f000 f8e2 	bl	800074c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f916 	bl	80007b8 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800058c:	f000 f874 	bl	8000678 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000590:	4806      	ldr	r0, [pc, #24]	@ (80005ac <main+0x3c>)
 8000592:	f001 fb53 	bl	8001c3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000596:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <main+0x40>)
 8000598:	f001 fb50 	bl	8001c3c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	4905      	ldr	r1, [pc, #20]	@ (80005b4 <main+0x44>)
 80005a0:	4805      	ldr	r0, [pc, #20]	@ (80005b8 <main+0x48>)
 80005a2:	f002 f84c 	bl	800263e <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	bf00      	nop
 80005a8:	e7fd      	b.n	80005a6 <main+0x36>
 80005aa:	bf00      	nop
 80005ac:	20000078 	.word	0x20000078
 80005b0:	200000c0 	.word	0x200000c0
 80005b4:	20000186 	.word	0x20000186
 80005b8:	20000108 	.word	0x20000108

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	@ 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fff0 	bl	80035b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <SystemClock_Config+0xb4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a21      	ldr	r2, [pc, #132]	@ (8000670 <SystemClock_Config+0xb4>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <SystemClock_Config+0xb4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <SystemClock_Config+0xb8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1b      	ldr	r2, [pc, #108]	@ (8000674 <SystemClock_Config+0xb8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <SystemClock_Config+0xb8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fe5d 	bl	80012ec <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000638:	f000 f938 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000644:	23b0      	movs	r3, #176	@ 0xb0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f8c0 	bl	80017dc <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000662:	f000 f923 	bl	80008ac <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	201e      	movs	r0, #30
 8000682:	f000 fbce 	bl	8000e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000686:	201e      	movs	r0, #30
 8000688:	f000 fbe7 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2036      	movs	r0, #54	@ 0x36
 8000692:	f000 fbc6 	bl	8000e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000696:	2036      	movs	r0, #54	@ 0x36
 8000698:	f000 fbdf 	bl	8000e5a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2026      	movs	r0, #38	@ 0x26
 80006a2:	f000 fbbe 	bl	8000e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006a6:	2026      	movs	r0, #38	@ 0x26
 80006a8:	f000 fbd7 	bl	8000e5a <HAL_NVIC_EnableIRQ>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <MX_TIM4_Init+0x94>)
 80006ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000748 <MX_TIM4_Init+0x98>)
 80006d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000 - 1;
 80006d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <MX_TIM4_Init+0x94>)
 80006d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_TIM4_Init+0x94>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 - 1;
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_TIM4_Init+0x94>)
 80006e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e8:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_TIM4_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_TIM4_Init+0x94>)
 80006f0:	2280      	movs	r2, #128	@ 0x80
 80006f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80006f4:	4813      	ldr	r0, [pc, #76]	@ (8000744 <MX_TIM4_Init+0x94>)
 80006f6:	f001 fa51 	bl	8001b9c <HAL_TIM_Base_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000700:	f000 f8d4 	bl	80008ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4619      	mov	r1, r3
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <MX_TIM4_Init+0x94>)
 8000712:	f001 fbf3 	bl	8001efc <HAL_TIM_ConfigClockSource>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800071c:	f000 f8c6 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_TIM4_Init+0x94>)
 800072e:	f001 fe1b 	bl	8002368 <HAL_TIMEx_MasterConfigSynchronization>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000738:	f000 f8b8 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000078 	.word	0x20000078
 8000748:	40000800 	.word	0x40000800

0800074c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_TIM6_Init+0x64>)
 800075c:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <MX_TIM6_Init+0x68>)
 800075e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000 - 1;
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_TIM6_Init+0x64>)
 8000762:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000766:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_TIM6_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000 - 1;
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_TIM6_Init+0x64>)
 8000770:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000774:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_TIM6_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <MX_TIM6_Init+0x64>)
 800077e:	f001 fa0d 	bl	8001b9c <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000788:	f000 f890 	bl	80008ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_TIM6_Init+0x64>)
 800079a:	f001 fde5 	bl	8002368 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 f882 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000c0 	.word	0x200000c0
 80007b4:	40001000 	.word	0x40001000

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <MX_USART2_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f001 fe4a 	bl	8002488 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 f857 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000108 	.word	0x20000108
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_GPIO_Init+0x30>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a08      	ldr	r2, [pc, #32]	@ (800083c <MX_GPIO_Init+0x30>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_GPIO_Init+0x30>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a11      	ldr	r2, [pc, #68]	@ (8000894 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d105      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x1e>
    	virtual_encoder_count++;
 8000852:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	4a0f      	ldr	r2, [pc, #60]	@ (8000898 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800085a:	6013      	str	r3, [r2, #0]
    } else if (htim->Instance == TIM6) {
    	snprintf(buffer, sizeof(buffer), "COUNT:%ld\n", virtual_encoder_count);
    	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    }
}
 800085c:	e016      	b.n	800088c <HAL_TIM_PeriodElapsedCallback+0x4c>
    } else if (htim->Instance == TIM6) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a0e      	ldr	r2, [pc, #56]	@ (800089c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d111      	bne.n	800088c <HAL_TIM_PeriodElapsedCallback+0x4c>
    	snprintf(buffer, sizeof(buffer), "COUNT:%ld\n", virtual_encoder_count);
 8000868:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0c      	ldr	r2, [pc, #48]	@ (80008a0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800086e:	2132      	movs	r1, #50	@ 0x32
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000872:	f002 fe69 	bl	8003548 <sniprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000876:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000878:	f7ff fcaa 	bl	80001d0 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	4907      	ldr	r1, [pc, #28]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000886:	4808      	ldr	r0, [pc, #32]	@ (80008a8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000888:	f001 fe4e 	bl	8002528 <HAL_UART_Transmit>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40000800 	.word	0x40000800
 8000898:	20000150 	.word	0x20000150
 800089c:	40001000 	.word	0x40001000
 80008a0:	08003ec8 	.word	0x08003ec8
 80008a4:	20000154 	.word	0x20000154
 80008a8:	20000108 	.word	0x20000108

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <HAL_MspInit+0x4c>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	4a08      	ldr	r2, [pc, #32]	@ (8000904 <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a15      	ldr	r2, [pc, #84]	@ (800096c <HAL_TIM_Base_MspInit+0x64>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d10e      	bne.n	8000938 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_TIM_Base_MspInit+0x68>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a13      	ldr	r2, [pc, #76]	@ (8000970 <HAL_TIM_Base_MspInit+0x68>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <HAL_TIM_Base_MspInit+0x68>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000936:	e012      	b.n	800095e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0d      	ldr	r2, [pc, #52]	@ (8000974 <HAL_TIM_Base_MspInit+0x6c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d10d      	bne.n	800095e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <HAL_TIM_Base_MspInit+0x68>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	4a09      	ldr	r2, [pc, #36]	@ (8000970 <HAL_TIM_Base_MspInit+0x68>)
 800094c:	f043 0310 	orr.w	r3, r3, #16
 8000950:	6413      	str	r3, [r2, #64]	@ 0x40
 8000952:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <HAL_TIM_Base_MspInit+0x68>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	f003 0310 	and.w	r3, r3, #16
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40000800 	.word	0x40000800
 8000970:	40023800 	.word	0x40023800
 8000974:	40001000 	.word	0x40001000

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	@ (80009fc <HAL_UART_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12b      	bne.n	80009f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a17      	ldr	r2, [pc, #92]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a10      	ldr	r2, [pc, #64]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d2:	230c      	movs	r3, #12
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e2:	2307      	movs	r3, #7
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <HAL_UART_MspInit+0x8c>)
 80009ee:	f000 fae1 	bl	8000fb4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	@ 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020000 	.word	0x40020000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 f8e5 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <TIM4_IRQHandler+0x10>)
 8000a6e:	f001 f955 	bl	8001d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000078 	.word	0x20000078

08000a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <USART2_IRQHandler+0x10>)
 8000a82:	f001 fe01 	bl	8002688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000108 	.word	0x20000108

08000a90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <TIM6_DAC_IRQHandler+0x10>)
 8000a96:	f001 f941 	bl	8001d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000c0 	.word	0x200000c0

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f002 fd74 	bl	80035c0 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20020000 	.word	0x20020000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	20000188 	.word	0x20000188
 8000b0c:	200002d8 	.word	0x200002d8

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b38:	f7ff ffea 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f002 fd33 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fd03 	bl	8000570 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b78:	08003f30 	.word	0x08003f30
  ldr r2, =_sbss
 8000b7c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b80:	200002d8 	.word	0x200002d8

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	@ (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f92b 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fe7c 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f943 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f90b 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	2000018c 	.word	0x2000018c

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000018c 	.word	0x2000018c

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4907      	ldr	r1, [pc, #28]	@ (8000d08 <__NVIC_EnableIRQ+0x38>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	@ (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	@ (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	@ 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	@ 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff29 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff3e 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff8e 	bl	8000d60 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff31 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff feda 	bl	8000c54 <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d008      	beq.n	8000ec0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e052      	b.n	8000f66 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0216 	bic.w	r2, r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	695a      	ldr	r2, [r3, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ede:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d103      	bne.n	8000ef0 <HAL_DMA_Abort+0x62>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0208 	bic.w	r2, r2, #8
 8000efe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f10:	e013      	b.n	8000f3a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f12:	f7ff fe9f 	bl	8000c54 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	d90c      	bls.n	8000f3a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2220      	movs	r2, #32
 8000f24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e015      	b.n	8000f66 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e4      	bne.n	8000f12 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f4c:	223f      	movs	r2, #63	@ 0x3f
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d004      	beq.n	8000f8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2280      	movs	r2, #128	@ 0x80
 8000f86:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e00c      	b.n	8000fa6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2205      	movs	r2, #5
 8000f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	e16b      	b.n	80012a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 815a 	bne.w	80012a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d005      	beq.n	8001006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	2b02      	cmp	r3, #2
 8001004:	d130      	bne.n	8001068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	f003 0201 	and.w	r2, r3, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b03      	cmp	r3, #3
 8001072:	d017      	beq.n	80010a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d123      	bne.n	80010f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	69b9      	ldr	r1, [r7, #24]
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0203 	and.w	r2, r3, #3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80b4 	beq.w	80012a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b60      	ldr	r3, [pc, #384]	@ (80012c0 <HAL_GPIO_Init+0x30c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	4a5f      	ldr	r2, [pc, #380]	@ (80012c0 <HAL_GPIO_Init+0x30c>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001148:	6453      	str	r3, [r2, #68]	@ 0x44
 800114a:	4b5d      	ldr	r3, [pc, #372]	@ (80012c0 <HAL_GPIO_Init+0x30c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001156:	4a5b      	ldr	r2, [pc, #364]	@ (80012c4 <HAL_GPIO_Init+0x310>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a52      	ldr	r2, [pc, #328]	@ (80012c8 <HAL_GPIO_Init+0x314>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d02b      	beq.n	80011da <HAL_GPIO_Init+0x226>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a51      	ldr	r2, [pc, #324]	@ (80012cc <HAL_GPIO_Init+0x318>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d025      	beq.n	80011d6 <HAL_GPIO_Init+0x222>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a50      	ldr	r2, [pc, #320]	@ (80012d0 <HAL_GPIO_Init+0x31c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d01f      	beq.n	80011d2 <HAL_GPIO_Init+0x21e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4f      	ldr	r2, [pc, #316]	@ (80012d4 <HAL_GPIO_Init+0x320>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x21a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4e      	ldr	r2, [pc, #312]	@ (80012d8 <HAL_GPIO_Init+0x324>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x216>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4d      	ldr	r2, [pc, #308]	@ (80012dc <HAL_GPIO_Init+0x328>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x212>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	@ (80012e0 <HAL_GPIO_Init+0x32c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x20e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4b      	ldr	r2, [pc, #300]	@ (80012e4 <HAL_GPIO_Init+0x330>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x20a>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00e      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011be:	2308      	movs	r3, #8
 80011c0:	e00c      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00a      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011c6:	2305      	movs	r3, #5
 80011c8:	e008      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011ca:	2304      	movs	r3, #4
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e004      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e002      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_GPIO_Init+0x228>
 80011da:	2300      	movs	r3, #0
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	f002 0203 	and.w	r2, r2, #3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4093      	lsls	r3, r2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ec:	4935      	ldr	r1, [pc, #212]	@ (80012c4 <HAL_GPIO_Init+0x310>)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	3302      	adds	r3, #2
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121e:	4a32      	ldr	r2, [pc, #200]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001224:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001248:	4a27      	ldr	r2, [pc, #156]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124e:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001272:	4a1d      	ldr	r2, [pc, #116]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129c:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <HAL_GPIO_Init+0x334>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	f67f ae90 	bls.w	8000fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3724      	adds	r7, #36	@ 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40021400 	.word	0x40021400
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40021c00 	.word	0x40021c00
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e267      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d075      	beq.n	80013f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800130a:	4b88      	ldr	r3, [pc, #544]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b04      	cmp	r3, #4
 8001314:	d00c      	beq.n	8001330 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001316:	4b85      	ldr	r3, [pc, #532]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800131e:	2b08      	cmp	r3, #8
 8001320:	d112      	bne.n	8001348 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001322:	4b82      	ldr	r3, [pc, #520]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800132a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800132e:	d10b      	bne.n	8001348 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	4b7e      	ldr	r3, [pc, #504]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d05b      	beq.n	80013f4 <HAL_RCC_OscConfig+0x108>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d157      	bne.n	80013f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e242      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001350:	d106      	bne.n	8001360 <HAL_RCC_OscConfig+0x74>
 8001352:	4b76      	ldr	r3, [pc, #472]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a75      	ldr	r2, [pc, #468]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e01d      	b.n	800139c <HAL_RCC_OscConfig+0xb0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x98>
 800136a:	4b70      	ldr	r3, [pc, #448]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a6f      	ldr	r2, [pc, #444]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b6d      	ldr	r3, [pc, #436]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6c      	ldr	r2, [pc, #432]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0xb0>
 8001384:	4b69      	ldr	r3, [pc, #420]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a68      	ldr	r2, [pc, #416]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b66      	ldr	r3, [pc, #408]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a65      	ldr	r2, [pc, #404]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800139a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc56 	bl	8000c54 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fc52 	bl	8000c54 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	@ 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e207      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b5b      	ldr	r3, [pc, #364]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0xc0>
 80013ca:	e014      	b.n	80013f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fc42 	bl	8000c54 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fc3e 	bl	8000c54 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	@ 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e1f3      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e6:	4b51      	ldr	r3, [pc, #324]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0xe8>
 80013f2:	e000      	b.n	80013f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d063      	beq.n	80014ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001402:	4b4a      	ldr	r3, [pc, #296]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140e:	4b47      	ldr	r3, [pc, #284]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001416:	2b08      	cmp	r3, #8
 8001418:	d11c      	bne.n	8001454 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141a:	4b44      	ldr	r3, [pc, #272]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d116      	bne.n	8001454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	4b41      	ldr	r3, [pc, #260]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_RCC_OscConfig+0x152>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e1c7      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143e:	4b3b      	ldr	r3, [pc, #236]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	4937      	ldr	r1, [pc, #220]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	e03a      	b.n	80014ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d020      	beq.n	800149e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145c:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <HAL_RCC_OscConfig+0x244>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fbf7 	bl	8000c54 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fbf3 	bl	8000c54 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e1a8      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147c:	4b2b      	ldr	r3, [pc, #172]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001488:	4b28      	ldr	r3, [pc, #160]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4925      	ldr	r1, [pc, #148]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e015      	b.n	80014ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149e:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <HAL_RCC_OscConfig+0x244>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fbd6 	bl	8000c54 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fbd2 	bl	8000c54 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e187      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d036      	beq.n	8001544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d016      	beq.n	800150c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_RCC_OscConfig+0x248>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fbb6 	bl	8000c54 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fbb2 	bl	8000c54 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e167      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <HAL_RCC_OscConfig+0x240>)
 8001500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x200>
 800150a:	e01b      	b.n	8001544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <HAL_RCC_OscConfig+0x248>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fb9f 	bl	8000c54 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	e00e      	b.n	8001538 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff fb9b 	bl	8000c54 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d907      	bls.n	8001538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e150      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
 800152c:	40023800 	.word	0x40023800
 8001530:	42470000 	.word	0x42470000
 8001534:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001538:	4b88      	ldr	r3, [pc, #544]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 800153a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ea      	bne.n	800151a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 8097 	beq.w	8001680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001556:	4b81      	ldr	r3, [pc, #516]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10f      	bne.n	8001582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	4b7d      	ldr	r3, [pc, #500]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a7c      	ldr	r2, [pc, #496]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b7a      	ldr	r3, [pc, #488]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157e:	2301      	movs	r3, #1
 8001580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001582:	4b77      	ldr	r3, [pc, #476]	@ (8001760 <HAL_RCC_OscConfig+0x474>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158a:	2b00      	cmp	r3, #0
 800158c:	d118      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158e:	4b74      	ldr	r3, [pc, #464]	@ (8001760 <HAL_RCC_OscConfig+0x474>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a73      	ldr	r2, [pc, #460]	@ (8001760 <HAL_RCC_OscConfig+0x474>)
 8001594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159a:	f7ff fb5b 	bl	8000c54 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a2:	f7ff fb57 	bl	8000c54 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e10c      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001760 <HAL_RCC_OscConfig+0x474>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x2ea>
 80015c8:	4b64      	ldr	r3, [pc, #400]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015cc:	4a63      	ldr	r2, [pc, #396]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d4:	e01c      	b.n	8001610 <HAL_RCC_OscConfig+0x324>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x30c>
 80015de:	4b5f      	ldr	r3, [pc, #380]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e2:	4a5e      	ldr	r2, [pc, #376]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ea:	4b5c      	ldr	r3, [pc, #368]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ee:	4a5b      	ldr	r2, [pc, #364]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0x324>
 80015f8:	4b58      	ldr	r3, [pc, #352]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fc:	4a57      	ldr	r2, [pc, #348]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	6713      	str	r3, [r2, #112]	@ 0x70
 8001604:	4b55      	ldr	r3, [pc, #340]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001608:	4a54      	ldr	r2, [pc, #336]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 800160a:	f023 0304 	bic.w	r3, r3, #4
 800160e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d015      	beq.n	8001644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fb1c 	bl	8000c54 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7ff fb18 	bl	8000c54 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e0cb      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	4b49      	ldr	r3, [pc, #292]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0ee      	beq.n	8001620 <HAL_RCC_OscConfig+0x334>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff fb06 	bl	8000c54 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff fb02 	bl	8000c54 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e0b5      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001662:	4b3e      	ldr	r3, [pc, #248]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ee      	bne.n	800164c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001674:	4b39      	ldr	r3, [pc, #228]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	4a38      	ldr	r2, [pc, #224]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 800167a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800167e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80a1 	beq.w	80017cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800168a:	4b34      	ldr	r3, [pc, #208]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	d05c      	beq.n	8001750 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d141      	bne.n	8001722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b31      	ldr	r3, [pc, #196]	@ (8001764 <HAL_RCC_OscConfig+0x478>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fad6 	bl	8000c54 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff fad2 	bl	8000c54 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e087      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016be:	4b27      	ldr	r3, [pc, #156]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69da      	ldr	r2, [r3, #28]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	019b      	lsls	r3, r3, #6
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e0:	085b      	lsrs	r3, r3, #1
 80016e2:	3b01      	subs	r3, #1
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	491b      	ldr	r1, [pc, #108]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <HAL_RCC_OscConfig+0x478>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff faab 	bl	8000c54 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff faa7 	bl	8000c54 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e05c      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x416>
 8001720:	e054      	b.n	80017cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_RCC_OscConfig+0x478>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fa94 	bl	8000c54 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001730:	f7ff fa90 	bl	8000c54 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e045      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_RCC_OscConfig+0x470>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x444>
 800174e:	e03d      	b.n	80017cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d107      	bne.n	8001768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e038      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000
 8001764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_RCC_OscConfig+0x4ec>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d028      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d121      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d11a      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001798:	4013      	ands	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800179e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d111      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	3b01      	subs	r3, #1
 80017b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0cc      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	4b68      	ldr	r3, [pc, #416]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d90c      	bls.n	8001818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b65      	ldr	r3, [pc, #404]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b63      	ldr	r3, [pc, #396]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0b8      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001830:	4b59      	ldr	r3, [pc, #356]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a58      	ldr	r2, [pc, #352]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800183a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001848:	4b53      	ldr	r3, [pc, #332]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a52      	ldr	r2, [pc, #328]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001854:	4b50      	ldr	r3, [pc, #320]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	494d      	ldr	r1, [pc, #308]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d044      	beq.n	80018fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b47      	ldr	r3, [pc, #284]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d119      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07f      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d003      	beq.n	800189a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001896:	2b03      	cmp	r3, #3
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189a:	4b3f      	ldr	r3, [pc, #252]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e06f      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e067      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ba:	4b37      	ldr	r3, [pc, #220]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f023 0203 	bic.w	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4934      	ldr	r1, [pc, #208]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018cc:	f7ff f9c2 	bl	8000c54 <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d4:	f7ff f9be 	bl	8000c54 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e04f      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 020c 	and.w	r2, r3, #12
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1eb      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d20c      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e032      	b.n	800198a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4916      	ldr	r1, [pc, #88]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194e:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490e      	ldr	r1, [pc, #56]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	4313      	orrs	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001962:	f000 f821 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001966:	4602      	mov	r2, r0
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	490a      	ldr	r1, [pc, #40]	@ (800199c <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	5ccb      	ldrb	r3, [r1, r3]
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f922 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00
 8001998:	40023800 	.word	0x40023800
 800199c:	08003ed4 	.word	0x08003ed4
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019ac:	b090      	sub	sp, #64	@ 0x40
 80019ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c0:	4b59      	ldr	r3, [pc, #356]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d00d      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x40>
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	f200 80a1 	bhi.w	8001b14 <HAL_RCC_GetSysClockFreq+0x16c>
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x34>
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019da:	e09b      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x184>)
 80019de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019e0:	e09b      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e2:	4b53      	ldr	r3, [pc, #332]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x188>)
 80019e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019e6:	e098      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d028      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	2200      	movs	r2, #0
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a10:	2100      	movs	r1, #0
 8001a12:	4b47      	ldr	r3, [pc, #284]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a14:	fb03 f201 	mul.w	r2, r3, r1
 8001a18:	2300      	movs	r3, #0
 8001a1a:	fb00 f303 	mul.w	r3, r0, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a43      	ldr	r2, [pc, #268]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a22:	fba0 1202 	umull	r1, r2, r0, r2
 8001a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a28:	460a      	mov	r2, r1
 8001a2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a2e:	4413      	add	r3, r2
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a34:	2200      	movs	r2, #0
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	61fa      	str	r2, [r7, #28]
 8001a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a42:	f7fe fc1d 	bl	8000280 <__aeabi_uldivmod>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a4e:	e053      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a50:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	2200      	movs	r2, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	617a      	str	r2, [r7, #20]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a62:	f04f 0b00 	mov.w	fp, #0
 8001a66:	4652      	mov	r2, sl
 8001a68:	465b      	mov	r3, fp
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	0159      	lsls	r1, r3, #5
 8001a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a78:	0150      	lsls	r0, r2, #5
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	ebb2 080a 	subs.w	r8, r2, sl
 8001a82:	eb63 090b 	sbc.w	r9, r3, fp
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a9a:	ebb2 0408 	subs.w	r4, r2, r8
 8001a9e:	eb63 0509 	sbc.w	r5, r3, r9
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	00eb      	lsls	r3, r5, #3
 8001aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab0:	00e2      	lsls	r2, r4, #3
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	eb14 030a 	adds.w	r3, r4, sl
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	eb45 030b 	adc.w	r3, r5, fp
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	028b      	lsls	r3, r1, #10
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad8:	4621      	mov	r1, r4
 8001ada:	028a      	lsls	r2, r1, #10
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	60fa      	str	r2, [r7, #12]
 8001ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aec:	f7fe fbc8 	bl	8000280 <__aeabi_uldivmod>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4613      	mov	r3, r2
 8001af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001b08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3740      	adds	r7, #64	@ 0x40
 8001b20:	46bd      	mov	sp, r7
 8001b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	017d7840 	.word	0x017d7840

08001b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b50:	f7ff fff0 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	0a9b      	lsrs	r3, r3, #10
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4903      	ldr	r1, [pc, #12]	@ (8001b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08003ee4 	.word	0x08003ee4

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b78:	f7ff ffdc 	bl	8001b34 <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0b5b      	lsrs	r3, r3, #13
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4903      	ldr	r1, [pc, #12]	@ (8001b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	08003ee4 	.word	0x08003ee4

08001b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e041      	b.n	8001c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe fea0 	bl	8000908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 fa7e 	bl	80020dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d001      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e04e      	b.n	8001cf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a23      	ldr	r2, [pc, #140]	@ (8001d00 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d022      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c7e:	d01d      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1f      	ldr	r2, [pc, #124]	@ (8001d04 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d018      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d013      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00e      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d009      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d111      	bne.n	8001ce0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d010      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cde:	e007      	b.n	8001cf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40000c00 	.word	0x40000c00
 8001d10:	40010400 	.word	0x40010400
 8001d14:	40014000 	.word	0x40014000
 8001d18:	40001800 	.word	0x40001800

08001d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d020      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01b      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0202 	mvn.w	r2, #2
 8001d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f999 	bl	800209e <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e005      	b.n	8001d7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f98b 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f99c 	bl	80020b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d020      	beq.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01b      	beq.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0204 	mvn.w	r2, #4
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f973 	bl	800209e <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f965 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f976 	bl	80020b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d020      	beq.n	8001e18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01b      	beq.n	8001e18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0208 	mvn.w	r2, #8
 8001de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2204      	movs	r2, #4
 8001dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f94d 	bl	800209e <HAL_TIM_IC_CaptureCallback>
 8001e04:	e005      	b.n	8001e12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f93f 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f950 	bl	80020b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d020      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01b      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0210 	mvn.w	r2, #16
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2208      	movs	r2, #8
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f927 	bl	800209e <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f919 	bl	800208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f92a 	bl	80020b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0201 	mvn.w	r2, #1
 8001e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fcdc 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fae4 	bl	8002474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00c      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d007      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8fb 	bl	80020c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00c      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0220 	mvn.w	r2, #32
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fab6 	bl	8002460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_TIM_ConfigClockSource+0x1c>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e0b4      	b.n	8002082 <HAL_TIM_ConfigClockSource+0x186>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f50:	d03e      	beq.n	8001fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8001f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f56:	f200 8087 	bhi.w	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f5e:	f000 8086 	beq.w	800206e <HAL_TIM_ConfigClockSource+0x172>
 8001f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f66:	d87f      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f68:	2b70      	cmp	r3, #112	@ 0x70
 8001f6a:	d01a      	beq.n	8001fa2 <HAL_TIM_ConfigClockSource+0xa6>
 8001f6c:	2b70      	cmp	r3, #112	@ 0x70
 8001f6e:	d87b      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f70:	2b60      	cmp	r3, #96	@ 0x60
 8001f72:	d050      	beq.n	8002016 <HAL_TIM_ConfigClockSource+0x11a>
 8001f74:	2b60      	cmp	r3, #96	@ 0x60
 8001f76:	d877      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f78:	2b50      	cmp	r3, #80	@ 0x50
 8001f7a:	d03c      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0xfa>
 8001f7c:	2b50      	cmp	r3, #80	@ 0x50
 8001f7e:	d873      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f80:	2b40      	cmp	r3, #64	@ 0x40
 8001f82:	d058      	beq.n	8002036 <HAL_TIM_ConfigClockSource+0x13a>
 8001f84:	2b40      	cmp	r3, #64	@ 0x40
 8001f86:	d86f      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f88:	2b30      	cmp	r3, #48	@ 0x30
 8001f8a:	d064      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f8c:	2b30      	cmp	r3, #48	@ 0x30
 8001f8e:	d86b      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d060      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d867      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05c      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001f9c:	2b10      	cmp	r3, #16
 8001f9e:	d05a      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x15a>
 8001fa0:	e062      	b.n	8002068 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fb2:	f000 f9b9 	bl	8002328 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	609a      	str	r2, [r3, #8]
      break;
 8001fce:	e04f      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fe0:	f000 f9a2 	bl	8002328 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ff2:	609a      	str	r2, [r3, #8]
      break;
 8001ff4:	e03c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002002:	461a      	mov	r2, r3
 8002004:	f000 f916 	bl	8002234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2150      	movs	r1, #80	@ 0x50
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f96f 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 8002014:	e02c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002022:	461a      	mov	r2, r3
 8002024:	f000 f935 	bl	8002292 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2160      	movs	r1, #96	@ 0x60
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f95f 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 8002034:	e01c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002042:	461a      	mov	r2, r3
 8002044:	f000 f8f6 	bl	8002234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2140      	movs	r1, #64	@ 0x40
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f94f 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 8002054:	e00c      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4619      	mov	r1, r3
 8002060:	4610      	mov	r0, r2
 8002062:	f000 f946 	bl	80022f2 <TIM_ITRx_SetConfig>
      break;
 8002066:	e003      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
      break;
 800206c:	e000      	b.n	8002070 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800206e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a46      	ldr	r2, [pc, #280]	@ (8002208 <TIM_Base_SetConfig+0x12c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d013      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fa:	d00f      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a43      	ldr	r2, [pc, #268]	@ (800220c <TIM_Base_SetConfig+0x130>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00b      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a42      	ldr	r2, [pc, #264]	@ (8002210 <TIM_Base_SetConfig+0x134>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a41      	ldr	r2, [pc, #260]	@ (8002214 <TIM_Base_SetConfig+0x138>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a40      	ldr	r2, [pc, #256]	@ (8002218 <TIM_Base_SetConfig+0x13c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d108      	bne.n	800212e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a35      	ldr	r2, [pc, #212]	@ (8002208 <TIM_Base_SetConfig+0x12c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d02b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800213c:	d027      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a32      	ldr	r2, [pc, #200]	@ (800220c <TIM_Base_SetConfig+0x130>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d023      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a31      	ldr	r2, [pc, #196]	@ (8002210 <TIM_Base_SetConfig+0x134>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a30      	ldr	r2, [pc, #192]	@ (8002214 <TIM_Base_SetConfig+0x138>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <TIM_Base_SetConfig+0x13c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d017      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2e      	ldr	r2, [pc, #184]	@ (800221c <TIM_Base_SetConfig+0x140>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2d      	ldr	r2, [pc, #180]	@ (8002220 <TIM_Base_SetConfig+0x144>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00f      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2c      	ldr	r2, [pc, #176]	@ (8002224 <TIM_Base_SetConfig+0x148>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00b      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2b      	ldr	r2, [pc, #172]	@ (8002228 <TIM_Base_SetConfig+0x14c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2a      	ldr	r2, [pc, #168]	@ (800222c <TIM_Base_SetConfig+0x150>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d003      	beq.n	800218e <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a29      	ldr	r2, [pc, #164]	@ (8002230 <TIM_Base_SetConfig+0x154>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d108      	bne.n	80021a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a10      	ldr	r2, [pc, #64]	@ (8002208 <TIM_Base_SetConfig+0x12c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d003      	beq.n	80021d4 <TIM_Base_SetConfig+0xf8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <TIM_Base_SetConfig+0x13c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d103      	bne.n	80021dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d105      	bne.n	80021fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f023 0201 	bic.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]
  }
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40010000 	.word	0x40010000
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800
 8002214:	40000c00 	.word	0x40000c00
 8002218:	40010400 	.word	0x40010400
 800221c:	40014000 	.word	0x40014000
 8002220:	40014400 	.word	0x40014400
 8002224:	40014800 	.word	0x40014800
 8002228:	40001800 	.word	0x40001800
 800222c:	40001c00 	.word	0x40001c00
 8002230:	40002000 	.word	0x40002000

08002234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	f023 0201 	bic.w	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800225e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f023 030a 	bic.w	r3, r3, #10
 8002270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	621a      	str	r2, [r3, #32]
}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002292:	b480      	push	{r7}
 8002294:	b087      	sub	sp, #28
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f023 0210 	bic.w	r2, r3, #16
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80022bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	031b      	lsls	r3, r3, #12
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80022ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	621a      	str	r2, [r3, #32]
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	f043 0307 	orr.w	r3, r3, #7
 8002314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	609a      	str	r2, [r3, #8]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	021a      	lsls	r2, r3, #8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	431a      	orrs	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4313      	orrs	r3, r2
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	609a      	str	r2, [r3, #8]
}
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800237c:	2302      	movs	r3, #2
 800237e:	e05a      	b.n	8002436 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a21      	ldr	r2, [pc, #132]	@ (8002444 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d022      	beq.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023cc:	d01d      	beq.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002448 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d018      	beq.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1b      	ldr	r2, [pc, #108]	@ (800244c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002450 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00e      	beq.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a18      	ldr	r2, [pc, #96]	@ (8002454 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d009      	beq.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a17      	ldr	r2, [pc, #92]	@ (8002458 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a15      	ldr	r2, [pc, #84]	@ (800245c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10c      	bne.n	8002424 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4313      	orrs	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40010000 	.word	0x40010000
 8002448:	40000400 	.word	0x40000400
 800244c:	40000800 	.word	0x40000800
 8002450:	40000c00 	.word	0x40000c00
 8002454:	40010400 	.word	0x40010400
 8002458:	40014000 	.word	0x40014000
 800245c:	40001800 	.word	0x40001800

08002460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e042      	b.n	8002520 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fa62 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	@ 0x24
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fdc7 	bl	8003060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	@ 0x28
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	d175      	bne.n	8002634 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_UART_Transmit+0x2c>
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e06e      	b.n	8002636 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2221      	movs	r2, #33	@ 0x21
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002566:	f7fe fb75 	bl	8000c54 <HAL_GetTick>
 800256a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002580:	d108      	bne.n	8002594 <HAL_UART_Transmit+0x6c>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d104      	bne.n	8002594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e003      	b.n	800259c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800259c:	e02e      	b.n	80025fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2200      	movs	r2, #0
 80025a6:	2180      	movs	r1, #128	@ 0x80
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fb29 	bl	8002c00 <UART_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e03a      	b.n	8002636 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3302      	adds	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e007      	b.n	80025ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3301      	adds	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1cb      	bne.n	800259e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2200      	movs	r2, #0
 800260e:	2140      	movs	r1, #64	@ 0x40
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 faf5 	bl	8002c00 <UART_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e006      	b.n	8002636 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	4613      	mov	r3, r2
 800264a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	d112      	bne.n	800267e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_UART_Receive_IT+0x26>
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e00b      	b.n	8002680 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	461a      	mov	r2, r3
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fb1c 	bl	8002cb2 <UART_Start_Receive_IT>
 800267a:	4603      	mov	r3, r0
 800267c:	e000      	b.n	8002680 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800267e:	2302      	movs	r3, #2
  }
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b0ba      	sub	sp, #232	@ 0xe8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80026c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10f      	bne.n	80026ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_UART_IRQHandler+0x66>
 80026da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fbfc 	bl	8002ee4 <UART_Receive_IT>
      return;
 80026ec:	e25b      	b.n	8002ba6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80de 	beq.w	80028b4 <HAL_UART_IRQHandler+0x22c>
 80026f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002708:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80d1 	beq.w	80028b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_UART_IRQHandler+0xae>
 800271e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_UART_IRQHandler+0xd2>
 8002742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	f043 0202 	orr.w	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800275a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_UART_IRQHandler+0xf6>
 8002766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	f043 0204 	orr.w	r2, r3, #4
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d011      	beq.n	80027ae <HAL_UART_IRQHandler+0x126>
 800278a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	f043 0208 	orr.w	r2, r3, #8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 81f2 	beq.w	8002b9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_UART_IRQHandler+0x14e>
 80027c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027c8:	f003 0320 	and.w	r3, r3, #32
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fb87 	bl	8002ee4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e0:	2b40      	cmp	r3, #64	@ 0x40
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <HAL_UART_IRQHandler+0x17a>
 80027fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d04f      	beq.n	80028a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa8f 	bl	8002d26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002812:	2b40      	cmp	r3, #64	@ 0x40
 8002814:	d141      	bne.n	800289a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3314      	adds	r3, #20
 800281c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800282c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3314      	adds	r3, #20
 800283e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002842:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800284e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800285a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1d9      	bne.n	8002816 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d013      	beq.n	8002892 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a68 <HAL_UART_IRQHandler+0x3e0>)
 8002870:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fb79 	bl	8000f6e <HAL_DMA_Abort_IT>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800288c:	4610      	mov	r0, r2
 800288e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	e00e      	b.n	80028b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f99e 	bl	8002bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	e00a      	b.n	80028b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f99a 	bl	8002bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	e006      	b.n	80028b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f996 	bl	8002bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80028ae:	e175      	b.n	8002b9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b0:	bf00      	nop
    return;
 80028b2:	e173      	b.n	8002b9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	f040 814f 	bne.w	8002b5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8148 	beq.w	8002b5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8141 	beq.w	8002b5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fa:	2b40      	cmp	r3, #64	@ 0x40
 80028fc:	f040 80b6 	bne.w	8002a6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800290c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8145 	beq.w	8002ba0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800291a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800291e:	429a      	cmp	r2, r3
 8002920:	f080 813e 	bcs.w	8002ba0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800292a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002936:	f000 8088 	beq.w	8002a4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002948:	e853 3f00 	ldrex	r3, [r3]
 800294c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002950:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	330c      	adds	r3, #12
 8002962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002966:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800296a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002972:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800297e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1d9      	bne.n	800293a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3314      	adds	r3, #20
 800298c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3314      	adds	r3, #20
 80029a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80029bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e1      	bne.n	8002986 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3314      	adds	r3, #20
 80029c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029cc:	e853 3f00 	ldrex	r3, [r3]
 80029d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80029d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3314      	adds	r3, #20
 80029e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80029e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80029f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1e3      	bne.n	80029c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a12:	e853 3f00 	ldrex	r3, [r3]
 8002a16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a1a:	f023 0310 	bic.w	r3, r3, #16
 8002a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	330c      	adds	r3, #12
 8002a28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e3      	bne.n	8002a08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fa22 	bl	8000e8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f8c1 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a66:	e09b      	b.n	8002ba0 <HAL_UART_IRQHandler+0x518>
 8002a68:	08002ded 	.word	0x08002ded
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 808e 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8089 	beq.w	8002ba4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9c:	e853 3f00 	ldrex	r3, [r3]
 8002aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002abe:	e841 2300 	strex	r3, r2, [r1]
 8002ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e3      	bne.n	8002a92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3314      	adds	r3, #20
 8002aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e3      	bne.n	8002aca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	330c      	adds	r3, #12
 8002b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	e853 3f00 	ldrex	r3, [r3]
 8002b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0310 	bic.w	r3, r3, #16
 8002b26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	330c      	adds	r3, #12
 8002b30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b34:	61fa      	str	r2, [r7, #28]
 8002b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b38:	69b9      	ldr	r1, [r7, #24]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	e841 2300 	strex	r3, r2, [r1]
 8002b40:	617b      	str	r3, [r7, #20]
   return(result);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1e3      	bne.n	8002b10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f847 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b5a:	e023      	b.n	8002ba4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <HAL_UART_IRQHandler+0x4f4>
 8002b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f94d 	bl	8002e14 <UART_Transmit_IT>
    return;
 8002b7a:	e014      	b.n	8002ba6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00e      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x51e>
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f98d 	bl	8002eb4 <UART_EndTransmit_IT>
    return;
 8002b9a:	e004      	b.n	8002ba6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b9c:	bf00      	nop
 8002b9e:	e002      	b.n	8002ba6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ba0:	bf00      	nop
 8002ba2:	e000      	b.n	8002ba6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002ba4:	bf00      	nop
  }
}
 8002ba6:	37e8      	adds	r7, #232	@ 0xe8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c10:	e03b      	b.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d037      	beq.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1a:	f7fe f81b 	bl	8000c54 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	6a3a      	ldr	r2, [r7, #32]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e03a      	b.n	8002caa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d023      	beq.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b80      	cmp	r3, #128	@ 0x80
 8002c46:	d020      	beq.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b40      	cmp	r3, #64	@ 0x40
 8002c4c:	d01d      	beq.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d116      	bne.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f857 	bl	8002d26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00f      	b.n	8002caa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4013      	ands	r3, r2
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d0b4      	beq.n	8002c12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2222      	movs	r2, #34	@ 0x22
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cf6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b095      	sub	sp, #84	@ 0x54
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	330c      	adds	r3, #12
 8002d4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e5      	bne.n	8002d2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3314      	adds	r3, #20
 8002d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3314      	adds	r3, #20
 8002d80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e5      	bne.n	8002d62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d119      	bne.n	8002dd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	330c      	adds	r3, #12
 8002da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f023 0310 	bic.w	r3, r3, #16
 8002db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dbe:	61ba      	str	r2, [r7, #24]
 8002dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	613b      	str	r3, [r7, #16]
   return(result);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1e5      	bne.n	8002d9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002de0:	bf00      	nop
 8002de2:	3754      	adds	r7, #84	@ 0x54
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff fee4 	bl	8002bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b21      	cmp	r3, #33	@ 0x21
 8002e26:	d13e      	bne.n	8002ea6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e30:	d114      	bne.n	8002e5c <UART_Transmit_IT+0x48>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d110      	bne.n	8002e5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	1c9a      	adds	r2, r3, #2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]
 8002e5a:	e008      	b.n	8002e6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	1c59      	adds	r1, r3, #1
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6211      	str	r1, [r2, #32]
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ea0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
  }
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff fe69 	bl	8002bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	@ 0x30
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b22      	cmp	r3, #34	@ 0x22
 8002ef6:	f040 80ae 	bne.w	8003056 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f02:	d117      	bne.n	8002f34 <UART_Receive_IT+0x50>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d113      	bne.n	8002f34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	1c9a      	adds	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f32:	e026      	b.n	8002f82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f46:	d007      	beq.n	8002f58 <UART_Receive_IT+0x74>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <UART_Receive_IT+0x82>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d106      	bne.n	8002f66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e008      	b.n	8002f78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d15d      	bne.n	8003052 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0220 	bic.w	r2, r2, #32
 8002fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d135      	bne.n	8003048 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f023 0310 	bic.w	r3, r3, #16
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	330c      	adds	r3, #12
 8003000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003002:	623a      	str	r2, [r7, #32]
 8003004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003006:	69f9      	ldr	r1, [r7, #28]
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	e841 2300 	strex	r3, r2, [r1]
 800300e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1e5      	bne.n	8002fe2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b10      	cmp	r3, #16
 8003022:	d10a      	bne.n	800303a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fdd1 	bl	8002be8 <HAL_UARTEx_RxEventCallback>
 8003046:	e002      	b.n	800304e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff fdb9 	bl	8002bc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	e002      	b.n	8003058 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3730      	adds	r7, #48	@ 0x30
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003064:	b0c0      	sub	sp, #256	@ 0x100
 8003066:	af00      	add	r7, sp, #0
 8003068:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307c:	68d9      	ldr	r1, [r3, #12]
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	ea40 0301 	orr.w	r3, r0, r1
 8003088:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800308a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	431a      	orrs	r2, r3
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	431a      	orrs	r2, r3
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80030b8:	f021 010c 	bic.w	r1, r1, #12
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80030c6:	430b      	orrs	r3, r1
 80030c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030da:	6999      	ldr	r1, [r3, #24]
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	ea40 0301 	orr.w	r3, r0, r1
 80030e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4b8f      	ldr	r3, [pc, #572]	@ (800332c <UART_SetConfig+0x2cc>)
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d005      	beq.n	8003100 <UART_SetConfig+0xa0>
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003330 <UART_SetConfig+0x2d0>)
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d104      	bne.n	800310a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003100:	f7fe fd38 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8003104:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003108:	e003      	b.n	8003112 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800310a:	f7fe fd1f 	bl	8001b4c <HAL_RCC_GetPCLK1Freq>
 800310e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311c:	f040 810c 	bne.w	8003338 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003124:	2200      	movs	r2, #0
 8003126:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800312a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800312e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003132:	4622      	mov	r2, r4
 8003134:	462b      	mov	r3, r5
 8003136:	1891      	adds	r1, r2, r2
 8003138:	65b9      	str	r1, [r7, #88]	@ 0x58
 800313a:	415b      	adcs	r3, r3
 800313c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800313e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003142:	4621      	mov	r1, r4
 8003144:	eb12 0801 	adds.w	r8, r2, r1
 8003148:	4629      	mov	r1, r5
 800314a:	eb43 0901 	adc.w	r9, r3, r1
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800315a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800315e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003162:	4690      	mov	r8, r2
 8003164:	4699      	mov	r9, r3
 8003166:	4623      	mov	r3, r4
 8003168:	eb18 0303 	adds.w	r3, r8, r3
 800316c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003170:	462b      	mov	r3, r5
 8003172:	eb49 0303 	adc.w	r3, r9, r3
 8003176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003186:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800318a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800318e:	460b      	mov	r3, r1
 8003190:	18db      	adds	r3, r3, r3
 8003192:	653b      	str	r3, [r7, #80]	@ 0x50
 8003194:	4613      	mov	r3, r2
 8003196:	eb42 0303 	adc.w	r3, r2, r3
 800319a:	657b      	str	r3, [r7, #84]	@ 0x54
 800319c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031a4:	f7fd f86c 	bl	8000280 <__aeabi_uldivmod>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4b61      	ldr	r3, [pc, #388]	@ (8003334 <UART_SetConfig+0x2d4>)
 80031ae:	fba3 2302 	umull	r2, r3, r3, r2
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	011c      	lsls	r4, r3, #4
 80031b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	1891      	adds	r1, r2, r2
 80031ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031d0:	415b      	adcs	r3, r3
 80031d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031d8:	4641      	mov	r1, r8
 80031da:	eb12 0a01 	adds.w	sl, r2, r1
 80031de:	4649      	mov	r1, r9
 80031e0:	eb43 0b01 	adc.w	fp, r3, r1
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031f8:	4692      	mov	sl, r2
 80031fa:	469b      	mov	fp, r3
 80031fc:	4643      	mov	r3, r8
 80031fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003202:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003206:	464b      	mov	r3, r9
 8003208:	eb4b 0303 	adc.w	r3, fp, r3
 800320c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800321c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003220:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003224:	460b      	mov	r3, r1
 8003226:	18db      	adds	r3, r3, r3
 8003228:	643b      	str	r3, [r7, #64]	@ 0x40
 800322a:	4613      	mov	r3, r2
 800322c:	eb42 0303 	adc.w	r3, r2, r3
 8003230:	647b      	str	r3, [r7, #68]	@ 0x44
 8003232:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003236:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800323a:	f7fd f821 	bl	8000280 <__aeabi_uldivmod>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4611      	mov	r1, r2
 8003244:	4b3b      	ldr	r3, [pc, #236]	@ (8003334 <UART_SetConfig+0x2d4>)
 8003246:	fba3 2301 	umull	r2, r3, r3, r1
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2264      	movs	r2, #100	@ 0x64
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	1acb      	subs	r3, r1, r3
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800325a:	4b36      	ldr	r3, [pc, #216]	@ (8003334 <UART_SetConfig+0x2d4>)
 800325c:	fba3 2302 	umull	r2, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003268:	441c      	add	r4, r3
 800326a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800326e:	2200      	movs	r2, #0
 8003270:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003274:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003278:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800327c:	4642      	mov	r2, r8
 800327e:	464b      	mov	r3, r9
 8003280:	1891      	adds	r1, r2, r2
 8003282:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003284:	415b      	adcs	r3, r3
 8003286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800328c:	4641      	mov	r1, r8
 800328e:	1851      	adds	r1, r2, r1
 8003290:	6339      	str	r1, [r7, #48]	@ 0x30
 8003292:	4649      	mov	r1, r9
 8003294:	414b      	adcs	r3, r1
 8003296:	637b      	str	r3, [r7, #52]	@ 0x34
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032a4:	4659      	mov	r1, fp
 80032a6:	00cb      	lsls	r3, r1, #3
 80032a8:	4651      	mov	r1, sl
 80032aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ae:	4651      	mov	r1, sl
 80032b0:	00ca      	lsls	r2, r1, #3
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	4642      	mov	r2, r8
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032c0:	464b      	mov	r3, r9
 80032c2:	460a      	mov	r2, r1
 80032c4:	eb42 0303 	adc.w	r3, r2, r3
 80032c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032e0:	460b      	mov	r3, r1
 80032e2:	18db      	adds	r3, r3, r3
 80032e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032e6:	4613      	mov	r3, r2
 80032e8:	eb42 0303 	adc.w	r3, r2, r3
 80032ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032f6:	f7fc ffc3 	bl	8000280 <__aeabi_uldivmod>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <UART_SetConfig+0x2d4>)
 8003300:	fba3 1302 	umull	r1, r3, r3, r2
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	2164      	movs	r1, #100	@ 0x64
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	3332      	adds	r3, #50	@ 0x32
 8003312:	4a08      	ldr	r2, [pc, #32]	@ (8003334 <UART_SetConfig+0x2d4>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	f003 0207 	and.w	r2, r3, #7
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4422      	add	r2, r4
 8003326:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003328:	e106      	b.n	8003538 <UART_SetConfig+0x4d8>
 800332a:	bf00      	nop
 800332c:	40011000 	.word	0x40011000
 8003330:	40011400 	.word	0x40011400
 8003334:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800333c:	2200      	movs	r2, #0
 800333e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003342:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003346:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800334a:	4642      	mov	r2, r8
 800334c:	464b      	mov	r3, r9
 800334e:	1891      	adds	r1, r2, r2
 8003350:	6239      	str	r1, [r7, #32]
 8003352:	415b      	adcs	r3, r3
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24
 8003356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800335a:	4641      	mov	r1, r8
 800335c:	1854      	adds	r4, r2, r1
 800335e:	4649      	mov	r1, r9
 8003360:	eb43 0501 	adc.w	r5, r3, r1
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	00eb      	lsls	r3, r5, #3
 800336e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003372:	00e2      	lsls	r2, r4, #3
 8003374:	4614      	mov	r4, r2
 8003376:	461d      	mov	r5, r3
 8003378:	4643      	mov	r3, r8
 800337a:	18e3      	adds	r3, r4, r3
 800337c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003380:	464b      	mov	r3, r9
 8003382:	eb45 0303 	adc.w	r3, r5, r3
 8003386:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003396:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033a6:	4629      	mov	r1, r5
 80033a8:	008b      	lsls	r3, r1, #2
 80033aa:	4621      	mov	r1, r4
 80033ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033b0:	4621      	mov	r1, r4
 80033b2:	008a      	lsls	r2, r1, #2
 80033b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80033b8:	f7fc ff62 	bl	8000280 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4b60      	ldr	r3, [pc, #384]	@ (8003544 <UART_SetConfig+0x4e4>)
 80033c2:	fba3 2302 	umull	r2, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	011c      	lsls	r4, r3, #4
 80033ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033dc:	4642      	mov	r2, r8
 80033de:	464b      	mov	r3, r9
 80033e0:	1891      	adds	r1, r2, r2
 80033e2:	61b9      	str	r1, [r7, #24]
 80033e4:	415b      	adcs	r3, r3
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033ec:	4641      	mov	r1, r8
 80033ee:	1851      	adds	r1, r2, r1
 80033f0:	6139      	str	r1, [r7, #16]
 80033f2:	4649      	mov	r1, r9
 80033f4:	414b      	adcs	r3, r1
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003404:	4659      	mov	r1, fp
 8003406:	00cb      	lsls	r3, r1, #3
 8003408:	4651      	mov	r1, sl
 800340a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800340e:	4651      	mov	r1, sl
 8003410:	00ca      	lsls	r2, r1, #3
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	4603      	mov	r3, r0
 8003418:	4642      	mov	r2, r8
 800341a:	189b      	adds	r3, r3, r2
 800341c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003420:	464b      	mov	r3, r9
 8003422:	460a      	mov	r2, r1
 8003424:	eb42 0303 	adc.w	r3, r2, r3
 8003428:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003436:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003444:	4649      	mov	r1, r9
 8003446:	008b      	lsls	r3, r1, #2
 8003448:	4641      	mov	r1, r8
 800344a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800344e:	4641      	mov	r1, r8
 8003450:	008a      	lsls	r2, r1, #2
 8003452:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003456:	f7fc ff13 	bl	8000280 <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4611      	mov	r1, r2
 8003460:	4b38      	ldr	r3, [pc, #224]	@ (8003544 <UART_SetConfig+0x4e4>)
 8003462:	fba3 2301 	umull	r2, r3, r3, r1
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2264      	movs	r2, #100	@ 0x64
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	1acb      	subs	r3, r1, r3
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	3332      	adds	r3, #50	@ 0x32
 8003474:	4a33      	ldr	r2, [pc, #204]	@ (8003544 <UART_SetConfig+0x4e4>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003480:	441c      	add	r4, r3
 8003482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003486:	2200      	movs	r2, #0
 8003488:	673b      	str	r3, [r7, #112]	@ 0x70
 800348a:	677a      	str	r2, [r7, #116]	@ 0x74
 800348c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	1891      	adds	r1, r2, r2
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	415b      	adcs	r3, r3
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a0:	4641      	mov	r1, r8
 80034a2:	1851      	adds	r1, r2, r1
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	4649      	mov	r1, r9
 80034a8:	414b      	adcs	r3, r1
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034b8:	4659      	mov	r1, fp
 80034ba:	00cb      	lsls	r3, r1, #3
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c2:	4651      	mov	r1, sl
 80034c4:	00ca      	lsls	r2, r1, #3
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	4642      	mov	r2, r8
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034d2:	464b      	mov	r3, r9
 80034d4:	460a      	mov	r2, r1
 80034d6:	eb42 0303 	adc.w	r3, r2, r3
 80034da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80034e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034f4:	4649      	mov	r1, r9
 80034f6:	008b      	lsls	r3, r1, #2
 80034f8:	4641      	mov	r1, r8
 80034fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034fe:	4641      	mov	r1, r8
 8003500:	008a      	lsls	r2, r1, #2
 8003502:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003506:	f7fc febb 	bl	8000280 <__aeabi_uldivmod>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <UART_SetConfig+0x4e4>)
 8003510:	fba3 1302 	umull	r1, r3, r3, r2
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	2164      	movs	r1, #100	@ 0x64
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	3332      	adds	r3, #50	@ 0x32
 8003522:	4a08      	ldr	r2, [pc, #32]	@ (8003544 <UART_SetConfig+0x4e4>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4422      	add	r2, r4
 8003536:	609a      	str	r2, [r3, #8]
}
 8003538:	bf00      	nop
 800353a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800353e:	46bd      	mov	sp, r7
 8003540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003544:	51eb851f 	.word	0x51eb851f

08003548 <sniprintf>:
 8003548:	b40c      	push	{r2, r3}
 800354a:	b530      	push	{r4, r5, lr}
 800354c:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <sniprintf+0x64>)
 800354e:	1e0c      	subs	r4, r1, #0
 8003550:	681d      	ldr	r5, [r3, #0]
 8003552:	b09d      	sub	sp, #116	@ 0x74
 8003554:	da08      	bge.n	8003568 <sniprintf+0x20>
 8003556:	238b      	movs	r3, #139	@ 0x8b
 8003558:	602b      	str	r3, [r5, #0]
 800355a:	f04f 30ff 	mov.w	r0, #4294967295
 800355e:	b01d      	add	sp, #116	@ 0x74
 8003560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003564:	b002      	add	sp, #8
 8003566:	4770      	bx	lr
 8003568:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800356c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003570:	bf14      	ite	ne
 8003572:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003576:	4623      	moveq	r3, r4
 8003578:	9304      	str	r3, [sp, #16]
 800357a:	9307      	str	r3, [sp, #28]
 800357c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003580:	9002      	str	r0, [sp, #8]
 8003582:	9006      	str	r0, [sp, #24]
 8003584:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003588:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800358a:	ab21      	add	r3, sp, #132	@ 0x84
 800358c:	a902      	add	r1, sp, #8
 800358e:	4628      	mov	r0, r5
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	f000 f995 	bl	80038c0 <_svfiprintf_r>
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	bfbc      	itt	lt
 800359a:	238b      	movlt	r3, #139	@ 0x8b
 800359c:	602b      	strlt	r3, [r5, #0]
 800359e:	2c00      	cmp	r4, #0
 80035a0:	d0dd      	beq.n	800355e <sniprintf+0x16>
 80035a2:	9b02      	ldr	r3, [sp, #8]
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	e7d9      	b.n	800355e <sniprintf+0x16>
 80035aa:	bf00      	nop
 80035ac:	2000000c 	.word	0x2000000c

080035b0 <memset>:
 80035b0:	4402      	add	r2, r0
 80035b2:	4603      	mov	r3, r0
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d100      	bne.n	80035ba <memset+0xa>
 80035b8:	4770      	bx	lr
 80035ba:	f803 1b01 	strb.w	r1, [r3], #1
 80035be:	e7f9      	b.n	80035b4 <memset+0x4>

080035c0 <__errno>:
 80035c0:	4b01      	ldr	r3, [pc, #4]	@ (80035c8 <__errno+0x8>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	2000000c 	.word	0x2000000c

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003604 <__libc_init_array+0x38>)
 80035d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003608 <__libc_init_array+0x3c>)
 80035d2:	1b64      	subs	r4, r4, r5
 80035d4:	10a4      	asrs	r4, r4, #2
 80035d6:	2600      	movs	r6, #0
 80035d8:	42a6      	cmp	r6, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	4d0b      	ldr	r5, [pc, #44]	@ (800360c <__libc_init_array+0x40>)
 80035de:	4c0c      	ldr	r4, [pc, #48]	@ (8003610 <__libc_init_array+0x44>)
 80035e0:	f000 fc66 	bl	8003eb0 <_init>
 80035e4:	1b64      	subs	r4, r4, r5
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	2600      	movs	r6, #0
 80035ea:	42a6      	cmp	r6, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f4:	4798      	blx	r3
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fe:	4798      	blx	r3
 8003600:	3601      	adds	r6, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	08003f28 	.word	0x08003f28
 8003608:	08003f28 	.word	0x08003f28
 800360c:	08003f28 	.word	0x08003f28
 8003610:	08003f2c 	.word	0x08003f2c

08003614 <__retarget_lock_acquire_recursive>:
 8003614:	4770      	bx	lr

08003616 <__retarget_lock_release_recursive>:
 8003616:	4770      	bx	lr

08003618 <_free_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4605      	mov	r5, r0
 800361c:	2900      	cmp	r1, #0
 800361e:	d041      	beq.n	80036a4 <_free_r+0x8c>
 8003620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003624:	1f0c      	subs	r4, r1, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	bfb8      	it	lt
 800362a:	18e4      	addlt	r4, r4, r3
 800362c:	f000 f8e0 	bl	80037f0 <__malloc_lock>
 8003630:	4a1d      	ldr	r2, [pc, #116]	@ (80036a8 <_free_r+0x90>)
 8003632:	6813      	ldr	r3, [r2, #0]
 8003634:	b933      	cbnz	r3, 8003644 <_free_r+0x2c>
 8003636:	6063      	str	r3, [r4, #4]
 8003638:	6014      	str	r4, [r2, #0]
 800363a:	4628      	mov	r0, r5
 800363c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003640:	f000 b8dc 	b.w	80037fc <__malloc_unlock>
 8003644:	42a3      	cmp	r3, r4
 8003646:	d908      	bls.n	800365a <_free_r+0x42>
 8003648:	6820      	ldr	r0, [r4, #0]
 800364a:	1821      	adds	r1, r4, r0
 800364c:	428b      	cmp	r3, r1
 800364e:	bf01      	itttt	eq
 8003650:	6819      	ldreq	r1, [r3, #0]
 8003652:	685b      	ldreq	r3, [r3, #4]
 8003654:	1809      	addeq	r1, r1, r0
 8003656:	6021      	streq	r1, [r4, #0]
 8003658:	e7ed      	b.n	8003636 <_free_r+0x1e>
 800365a:	461a      	mov	r2, r3
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	b10b      	cbz	r3, 8003664 <_free_r+0x4c>
 8003660:	42a3      	cmp	r3, r4
 8003662:	d9fa      	bls.n	800365a <_free_r+0x42>
 8003664:	6811      	ldr	r1, [r2, #0]
 8003666:	1850      	adds	r0, r2, r1
 8003668:	42a0      	cmp	r0, r4
 800366a:	d10b      	bne.n	8003684 <_free_r+0x6c>
 800366c:	6820      	ldr	r0, [r4, #0]
 800366e:	4401      	add	r1, r0
 8003670:	1850      	adds	r0, r2, r1
 8003672:	4283      	cmp	r3, r0
 8003674:	6011      	str	r1, [r2, #0]
 8003676:	d1e0      	bne.n	800363a <_free_r+0x22>
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	6053      	str	r3, [r2, #4]
 800367e:	4408      	add	r0, r1
 8003680:	6010      	str	r0, [r2, #0]
 8003682:	e7da      	b.n	800363a <_free_r+0x22>
 8003684:	d902      	bls.n	800368c <_free_r+0x74>
 8003686:	230c      	movs	r3, #12
 8003688:	602b      	str	r3, [r5, #0]
 800368a:	e7d6      	b.n	800363a <_free_r+0x22>
 800368c:	6820      	ldr	r0, [r4, #0]
 800368e:	1821      	adds	r1, r4, r0
 8003690:	428b      	cmp	r3, r1
 8003692:	bf04      	itt	eq
 8003694:	6819      	ldreq	r1, [r3, #0]
 8003696:	685b      	ldreq	r3, [r3, #4]
 8003698:	6063      	str	r3, [r4, #4]
 800369a:	bf04      	itt	eq
 800369c:	1809      	addeq	r1, r1, r0
 800369e:	6021      	streq	r1, [r4, #0]
 80036a0:	6054      	str	r4, [r2, #4]
 80036a2:	e7ca      	b.n	800363a <_free_r+0x22>
 80036a4:	bd38      	pop	{r3, r4, r5, pc}
 80036a6:	bf00      	nop
 80036a8:	200002d4 	.word	0x200002d4

080036ac <sbrk_aligned>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	4e0f      	ldr	r6, [pc, #60]	@ (80036ec <sbrk_aligned+0x40>)
 80036b0:	460c      	mov	r4, r1
 80036b2:	6831      	ldr	r1, [r6, #0]
 80036b4:	4605      	mov	r5, r0
 80036b6:	b911      	cbnz	r1, 80036be <sbrk_aligned+0x12>
 80036b8:	f000 fba6 	bl	8003e08 <_sbrk_r>
 80036bc:	6030      	str	r0, [r6, #0]
 80036be:	4621      	mov	r1, r4
 80036c0:	4628      	mov	r0, r5
 80036c2:	f000 fba1 	bl	8003e08 <_sbrk_r>
 80036c6:	1c43      	adds	r3, r0, #1
 80036c8:	d103      	bne.n	80036d2 <sbrk_aligned+0x26>
 80036ca:	f04f 34ff 	mov.w	r4, #4294967295
 80036ce:	4620      	mov	r0, r4
 80036d0:	bd70      	pop	{r4, r5, r6, pc}
 80036d2:	1cc4      	adds	r4, r0, #3
 80036d4:	f024 0403 	bic.w	r4, r4, #3
 80036d8:	42a0      	cmp	r0, r4
 80036da:	d0f8      	beq.n	80036ce <sbrk_aligned+0x22>
 80036dc:	1a21      	subs	r1, r4, r0
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 fb92 	bl	8003e08 <_sbrk_r>
 80036e4:	3001      	adds	r0, #1
 80036e6:	d1f2      	bne.n	80036ce <sbrk_aligned+0x22>
 80036e8:	e7ef      	b.n	80036ca <sbrk_aligned+0x1e>
 80036ea:	bf00      	nop
 80036ec:	200002d0 	.word	0x200002d0

080036f0 <_malloc_r>:
 80036f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f4:	1ccd      	adds	r5, r1, #3
 80036f6:	f025 0503 	bic.w	r5, r5, #3
 80036fa:	3508      	adds	r5, #8
 80036fc:	2d0c      	cmp	r5, #12
 80036fe:	bf38      	it	cc
 8003700:	250c      	movcc	r5, #12
 8003702:	2d00      	cmp	r5, #0
 8003704:	4606      	mov	r6, r0
 8003706:	db01      	blt.n	800370c <_malloc_r+0x1c>
 8003708:	42a9      	cmp	r1, r5
 800370a:	d904      	bls.n	8003716 <_malloc_r+0x26>
 800370c:	230c      	movs	r3, #12
 800370e:	6033      	str	r3, [r6, #0]
 8003710:	2000      	movs	r0, #0
 8003712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80037ec <_malloc_r+0xfc>
 800371a:	f000 f869 	bl	80037f0 <__malloc_lock>
 800371e:	f8d8 3000 	ldr.w	r3, [r8]
 8003722:	461c      	mov	r4, r3
 8003724:	bb44      	cbnz	r4, 8003778 <_malloc_r+0x88>
 8003726:	4629      	mov	r1, r5
 8003728:	4630      	mov	r0, r6
 800372a:	f7ff ffbf 	bl	80036ac <sbrk_aligned>
 800372e:	1c43      	adds	r3, r0, #1
 8003730:	4604      	mov	r4, r0
 8003732:	d158      	bne.n	80037e6 <_malloc_r+0xf6>
 8003734:	f8d8 4000 	ldr.w	r4, [r8]
 8003738:	4627      	mov	r7, r4
 800373a:	2f00      	cmp	r7, #0
 800373c:	d143      	bne.n	80037c6 <_malloc_r+0xd6>
 800373e:	2c00      	cmp	r4, #0
 8003740:	d04b      	beq.n	80037da <_malloc_r+0xea>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	4639      	mov	r1, r7
 8003746:	4630      	mov	r0, r6
 8003748:	eb04 0903 	add.w	r9, r4, r3
 800374c:	f000 fb5c 	bl	8003e08 <_sbrk_r>
 8003750:	4581      	cmp	r9, r0
 8003752:	d142      	bne.n	80037da <_malloc_r+0xea>
 8003754:	6821      	ldr	r1, [r4, #0]
 8003756:	1a6d      	subs	r5, r5, r1
 8003758:	4629      	mov	r1, r5
 800375a:	4630      	mov	r0, r6
 800375c:	f7ff ffa6 	bl	80036ac <sbrk_aligned>
 8003760:	3001      	adds	r0, #1
 8003762:	d03a      	beq.n	80037da <_malloc_r+0xea>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	442b      	add	r3, r5
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	f8d8 3000 	ldr.w	r3, [r8]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	bb62      	cbnz	r2, 80037cc <_malloc_r+0xdc>
 8003772:	f8c8 7000 	str.w	r7, [r8]
 8003776:	e00f      	b.n	8003798 <_malloc_r+0xa8>
 8003778:	6822      	ldr	r2, [r4, #0]
 800377a:	1b52      	subs	r2, r2, r5
 800377c:	d420      	bmi.n	80037c0 <_malloc_r+0xd0>
 800377e:	2a0b      	cmp	r2, #11
 8003780:	d917      	bls.n	80037b2 <_malloc_r+0xc2>
 8003782:	1961      	adds	r1, r4, r5
 8003784:	42a3      	cmp	r3, r4
 8003786:	6025      	str	r5, [r4, #0]
 8003788:	bf18      	it	ne
 800378a:	6059      	strne	r1, [r3, #4]
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	bf08      	it	eq
 8003790:	f8c8 1000 	streq.w	r1, [r8]
 8003794:	5162      	str	r2, [r4, r5]
 8003796:	604b      	str	r3, [r1, #4]
 8003798:	4630      	mov	r0, r6
 800379a:	f000 f82f 	bl	80037fc <__malloc_unlock>
 800379e:	f104 000b 	add.w	r0, r4, #11
 80037a2:	1d23      	adds	r3, r4, #4
 80037a4:	f020 0007 	bic.w	r0, r0, #7
 80037a8:	1ac2      	subs	r2, r0, r3
 80037aa:	bf1c      	itt	ne
 80037ac:	1a1b      	subne	r3, r3, r0
 80037ae:	50a3      	strne	r3, [r4, r2]
 80037b0:	e7af      	b.n	8003712 <_malloc_r+0x22>
 80037b2:	6862      	ldr	r2, [r4, #4]
 80037b4:	42a3      	cmp	r3, r4
 80037b6:	bf0c      	ite	eq
 80037b8:	f8c8 2000 	streq.w	r2, [r8]
 80037bc:	605a      	strne	r2, [r3, #4]
 80037be:	e7eb      	b.n	8003798 <_malloc_r+0xa8>
 80037c0:	4623      	mov	r3, r4
 80037c2:	6864      	ldr	r4, [r4, #4]
 80037c4:	e7ae      	b.n	8003724 <_malloc_r+0x34>
 80037c6:	463c      	mov	r4, r7
 80037c8:	687f      	ldr	r7, [r7, #4]
 80037ca:	e7b6      	b.n	800373a <_malloc_r+0x4a>
 80037cc:	461a      	mov	r2, r3
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	42a3      	cmp	r3, r4
 80037d2:	d1fb      	bne.n	80037cc <_malloc_r+0xdc>
 80037d4:	2300      	movs	r3, #0
 80037d6:	6053      	str	r3, [r2, #4]
 80037d8:	e7de      	b.n	8003798 <_malloc_r+0xa8>
 80037da:	230c      	movs	r3, #12
 80037dc:	6033      	str	r3, [r6, #0]
 80037de:	4630      	mov	r0, r6
 80037e0:	f000 f80c 	bl	80037fc <__malloc_unlock>
 80037e4:	e794      	b.n	8003710 <_malloc_r+0x20>
 80037e6:	6005      	str	r5, [r0, #0]
 80037e8:	e7d6      	b.n	8003798 <_malloc_r+0xa8>
 80037ea:	bf00      	nop
 80037ec:	200002d4 	.word	0x200002d4

080037f0 <__malloc_lock>:
 80037f0:	4801      	ldr	r0, [pc, #4]	@ (80037f8 <__malloc_lock+0x8>)
 80037f2:	f7ff bf0f 	b.w	8003614 <__retarget_lock_acquire_recursive>
 80037f6:	bf00      	nop
 80037f8:	200002cc 	.word	0x200002cc

080037fc <__malloc_unlock>:
 80037fc:	4801      	ldr	r0, [pc, #4]	@ (8003804 <__malloc_unlock+0x8>)
 80037fe:	f7ff bf0a 	b.w	8003616 <__retarget_lock_release_recursive>
 8003802:	bf00      	nop
 8003804:	200002cc 	.word	0x200002cc

08003808 <__ssputs_r>:
 8003808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	688e      	ldr	r6, [r1, #8]
 800380e:	461f      	mov	r7, r3
 8003810:	42be      	cmp	r6, r7
 8003812:	680b      	ldr	r3, [r1, #0]
 8003814:	4682      	mov	sl, r0
 8003816:	460c      	mov	r4, r1
 8003818:	4690      	mov	r8, r2
 800381a:	d82d      	bhi.n	8003878 <__ssputs_r+0x70>
 800381c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003820:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003824:	d026      	beq.n	8003874 <__ssputs_r+0x6c>
 8003826:	6965      	ldr	r5, [r4, #20]
 8003828:	6909      	ldr	r1, [r1, #16]
 800382a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800382e:	eba3 0901 	sub.w	r9, r3, r1
 8003832:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003836:	1c7b      	adds	r3, r7, #1
 8003838:	444b      	add	r3, r9
 800383a:	106d      	asrs	r5, r5, #1
 800383c:	429d      	cmp	r5, r3
 800383e:	bf38      	it	cc
 8003840:	461d      	movcc	r5, r3
 8003842:	0553      	lsls	r3, r2, #21
 8003844:	d527      	bpl.n	8003896 <__ssputs_r+0x8e>
 8003846:	4629      	mov	r1, r5
 8003848:	f7ff ff52 	bl	80036f0 <_malloc_r>
 800384c:	4606      	mov	r6, r0
 800384e:	b360      	cbz	r0, 80038aa <__ssputs_r+0xa2>
 8003850:	6921      	ldr	r1, [r4, #16]
 8003852:	464a      	mov	r2, r9
 8003854:	f000 fae8 	bl	8003e28 <memcpy>
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800385e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003862:	81a3      	strh	r3, [r4, #12]
 8003864:	6126      	str	r6, [r4, #16]
 8003866:	6165      	str	r5, [r4, #20]
 8003868:	444e      	add	r6, r9
 800386a:	eba5 0509 	sub.w	r5, r5, r9
 800386e:	6026      	str	r6, [r4, #0]
 8003870:	60a5      	str	r5, [r4, #8]
 8003872:	463e      	mov	r6, r7
 8003874:	42be      	cmp	r6, r7
 8003876:	d900      	bls.n	800387a <__ssputs_r+0x72>
 8003878:	463e      	mov	r6, r7
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	4632      	mov	r2, r6
 800387e:	4641      	mov	r1, r8
 8003880:	f000 faa8 	bl	8003dd4 <memmove>
 8003884:	68a3      	ldr	r3, [r4, #8]
 8003886:	1b9b      	subs	r3, r3, r6
 8003888:	60a3      	str	r3, [r4, #8]
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	4433      	add	r3, r6
 800388e:	6023      	str	r3, [r4, #0]
 8003890:	2000      	movs	r0, #0
 8003892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003896:	462a      	mov	r2, r5
 8003898:	f000 fad4 	bl	8003e44 <_realloc_r>
 800389c:	4606      	mov	r6, r0
 800389e:	2800      	cmp	r0, #0
 80038a0:	d1e0      	bne.n	8003864 <__ssputs_r+0x5c>
 80038a2:	6921      	ldr	r1, [r4, #16]
 80038a4:	4650      	mov	r0, sl
 80038a6:	f7ff feb7 	bl	8003618 <_free_r>
 80038aa:	230c      	movs	r3, #12
 80038ac:	f8ca 3000 	str.w	r3, [sl]
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038b6:	81a3      	strh	r3, [r4, #12]
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	e7e9      	b.n	8003892 <__ssputs_r+0x8a>
	...

080038c0 <_svfiprintf_r>:
 80038c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c4:	4698      	mov	r8, r3
 80038c6:	898b      	ldrh	r3, [r1, #12]
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	b09d      	sub	sp, #116	@ 0x74
 80038cc:	4607      	mov	r7, r0
 80038ce:	460d      	mov	r5, r1
 80038d0:	4614      	mov	r4, r2
 80038d2:	d510      	bpl.n	80038f6 <_svfiprintf_r+0x36>
 80038d4:	690b      	ldr	r3, [r1, #16]
 80038d6:	b973      	cbnz	r3, 80038f6 <_svfiprintf_r+0x36>
 80038d8:	2140      	movs	r1, #64	@ 0x40
 80038da:	f7ff ff09 	bl	80036f0 <_malloc_r>
 80038de:	6028      	str	r0, [r5, #0]
 80038e0:	6128      	str	r0, [r5, #16]
 80038e2:	b930      	cbnz	r0, 80038f2 <_svfiprintf_r+0x32>
 80038e4:	230c      	movs	r3, #12
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	b01d      	add	sp, #116	@ 0x74
 80038ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f2:	2340      	movs	r3, #64	@ 0x40
 80038f4:	616b      	str	r3, [r5, #20]
 80038f6:	2300      	movs	r3, #0
 80038f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80038fa:	2320      	movs	r3, #32
 80038fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003900:	f8cd 800c 	str.w	r8, [sp, #12]
 8003904:	2330      	movs	r3, #48	@ 0x30
 8003906:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003aa4 <_svfiprintf_r+0x1e4>
 800390a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800390e:	f04f 0901 	mov.w	r9, #1
 8003912:	4623      	mov	r3, r4
 8003914:	469a      	mov	sl, r3
 8003916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800391a:	b10a      	cbz	r2, 8003920 <_svfiprintf_r+0x60>
 800391c:	2a25      	cmp	r2, #37	@ 0x25
 800391e:	d1f9      	bne.n	8003914 <_svfiprintf_r+0x54>
 8003920:	ebba 0b04 	subs.w	fp, sl, r4
 8003924:	d00b      	beq.n	800393e <_svfiprintf_r+0x7e>
 8003926:	465b      	mov	r3, fp
 8003928:	4622      	mov	r2, r4
 800392a:	4629      	mov	r1, r5
 800392c:	4638      	mov	r0, r7
 800392e:	f7ff ff6b 	bl	8003808 <__ssputs_r>
 8003932:	3001      	adds	r0, #1
 8003934:	f000 80a7 	beq.w	8003a86 <_svfiprintf_r+0x1c6>
 8003938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800393a:	445a      	add	r2, fp
 800393c:	9209      	str	r2, [sp, #36]	@ 0x24
 800393e:	f89a 3000 	ldrb.w	r3, [sl]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 809f 	beq.w	8003a86 <_svfiprintf_r+0x1c6>
 8003948:	2300      	movs	r3, #0
 800394a:	f04f 32ff 	mov.w	r2, #4294967295
 800394e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003952:	f10a 0a01 	add.w	sl, sl, #1
 8003956:	9304      	str	r3, [sp, #16]
 8003958:	9307      	str	r3, [sp, #28]
 800395a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800395e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003960:	4654      	mov	r4, sl
 8003962:	2205      	movs	r2, #5
 8003964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003968:	484e      	ldr	r0, [pc, #312]	@ (8003aa4 <_svfiprintf_r+0x1e4>)
 800396a:	f7fc fc39 	bl	80001e0 <memchr>
 800396e:	9a04      	ldr	r2, [sp, #16]
 8003970:	b9d8      	cbnz	r0, 80039aa <_svfiprintf_r+0xea>
 8003972:	06d0      	lsls	r0, r2, #27
 8003974:	bf44      	itt	mi
 8003976:	2320      	movmi	r3, #32
 8003978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800397c:	0711      	lsls	r1, r2, #28
 800397e:	bf44      	itt	mi
 8003980:	232b      	movmi	r3, #43	@ 0x2b
 8003982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003986:	f89a 3000 	ldrb.w	r3, [sl]
 800398a:	2b2a      	cmp	r3, #42	@ 0x2a
 800398c:	d015      	beq.n	80039ba <_svfiprintf_r+0xfa>
 800398e:	9a07      	ldr	r2, [sp, #28]
 8003990:	4654      	mov	r4, sl
 8003992:	2000      	movs	r0, #0
 8003994:	f04f 0c0a 	mov.w	ip, #10
 8003998:	4621      	mov	r1, r4
 800399a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800399e:	3b30      	subs	r3, #48	@ 0x30
 80039a0:	2b09      	cmp	r3, #9
 80039a2:	d94b      	bls.n	8003a3c <_svfiprintf_r+0x17c>
 80039a4:	b1b0      	cbz	r0, 80039d4 <_svfiprintf_r+0x114>
 80039a6:	9207      	str	r2, [sp, #28]
 80039a8:	e014      	b.n	80039d4 <_svfiprintf_r+0x114>
 80039aa:	eba0 0308 	sub.w	r3, r0, r8
 80039ae:	fa09 f303 	lsl.w	r3, r9, r3
 80039b2:	4313      	orrs	r3, r2
 80039b4:	9304      	str	r3, [sp, #16]
 80039b6:	46a2      	mov	sl, r4
 80039b8:	e7d2      	b.n	8003960 <_svfiprintf_r+0xa0>
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	1d19      	adds	r1, r3, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	9103      	str	r1, [sp, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bfbb      	ittet	lt
 80039c6:	425b      	neglt	r3, r3
 80039c8:	f042 0202 	orrlt.w	r2, r2, #2
 80039cc:	9307      	strge	r3, [sp, #28]
 80039ce:	9307      	strlt	r3, [sp, #28]
 80039d0:	bfb8      	it	lt
 80039d2:	9204      	strlt	r2, [sp, #16]
 80039d4:	7823      	ldrb	r3, [r4, #0]
 80039d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80039d8:	d10a      	bne.n	80039f0 <_svfiprintf_r+0x130>
 80039da:	7863      	ldrb	r3, [r4, #1]
 80039dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80039de:	d132      	bne.n	8003a46 <_svfiprintf_r+0x186>
 80039e0:	9b03      	ldr	r3, [sp, #12]
 80039e2:	1d1a      	adds	r2, r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	9203      	str	r2, [sp, #12]
 80039e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039ec:	3402      	adds	r4, #2
 80039ee:	9305      	str	r3, [sp, #20]
 80039f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ab4 <_svfiprintf_r+0x1f4>
 80039f4:	7821      	ldrb	r1, [r4, #0]
 80039f6:	2203      	movs	r2, #3
 80039f8:	4650      	mov	r0, sl
 80039fa:	f7fc fbf1 	bl	80001e0 <memchr>
 80039fe:	b138      	cbz	r0, 8003a10 <_svfiprintf_r+0x150>
 8003a00:	9b04      	ldr	r3, [sp, #16]
 8003a02:	eba0 000a 	sub.w	r0, r0, sl
 8003a06:	2240      	movs	r2, #64	@ 0x40
 8003a08:	4082      	lsls	r2, r0
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	3401      	adds	r4, #1
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a14:	4824      	ldr	r0, [pc, #144]	@ (8003aa8 <_svfiprintf_r+0x1e8>)
 8003a16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a1a:	2206      	movs	r2, #6
 8003a1c:	f7fc fbe0 	bl	80001e0 <memchr>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d036      	beq.n	8003a92 <_svfiprintf_r+0x1d2>
 8003a24:	4b21      	ldr	r3, [pc, #132]	@ (8003aac <_svfiprintf_r+0x1ec>)
 8003a26:	bb1b      	cbnz	r3, 8003a70 <_svfiprintf_r+0x1b0>
 8003a28:	9b03      	ldr	r3, [sp, #12]
 8003a2a:	3307      	adds	r3, #7
 8003a2c:	f023 0307 	bic.w	r3, r3, #7
 8003a30:	3308      	adds	r3, #8
 8003a32:	9303      	str	r3, [sp, #12]
 8003a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a36:	4433      	add	r3, r6
 8003a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a3a:	e76a      	b.n	8003912 <_svfiprintf_r+0x52>
 8003a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a40:	460c      	mov	r4, r1
 8003a42:	2001      	movs	r0, #1
 8003a44:	e7a8      	b.n	8003998 <_svfiprintf_r+0xd8>
 8003a46:	2300      	movs	r3, #0
 8003a48:	3401      	adds	r4, #1
 8003a4a:	9305      	str	r3, [sp, #20]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f04f 0c0a 	mov.w	ip, #10
 8003a52:	4620      	mov	r0, r4
 8003a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a58:	3a30      	subs	r2, #48	@ 0x30
 8003a5a:	2a09      	cmp	r2, #9
 8003a5c:	d903      	bls.n	8003a66 <_svfiprintf_r+0x1a6>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0c6      	beq.n	80039f0 <_svfiprintf_r+0x130>
 8003a62:	9105      	str	r1, [sp, #20]
 8003a64:	e7c4      	b.n	80039f0 <_svfiprintf_r+0x130>
 8003a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e7f0      	b.n	8003a52 <_svfiprintf_r+0x192>
 8003a70:	ab03      	add	r3, sp, #12
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	462a      	mov	r2, r5
 8003a76:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab0 <_svfiprintf_r+0x1f0>)
 8003a78:	a904      	add	r1, sp, #16
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	f3af 8000 	nop.w
 8003a80:	1c42      	adds	r2, r0, #1
 8003a82:	4606      	mov	r6, r0
 8003a84:	d1d6      	bne.n	8003a34 <_svfiprintf_r+0x174>
 8003a86:	89ab      	ldrh	r3, [r5, #12]
 8003a88:	065b      	lsls	r3, r3, #25
 8003a8a:	f53f af2d 	bmi.w	80038e8 <_svfiprintf_r+0x28>
 8003a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a90:	e72c      	b.n	80038ec <_svfiprintf_r+0x2c>
 8003a92:	ab03      	add	r3, sp, #12
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	462a      	mov	r2, r5
 8003a98:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <_svfiprintf_r+0x1f0>)
 8003a9a:	a904      	add	r1, sp, #16
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	f000 f879 	bl	8003b94 <_printf_i>
 8003aa2:	e7ed      	b.n	8003a80 <_svfiprintf_r+0x1c0>
 8003aa4:	08003eec 	.word	0x08003eec
 8003aa8:	08003ef6 	.word	0x08003ef6
 8003aac:	00000000 	.word	0x00000000
 8003ab0:	08003809 	.word	0x08003809
 8003ab4:	08003ef2 	.word	0x08003ef2

08003ab8 <_printf_common>:
 8003ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003abc:	4616      	mov	r6, r2
 8003abe:	4698      	mov	r8, r3
 8003ac0:	688a      	ldr	r2, [r1, #8]
 8003ac2:	690b      	ldr	r3, [r1, #16]
 8003ac4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bfb8      	it	lt
 8003acc:	4613      	movlt	r3, r2
 8003ace:	6033      	str	r3, [r6, #0]
 8003ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	b10a      	cbz	r2, 8003ade <_printf_common+0x26>
 8003ada:	3301      	adds	r3, #1
 8003adc:	6033      	str	r3, [r6, #0]
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	0699      	lsls	r1, r3, #26
 8003ae2:	bf42      	ittt	mi
 8003ae4:	6833      	ldrmi	r3, [r6, #0]
 8003ae6:	3302      	addmi	r3, #2
 8003ae8:	6033      	strmi	r3, [r6, #0]
 8003aea:	6825      	ldr	r5, [r4, #0]
 8003aec:	f015 0506 	ands.w	r5, r5, #6
 8003af0:	d106      	bne.n	8003b00 <_printf_common+0x48>
 8003af2:	f104 0a19 	add.w	sl, r4, #25
 8003af6:	68e3      	ldr	r3, [r4, #12]
 8003af8:	6832      	ldr	r2, [r6, #0]
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	42ab      	cmp	r3, r5
 8003afe:	dc26      	bgt.n	8003b4e <_printf_common+0x96>
 8003b00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b04:	6822      	ldr	r2, [r4, #0]
 8003b06:	3b00      	subs	r3, #0
 8003b08:	bf18      	it	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	0692      	lsls	r2, r2, #26
 8003b0e:	d42b      	bmi.n	8003b68 <_printf_common+0xb0>
 8003b10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b14:	4641      	mov	r1, r8
 8003b16:	4638      	mov	r0, r7
 8003b18:	47c8      	blx	r9
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d01e      	beq.n	8003b5c <_printf_common+0xa4>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	6922      	ldr	r2, [r4, #16]
 8003b22:	f003 0306 	and.w	r3, r3, #6
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	bf02      	ittt	eq
 8003b2a:	68e5      	ldreq	r5, [r4, #12]
 8003b2c:	6833      	ldreq	r3, [r6, #0]
 8003b2e:	1aed      	subeq	r5, r5, r3
 8003b30:	68a3      	ldr	r3, [r4, #8]
 8003b32:	bf0c      	ite	eq
 8003b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b38:	2500      	movne	r5, #0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfc4      	itt	gt
 8003b3e:	1a9b      	subgt	r3, r3, r2
 8003b40:	18ed      	addgt	r5, r5, r3
 8003b42:	2600      	movs	r6, #0
 8003b44:	341a      	adds	r4, #26
 8003b46:	42b5      	cmp	r5, r6
 8003b48:	d11a      	bne.n	8003b80 <_printf_common+0xc8>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e008      	b.n	8003b60 <_printf_common+0xa8>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4652      	mov	r2, sl
 8003b52:	4641      	mov	r1, r8
 8003b54:	4638      	mov	r0, r7
 8003b56:	47c8      	blx	r9
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d103      	bne.n	8003b64 <_printf_common+0xac>
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	3501      	adds	r5, #1
 8003b66:	e7c6      	b.n	8003af6 <_printf_common+0x3e>
 8003b68:	18e1      	adds	r1, r4, r3
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	2030      	movs	r0, #48	@ 0x30
 8003b6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b72:	4422      	add	r2, r4
 8003b74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	e7c7      	b.n	8003b10 <_printf_common+0x58>
 8003b80:	2301      	movs	r3, #1
 8003b82:	4622      	mov	r2, r4
 8003b84:	4641      	mov	r1, r8
 8003b86:	4638      	mov	r0, r7
 8003b88:	47c8      	blx	r9
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d0e6      	beq.n	8003b5c <_printf_common+0xa4>
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7d9      	b.n	8003b46 <_printf_common+0x8e>
	...

08003b94 <_printf_i>:
 8003b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	7e0f      	ldrb	r7, [r1, #24]
 8003b9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b9c:	2f78      	cmp	r7, #120	@ 0x78
 8003b9e:	4691      	mov	r9, r2
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	469a      	mov	sl, r3
 8003ba6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003baa:	d807      	bhi.n	8003bbc <_printf_i+0x28>
 8003bac:	2f62      	cmp	r7, #98	@ 0x62
 8003bae:	d80a      	bhi.n	8003bc6 <_printf_i+0x32>
 8003bb0:	2f00      	cmp	r7, #0
 8003bb2:	f000 80d2 	beq.w	8003d5a <_printf_i+0x1c6>
 8003bb6:	2f58      	cmp	r7, #88	@ 0x58
 8003bb8:	f000 80b9 	beq.w	8003d2e <_printf_i+0x19a>
 8003bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bc4:	e03a      	b.n	8003c3c <_printf_i+0xa8>
 8003bc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bca:	2b15      	cmp	r3, #21
 8003bcc:	d8f6      	bhi.n	8003bbc <_printf_i+0x28>
 8003bce:	a101      	add	r1, pc, #4	@ (adr r1, 8003bd4 <_printf_i+0x40>)
 8003bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bd4:	08003c2d 	.word	0x08003c2d
 8003bd8:	08003c41 	.word	0x08003c41
 8003bdc:	08003bbd 	.word	0x08003bbd
 8003be0:	08003bbd 	.word	0x08003bbd
 8003be4:	08003bbd 	.word	0x08003bbd
 8003be8:	08003bbd 	.word	0x08003bbd
 8003bec:	08003c41 	.word	0x08003c41
 8003bf0:	08003bbd 	.word	0x08003bbd
 8003bf4:	08003bbd 	.word	0x08003bbd
 8003bf8:	08003bbd 	.word	0x08003bbd
 8003bfc:	08003bbd 	.word	0x08003bbd
 8003c00:	08003d41 	.word	0x08003d41
 8003c04:	08003c6b 	.word	0x08003c6b
 8003c08:	08003cfb 	.word	0x08003cfb
 8003c0c:	08003bbd 	.word	0x08003bbd
 8003c10:	08003bbd 	.word	0x08003bbd
 8003c14:	08003d63 	.word	0x08003d63
 8003c18:	08003bbd 	.word	0x08003bbd
 8003c1c:	08003c6b 	.word	0x08003c6b
 8003c20:	08003bbd 	.word	0x08003bbd
 8003c24:	08003bbd 	.word	0x08003bbd
 8003c28:	08003d03 	.word	0x08003d03
 8003c2c:	6833      	ldr	r3, [r6, #0]
 8003c2e:	1d1a      	adds	r2, r3, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6032      	str	r2, [r6, #0]
 8003c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e09d      	b.n	8003d7c <_printf_i+0x1e8>
 8003c40:	6833      	ldr	r3, [r6, #0]
 8003c42:	6820      	ldr	r0, [r4, #0]
 8003c44:	1d19      	adds	r1, r3, #4
 8003c46:	6031      	str	r1, [r6, #0]
 8003c48:	0606      	lsls	r6, r0, #24
 8003c4a:	d501      	bpl.n	8003c50 <_printf_i+0xbc>
 8003c4c:	681d      	ldr	r5, [r3, #0]
 8003c4e:	e003      	b.n	8003c58 <_printf_i+0xc4>
 8003c50:	0645      	lsls	r5, r0, #25
 8003c52:	d5fb      	bpl.n	8003c4c <_printf_i+0xb8>
 8003c54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c58:	2d00      	cmp	r5, #0
 8003c5a:	da03      	bge.n	8003c64 <_printf_i+0xd0>
 8003c5c:	232d      	movs	r3, #45	@ 0x2d
 8003c5e:	426d      	negs	r5, r5
 8003c60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c64:	4859      	ldr	r0, [pc, #356]	@ (8003dcc <_printf_i+0x238>)
 8003c66:	230a      	movs	r3, #10
 8003c68:	e011      	b.n	8003c8e <_printf_i+0xfa>
 8003c6a:	6821      	ldr	r1, [r4, #0]
 8003c6c:	6833      	ldr	r3, [r6, #0]
 8003c6e:	0608      	lsls	r0, r1, #24
 8003c70:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c74:	d402      	bmi.n	8003c7c <_printf_i+0xe8>
 8003c76:	0649      	lsls	r1, r1, #25
 8003c78:	bf48      	it	mi
 8003c7a:	b2ad      	uxthmi	r5, r5
 8003c7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c7e:	4853      	ldr	r0, [pc, #332]	@ (8003dcc <_printf_i+0x238>)
 8003c80:	6033      	str	r3, [r6, #0]
 8003c82:	bf14      	ite	ne
 8003c84:	230a      	movne	r3, #10
 8003c86:	2308      	moveq	r3, #8
 8003c88:	2100      	movs	r1, #0
 8003c8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c8e:	6866      	ldr	r6, [r4, #4]
 8003c90:	60a6      	str	r6, [r4, #8]
 8003c92:	2e00      	cmp	r6, #0
 8003c94:	bfa2      	ittt	ge
 8003c96:	6821      	ldrge	r1, [r4, #0]
 8003c98:	f021 0104 	bicge.w	r1, r1, #4
 8003c9c:	6021      	strge	r1, [r4, #0]
 8003c9e:	b90d      	cbnz	r5, 8003ca4 <_printf_i+0x110>
 8003ca0:	2e00      	cmp	r6, #0
 8003ca2:	d04b      	beq.n	8003d3c <_printf_i+0x1a8>
 8003ca4:	4616      	mov	r6, r2
 8003ca6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003caa:	fb03 5711 	mls	r7, r3, r1, r5
 8003cae:	5dc7      	ldrb	r7, [r0, r7]
 8003cb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cb4:	462f      	mov	r7, r5
 8003cb6:	42bb      	cmp	r3, r7
 8003cb8:	460d      	mov	r5, r1
 8003cba:	d9f4      	bls.n	8003ca6 <_printf_i+0x112>
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d10b      	bne.n	8003cd8 <_printf_i+0x144>
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	07df      	lsls	r7, r3, #31
 8003cc4:	d508      	bpl.n	8003cd8 <_printf_i+0x144>
 8003cc6:	6923      	ldr	r3, [r4, #16]
 8003cc8:	6861      	ldr	r1, [r4, #4]
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	bfde      	ittt	le
 8003cce:	2330      	movle	r3, #48	@ 0x30
 8003cd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cd8:	1b92      	subs	r2, r2, r6
 8003cda:	6122      	str	r2, [r4, #16]
 8003cdc:	f8cd a000 	str.w	sl, [sp]
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	aa03      	add	r2, sp, #12
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	4640      	mov	r0, r8
 8003ce8:	f7ff fee6 	bl	8003ab8 <_printf_common>
 8003cec:	3001      	adds	r0, #1
 8003cee:	d14a      	bne.n	8003d86 <_printf_i+0x1f2>
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	b004      	add	sp, #16
 8003cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	f043 0320 	orr.w	r3, r3, #32
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	4833      	ldr	r0, [pc, #204]	@ (8003dd0 <_printf_i+0x23c>)
 8003d04:	2778      	movs	r7, #120	@ 0x78
 8003d06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	6831      	ldr	r1, [r6, #0]
 8003d0e:	061f      	lsls	r7, r3, #24
 8003d10:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d14:	d402      	bmi.n	8003d1c <_printf_i+0x188>
 8003d16:	065f      	lsls	r7, r3, #25
 8003d18:	bf48      	it	mi
 8003d1a:	b2ad      	uxthmi	r5, r5
 8003d1c:	6031      	str	r1, [r6, #0]
 8003d1e:	07d9      	lsls	r1, r3, #31
 8003d20:	bf44      	itt	mi
 8003d22:	f043 0320 	orrmi.w	r3, r3, #32
 8003d26:	6023      	strmi	r3, [r4, #0]
 8003d28:	b11d      	cbz	r5, 8003d32 <_printf_i+0x19e>
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	e7ac      	b.n	8003c88 <_printf_i+0xf4>
 8003d2e:	4827      	ldr	r0, [pc, #156]	@ (8003dcc <_printf_i+0x238>)
 8003d30:	e7e9      	b.n	8003d06 <_printf_i+0x172>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	f023 0320 	bic.w	r3, r3, #32
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	e7f6      	b.n	8003d2a <_printf_i+0x196>
 8003d3c:	4616      	mov	r6, r2
 8003d3e:	e7bd      	b.n	8003cbc <_printf_i+0x128>
 8003d40:	6833      	ldr	r3, [r6, #0]
 8003d42:	6825      	ldr	r5, [r4, #0]
 8003d44:	6961      	ldr	r1, [r4, #20]
 8003d46:	1d18      	adds	r0, r3, #4
 8003d48:	6030      	str	r0, [r6, #0]
 8003d4a:	062e      	lsls	r6, r5, #24
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	d501      	bpl.n	8003d54 <_printf_i+0x1c0>
 8003d50:	6019      	str	r1, [r3, #0]
 8003d52:	e002      	b.n	8003d5a <_printf_i+0x1c6>
 8003d54:	0668      	lsls	r0, r5, #25
 8003d56:	d5fb      	bpl.n	8003d50 <_printf_i+0x1bc>
 8003d58:	8019      	strh	r1, [r3, #0]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	6123      	str	r3, [r4, #16]
 8003d5e:	4616      	mov	r6, r2
 8003d60:	e7bc      	b.n	8003cdc <_printf_i+0x148>
 8003d62:	6833      	ldr	r3, [r6, #0]
 8003d64:	1d1a      	adds	r2, r3, #4
 8003d66:	6032      	str	r2, [r6, #0]
 8003d68:	681e      	ldr	r6, [r3, #0]
 8003d6a:	6862      	ldr	r2, [r4, #4]
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4630      	mov	r0, r6
 8003d70:	f7fc fa36 	bl	80001e0 <memchr>
 8003d74:	b108      	cbz	r0, 8003d7a <_printf_i+0x1e6>
 8003d76:	1b80      	subs	r0, r0, r6
 8003d78:	6060      	str	r0, [r4, #4]
 8003d7a:	6863      	ldr	r3, [r4, #4]
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d84:	e7aa      	b.n	8003cdc <_printf_i+0x148>
 8003d86:	6923      	ldr	r3, [r4, #16]
 8003d88:	4632      	mov	r2, r6
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	4640      	mov	r0, r8
 8003d8e:	47d0      	blx	sl
 8003d90:	3001      	adds	r0, #1
 8003d92:	d0ad      	beq.n	8003cf0 <_printf_i+0x15c>
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	079b      	lsls	r3, r3, #30
 8003d98:	d413      	bmi.n	8003dc2 <_printf_i+0x22e>
 8003d9a:	68e0      	ldr	r0, [r4, #12]
 8003d9c:	9b03      	ldr	r3, [sp, #12]
 8003d9e:	4298      	cmp	r0, r3
 8003da0:	bfb8      	it	lt
 8003da2:	4618      	movlt	r0, r3
 8003da4:	e7a6      	b.n	8003cf4 <_printf_i+0x160>
 8003da6:	2301      	movs	r3, #1
 8003da8:	4632      	mov	r2, r6
 8003daa:	4649      	mov	r1, r9
 8003dac:	4640      	mov	r0, r8
 8003dae:	47d0      	blx	sl
 8003db0:	3001      	adds	r0, #1
 8003db2:	d09d      	beq.n	8003cf0 <_printf_i+0x15c>
 8003db4:	3501      	adds	r5, #1
 8003db6:	68e3      	ldr	r3, [r4, #12]
 8003db8:	9903      	ldr	r1, [sp, #12]
 8003dba:	1a5b      	subs	r3, r3, r1
 8003dbc:	42ab      	cmp	r3, r5
 8003dbe:	dcf2      	bgt.n	8003da6 <_printf_i+0x212>
 8003dc0:	e7eb      	b.n	8003d9a <_printf_i+0x206>
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	f104 0619 	add.w	r6, r4, #25
 8003dc8:	e7f5      	b.n	8003db6 <_printf_i+0x222>
 8003dca:	bf00      	nop
 8003dcc:	08003efd 	.word	0x08003efd
 8003dd0:	08003f0e 	.word	0x08003f0e

08003dd4 <memmove>:
 8003dd4:	4288      	cmp	r0, r1
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	eb01 0402 	add.w	r4, r1, r2
 8003ddc:	d902      	bls.n	8003de4 <memmove+0x10>
 8003dde:	4284      	cmp	r4, r0
 8003de0:	4623      	mov	r3, r4
 8003de2:	d807      	bhi.n	8003df4 <memmove+0x20>
 8003de4:	1e43      	subs	r3, r0, #1
 8003de6:	42a1      	cmp	r1, r4
 8003de8:	d008      	beq.n	8003dfc <memmove+0x28>
 8003dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003df2:	e7f8      	b.n	8003de6 <memmove+0x12>
 8003df4:	4402      	add	r2, r0
 8003df6:	4601      	mov	r1, r0
 8003df8:	428a      	cmp	r2, r1
 8003dfa:	d100      	bne.n	8003dfe <memmove+0x2a>
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e06:	e7f7      	b.n	8003df8 <memmove+0x24>

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4d06      	ldr	r5, [pc, #24]	@ (8003e24 <_sbrk_r+0x1c>)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fc fe46 	bl	8000aa4 <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	200002c8 	.word	0x200002c8

08003e28 <memcpy>:
 8003e28:	440a      	add	r2, r1
 8003e2a:	4291      	cmp	r1, r2
 8003e2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e30:	d100      	bne.n	8003e34 <memcpy+0xc>
 8003e32:	4770      	bx	lr
 8003e34:	b510      	push	{r4, lr}
 8003e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e3e:	4291      	cmp	r1, r2
 8003e40:	d1f9      	bne.n	8003e36 <memcpy+0xe>
 8003e42:	bd10      	pop	{r4, pc}

08003e44 <_realloc_r>:
 8003e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e48:	4680      	mov	r8, r0
 8003e4a:	4615      	mov	r5, r2
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	b921      	cbnz	r1, 8003e5a <_realloc_r+0x16>
 8003e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e54:	4611      	mov	r1, r2
 8003e56:	f7ff bc4b 	b.w	80036f0 <_malloc_r>
 8003e5a:	b92a      	cbnz	r2, 8003e68 <_realloc_r+0x24>
 8003e5c:	f7ff fbdc 	bl	8003618 <_free_r>
 8003e60:	2400      	movs	r4, #0
 8003e62:	4620      	mov	r0, r4
 8003e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e68:	f000 f81a 	bl	8003ea0 <_malloc_usable_size_r>
 8003e6c:	4285      	cmp	r5, r0
 8003e6e:	4606      	mov	r6, r0
 8003e70:	d802      	bhi.n	8003e78 <_realloc_r+0x34>
 8003e72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003e76:	d8f4      	bhi.n	8003e62 <_realloc_r+0x1e>
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4640      	mov	r0, r8
 8003e7c:	f7ff fc38 	bl	80036f0 <_malloc_r>
 8003e80:	4607      	mov	r7, r0
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d0ec      	beq.n	8003e60 <_realloc_r+0x1c>
 8003e86:	42b5      	cmp	r5, r6
 8003e88:	462a      	mov	r2, r5
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	bf28      	it	cs
 8003e8e:	4632      	movcs	r2, r6
 8003e90:	f7ff ffca 	bl	8003e28 <memcpy>
 8003e94:	4621      	mov	r1, r4
 8003e96:	4640      	mov	r0, r8
 8003e98:	f7ff fbbe 	bl	8003618 <_free_r>
 8003e9c:	463c      	mov	r4, r7
 8003e9e:	e7e0      	b.n	8003e62 <_realloc_r+0x1e>

08003ea0 <_malloc_usable_size_r>:
 8003ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ea4:	1f18      	subs	r0, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bfbc      	itt	lt
 8003eaa:	580b      	ldrlt	r3, [r1, r0]
 8003eac:	18c0      	addlt	r0, r0, r3
 8003eae:	4770      	bx	lr

08003eb0 <_init>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	bf00      	nop
 8003eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb6:	bc08      	pop	{r3}
 8003eb8:	469e      	mov	lr, r3
 8003eba:	4770      	bx	lr

08003ebc <_fini>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	bf00      	nop
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr
