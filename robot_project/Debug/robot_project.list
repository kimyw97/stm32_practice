
robot_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005718  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080058a8  080058a8  000068a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005918  08005918  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005918  08005918  00006918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005920  08005920  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005920  08005920  00006920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005924  08005924  00006924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005928  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000594  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005fc  200005fc  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e63  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026d5  00000000  00000000  00018efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  0001b5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc0  00000000  00000000  0001c780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f423  00000000  00000000  0001d540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154e3  00000000  00000000  0003c963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000baba7  00000000  00000000  00051e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c9ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005430  00000000  00000000  0010ca30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00111e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005890 	.word	0x08005890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005890 	.word	0x08005890

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f000 fd8b 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f821 	bl	8000afc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f000 f9d1 	bl	8000e60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000abe:	f000 f87f 	bl	8000bc0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ac2:	f000 f8bd 	bl	8000c40 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000ac6:	f000 f9a9 	bl	8000e1c <MX_USB_PCD_Init>
  MX_TIM3_Init();
 8000aca:	f000 f94b 	bl	8000d64 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000ace:	f000 f8f5 	bl	8000cbc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4807      	ldr	r0, [pc, #28]	@ (8000af4 <main+0x48>)
 8000ad6:	f002 ffe3 	bl	8003aa0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  int distance = HCSR04_GetDistance();
 8000ada:	f000 faa1 	bl	8001020 <HCSR04_GetDistance>
 8000ade:	6078      	str	r0, [r7, #4]
	  	  printf("distance: ", distance);
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <main+0x4c>)
 8000ae4:	f004 f868 	bl	8004bb8 <iprintf>
	  	  Set_Servo_Angle(distance);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f000 fa59 	bl	8000fa0 <Set_Servo_Angle>
  {
 8000aee:	bf00      	nop
 8000af0:	e7f3      	b.n	8000ada <main+0x2e>
 8000af2:	bf00      	nop
 8000af4:	20000188 	.word	0x20000188
 8000af8:	080058a8 	.word	0x080058a8

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b09e      	sub	sp, #120	@ 0x78
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b06:	2228      	movs	r2, #40	@ 0x28
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 f866 	bl	8004bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	223c      	movs	r2, #60	@ 0x3c
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 f858 	bl	8004bdc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b30:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b34:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	2302      	movs	r3, #2
 8000b44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b4a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b4c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b50:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b52:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fa28 	bl	8001fac <HAL_RCC_OscConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b62:	f000 fab9 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	230f      	movs	r3, #15
 8000b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b80:	2102      	movs	r1, #2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f002 fa50 	bl	8003028 <HAL_RCC_ClockConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b8e:	f000 faa3 	bl	80010d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <SystemClock_Config+0xc0>)
 8000b94:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fc0f 	bl	80033c8 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000bb0:	f000 fa92 	bl	80010d8 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3778      	adds	r7, #120	@ 0x78
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	00021020 	.word	0x00021020

08000bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <MX_I2C1_Init+0x78>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c3c <MX_I2C1_Init+0x7c>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000be2:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfa:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000bfc:	f000 ffdc 	bl	8001bb8 <HAL_I2C_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c06:	f000 fa67 	bl	80010d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000c0e:	f001 f86e 	bl	8001cee <HAL_I2CEx_ConfigAnalogFilter>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c18:	f000 fa5e 	bl	80010d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_I2C1_Init+0x74>)
 8000c20:	f001 f8b0 	bl	8001d84 <HAL_I2CEx_ConfigDigitalFilter>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f000 fa55 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000084 	.word	0x20000084
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	00201d2b 	.word	0x00201d2b

08000c40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <MX_SPI1_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c5a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c76:	2208      	movs	r2, #8
 8000c78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c8e:	2207      	movs	r2, #7
 8000c90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_SPI1_Init+0x74>)
 8000ca0:	f002 fd42 	bl	8003728 <HAL_SPI_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000caa:	f000 fa15 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000d8 	.word	0x200000d8
 8000cb8:	40013000 	.word	0x40013000

08000cbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cda:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <MX_TIM1_Init+0xa0>)
 8000cdc:	4a20      	ldr	r2, [pc, #128]	@ (8000d60 <MX_TIM1_Init+0xa4>)
 8000cde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d5c <MX_TIM1_Init+0xa0>)
 8000ce2:	2247      	movs	r2, #71	@ 0x47
 8000ce4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <MX_TIM1_Init+0xa0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <MX_TIM1_Init+0xa0>)
 8000cee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <MX_TIM1_Init+0xa0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_TIM1_Init+0xa0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <MX_TIM1_Init+0xa0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d06:	4815      	ldr	r0, [pc, #84]	@ (8000d5c <MX_TIM1_Init+0xa0>)
 8000d08:	f002 fdb9 	bl	800387e <HAL_TIM_Base_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d12:	f000 f9e1 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	480e      	ldr	r0, [pc, #56]	@ (8000d5c <MX_TIM1_Init+0xa0>)
 8000d24:	f003 f8d0 	bl	8003ec8 <HAL_TIM_ConfigClockSource>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d2e:	f000 f9d3 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <MX_TIM1_Init+0xa0>)
 8000d44:	f003 fdbc 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d4e:	f000 f9c3 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000013c 	.word	0x2000013c
 8000d60:	40012c00 	.word	0x40012c00

08000d64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d88:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <MX_TIM3_Init+0xb0>)
 8000d8a:	4a23      	ldr	r2, [pc, #140]	@ (8000e18 <MX_TIM3_Init+0xb4>)
 8000d8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_TIM3_Init+0xb0>)
 8000d90:	2247      	movs	r2, #71	@ 0x47
 8000d92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_TIM3_Init+0xb0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e14 <MX_TIM3_Init+0xb0>)
 8000d9c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000da0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_TIM3_Init+0xb0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_TIM3_Init+0xb0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dae:	4819      	ldr	r0, [pc, #100]	@ (8000e14 <MX_TIM3_Init+0xb0>)
 8000db0:	f002 fe1e 	bl	80039f0 <HAL_TIM_PWM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000dba:	f000 f98d 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4811      	ldr	r0, [pc, #68]	@ (8000e14 <MX_TIM3_Init+0xb0>)
 8000dce:	f003 fd77 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000dd8:	f000 f97e 	bl	80010d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2360      	movs	r3, #96	@ 0x60
 8000dde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8000de0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <MX_TIM3_Init+0xb0>)
 8000df6:	f002 ff53 	bl	8003ca0 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000e00:	f000 f96a 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e04:	4803      	ldr	r0, [pc, #12]	@ (8000e14 <MX_TIM3_Init+0xb0>)
 8000e06:	f000 fa57 	bl	80012b8 <HAL_TIM_MspPostInit>

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	@ 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000188 	.word	0x20000188
 8000e18:	40000400 	.word	0x40000400

08000e1c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MX_USB_PCD_Init+0x3c>)
 8000e22:	4a0e      	ldr	r2, [pc, #56]	@ (8000e5c <MX_USB_PCD_Init+0x40>)
 8000e24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <MX_USB_PCD_Init+0x3c>)
 8000e28:	2208      	movs	r2, #8
 8000e2a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_USB_PCD_Init+0x3c>)
 8000e2e:	2202      	movs	r2, #2
 8000e30:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_USB_PCD_Init+0x3c>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <MX_USB_PCD_Init+0x3c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_USB_PCD_Init+0x3c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_USB_PCD_Init+0x3c>)
 8000e46:	f000 ffe9 	bl	8001e1c <HAL_PCD_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000e50:	f000 f942 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001d4 	.word	0x200001d4
 8000e5c:	40005c00 	.word	0x40005c00

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e76:	4b47      	ldr	r3, [pc, #284]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a46      	ldr	r2, [pc, #280]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b44      	ldr	r3, [pc, #272]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	4b41      	ldr	r3, [pc, #260]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a40      	ldr	r2, [pc, #256]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a3a      	ldr	r2, [pc, #232]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000eac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b38      	ldr	r3, [pc, #224]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b35      	ldr	r3, [pc, #212]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a34      	ldr	r2, [pc, #208]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b32      	ldr	r3, [pc, #200]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	4a2e      	ldr	r2, [pc, #184]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee0:	6153      	str	r3, [r2, #20]
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f94 <MX_GPIO_Init+0x134>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000ef4:	4828      	ldr	r0, [pc, #160]	@ (8000f98 <MX_GPIO_Init+0x138>)
 8000ef6:	f000 fe47 	bl	8001b88 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2107      	movs	r1, #7
 8000efe:	4827      	ldr	r0, [pc, #156]	@ (8000f9c <MX_GPIO_Init+0x13c>)
 8000f00:	f000 fe42 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000f04:	2337      	movs	r3, #55	@ 0x37
 8000f06:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f08:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	481f      	ldr	r0, [pc, #124]	@ (8000f98 <MX_GPIO_Init+0x138>)
 8000f1a:	f000 fca3 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f1e:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000f22:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <MX_GPIO_Init+0x138>)
 8000f38:	f000 fc94 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <MX_GPIO_Init+0x13c>)
 8000f54:	f000 fc86 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <MX_GPIO_Init+0x13c>)
 8000f6c:	f000 fc7a 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f70:	2301      	movs	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f86:	f000 fc6d 	bl	8001864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	@ 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48001000 	.word	0x48001000
 8000f9c:	48000800 	.word	0x48000800

08000fa0 <Set_Servo_Angle>:

/* USER CODE BEGIN 4 */
void Set_Servo_Angle(uint8_t angle) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
    // angle: 0 to 180
    uint32_t pulse = (angle * (2000 - 1000) / 180) + 1000;  // 1ms ~ 2ms
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	4a09      	ldr	r2, [pc, #36]	@ (8000fdc <Set_Servo_Angle+0x3c>)
 8000fb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fba:	441a      	add	r2, r3
 8000fbc:	11d2      	asrs	r2, r2, #7
 8000fbe:	17db      	asrs	r3, r3, #31
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000fc6:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <Set_Servo_Angle+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	b60b60b7 	.word	0xb60b60b7
 8000fe0:	20000188 	.word	0x20000188

08000fe4 <delay_us>:

void delay_us(uint16_t us) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);  // 타이머 초기화
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <delay_us+0x38>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim1);
 8000ff6:	4809      	ldr	r0, [pc, #36]	@ (800101c <delay_us+0x38>)
 8000ff8:	f002 fc98 	bl	800392c <HAL_TIM_Base_Start>
    int timercount;
    timercount = __HAL_TIM_GET_COUNTER(&htim1);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <delay_us+0x38>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001002:	60fb      	str	r3, [r7, #12]
    while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // 원하는 시간만큼 대기
 8001004:	bf00      	nop
 8001006:	4b05      	ldr	r3, [pc, #20]	@ (800101c <delay_us+0x38>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	429a      	cmp	r2, r3
 8001010:	d3f9      	bcc.n	8001006 <delay_us+0x22>
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000013c 	.word	0x2000013c

08001020 <HCSR04_GetDistance>:
void HCSR04_Init() {
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
    HAL_Delay(20);  // 안정화
}

int HCSR04_GetDistance() {
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
    uint32_t start_time, end_time;
    float distance;

    // 트리거 핀에 펄스 신호 전달
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2104      	movs	r1, #4
 800102a:	4829      	ldr	r0, [pc, #164]	@ (80010d0 <HCSR04_GetDistance+0xb0>)
 800102c:	f000 fdac 	bl	8001b88 <HAL_GPIO_WritePin>
    delay_us(20);
 8001030:	2014      	movs	r0, #20
 8001032:	f7ff ffd7 	bl	8000fe4 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2104      	movs	r1, #4
 800103a:	4825      	ldr	r0, [pc, #148]	@ (80010d0 <HCSR04_GetDistance+0xb0>)
 800103c:	f000 fda4 	bl	8001b88 <HAL_GPIO_WritePin>

    // 에코 핀 HIGH 신호 감지 시작
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET);
 8001040:	bf00      	nop
 8001042:	2108      	movs	r1, #8
 8001044:	4822      	ldr	r0, [pc, #136]	@ (80010d0 <HCSR04_GetDistance+0xb0>)
 8001046:	f000 fd87 	bl	8001b58 <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f8      	beq.n	8001042 <HCSR04_GetDistance+0x22>
    start_time = __HAL_TIM_GET_COUNTER(&htim1);
 8001050:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <HCSR04_GetDistance+0xb4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001056:	617b      	str	r3, [r7, #20]

    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET);
 8001058:	bf00      	nop
 800105a:	2108      	movs	r1, #8
 800105c:	481c      	ldr	r0, [pc, #112]	@ (80010d0 <HCSR04_GetDistance+0xb0>)
 800105e:	f000 fd7b 	bl	8001b58 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d0f8      	beq.n	800105a <HCSR04_GetDistance+0x3a>
    end_time = __HAL_TIM_GET_COUNTER(&htim1);
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <HCSR04_GetDistance+0xb4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	613b      	str	r3, [r7, #16]

    // HIGH 신호 시간 계산
    uint32_t time_elapsed = end_time - start_time;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	60fb      	str	r3, [r7, #12]

    // 거리 계산
    distance = (time_elapsed * 0.034) / 2.0;  // cm 단위로 변환
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff fa3b 	bl	80004f4 <__aeabi_ui2d>
 800107e:	a312      	add	r3, pc, #72	@ (adr r3, 80010c8 <HCSR04_GetDistance+0xa8>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fab0 	bl	80005e8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001098:	f7ff fbd0 	bl	800083c <__aeabi_ddiv>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fcb2 	bl	8000a0c <__aeabi_d2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60bb      	str	r3, [r7, #8]
   int result = distance;
 80010ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b4:	ee17 3a90 	vmov	r3, s15
 80010b8:	607b      	str	r3, [r7, #4]
    return result;
 80010ba:	687b      	ldr	r3, [r7, #4]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	f3af 8000 	nop.w
 80010c8:	b020c49c 	.word	0xb020c49c
 80010cc:	3fa16872 	.word	0x3fa16872
 80010d0:	48000800 	.word	0x48000800
 80010d4:	2000013c 	.word	0x2000013c

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <Error_Handler+0x8>

080010e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <HAL_MspInit+0x44>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <HAL_MspInit+0x44>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <HAL_MspInit+0x44>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <HAL_MspInit+0x44>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <HAL_MspInit+0x44>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_MspInit+0x44>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800111a:	2007      	movs	r0, #7
 800111c:	f000 fb6e 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <HAL_I2C_MspInit+0x7c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d127      	bne.n	800119e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <HAL_I2C_MspInit+0x80>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	4a16      	ldr	r2, [pc, #88]	@ (80011ac <HAL_I2C_MspInit+0x80>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001158:	6153      	str	r3, [r2, #20]
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_I2C_MspInit+0x80>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001166:	23c0      	movs	r3, #192	@ 0xc0
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116a:	2312      	movs	r3, #18
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001176:	2304      	movs	r3, #4
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	480b      	ldr	r0, [pc, #44]	@ (80011b0 <HAL_I2C_MspInit+0x84>)
 8001182:	f000 fb6f 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <HAL_I2C_MspInit+0x80>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a08      	ldr	r2, [pc, #32]	@ (80011ac <HAL_I2C_MspInit+0x80>)
 800118c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_I2C_MspInit+0x80>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	@ 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40005400 	.word	0x40005400
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000400 	.word	0x48000400

080011b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <HAL_SPI_MspInit+0x7c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d128      	bne.n	8001228 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d6:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <HAL_SPI_MspInit+0x80>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	4a16      	ldr	r2, [pc, #88]	@ (8001234 <HAL_SPI_MspInit+0x80>)
 80011dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011e0:	6193      	str	r3, [r2, #24]
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <HAL_SPI_MspInit+0x80>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_SPI_MspInit+0x80>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <HAL_SPI_MspInit+0x80>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <HAL_SPI_MspInit+0x80>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001206:	23e0      	movs	r3, #224	@ 0xe0
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001216:	2305      	movs	r3, #5
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001224:	f000 fb1e 	bl	8001864 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	@ 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40013000 	.word	0x40013000
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <HAL_TIM_Base_MspInit+0x38>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d10b      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_TIM_Base_MspInit+0x3c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a09      	ldr	r2, [pc, #36]	@ (8001274 <HAL_TIM_Base_MspInit+0x3c>)
 8001250:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001254:	6193      	str	r3, [r2, #24]
 8001256:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <HAL_TIM_Base_MspInit+0x3c>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40012c00 	.word	0x40012c00
 8001274:	40021000 	.word	0x40021000

08001278 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <HAL_TIM_PWM_MspInit+0x38>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10b      	bne.n	80012a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40000400 	.word	0x40000400
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a11      	ldr	r2, [pc, #68]	@ (800131c <HAL_TIM_MspPostInit+0x64>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d11b      	bne.n	8001312 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <HAL_TIM_MspPostInit+0x68>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <HAL_TIM_MspPostInit+0x68>)
 80012e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80012e4:	6153      	str	r3, [r2, #20]
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <HAL_TIM_MspPostInit+0x68>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f2:	2340      	movs	r3, #64	@ 0x40
 80012f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001302:	2302      	movs	r3, #2
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	@ (8001324 <HAL_TIM_MspPostInit+0x6c>)
 800130e:	f000 faa9 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40000400 	.word	0x40000400
 8001320:	40021000 	.word	0x40021000
 8001324:	48000800 	.word	0x48000800

08001328 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <HAL_PCD_MspInit+0x80>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d129      	bne.n	800139e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_PCD_MspInit+0x84>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <HAL_PCD_MspInit+0x84>)
 8001350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001354:	6153      	str	r3, [r2, #20]
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_PCD_MspInit+0x84>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001362:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001374:	230e      	movs	r3, #14
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001382:	f000 fa6f 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_PCD_MspInit+0x84>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_PCD_MspInit+0x84>)
 800138c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_PCD_MspInit+0x84>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40005c00 	.word	0x40005c00
 80013ac:	40021000 	.word	0x40021000

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <NMI_Handler+0x4>

080013b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <MemManage_Handler+0x4>

080013c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001406:	f000 f927 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}

0800140e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e00a      	b.n	8001436 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001420:	f3af 8000 	nop.w
 8001424:	4601      	mov	r1, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	60ba      	str	r2, [r7, #8]
 800142c:	b2ca      	uxtb	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	dbf0      	blt.n	8001420 <_read+0x12>
  }

  return len;
 800143e:	687b      	ldr	r3, [r7, #4]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e009      	b.n	800146e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	60ba      	str	r2, [r7, #8]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	dbf1      	blt.n	800145a <_write+0x12>
  }
  return len;
 8001476:	687b      	ldr	r3, [r7, #4]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_close>:

int _close(int file)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a8:	605a      	str	r2, [r3, #4]
  return 0;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_isatty>:

int _isatty(int file)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c0:	2301      	movs	r3, #1
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f003 fb68 	bl	8004bec <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	@ (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000a000 	.word	0x2000a000
 8001548:	00000400 	.word	0x00000400
 800154c:	200004a8 	.word	0x200004a8
 8001550:	20000600 	.word	0x20000600

08001554 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800157c:	f7ff ffea 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	@ (80015b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	@ (80015b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <LoopForever+0xe>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	@ (80015c4 <LoopForever+0x16>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a6:	f003 fb27 	bl	8004bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015aa:	f7ff fa7f 	bl	8000aac <main>

080015ae <LoopForever>:

LoopForever:
    b LoopForever
 80015ae:	e7fe      	b.n	80015ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015b0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015bc:	08005928 	.word	0x08005928
  ldr r2, =_sbss
 80015c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015c4:	200005fc 	.word	0x200005fc

080015c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC1_2_IRQHandler>
	...

080015cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <HAL_Init+0x28>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <HAL_Init+0x28>)
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 f90d 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff fd7c 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40022000 	.word	0x40022000

080015f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f917 	bl	800184a <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001634:	f000 f8ed 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000008 	.word	0x20000008
 800167c:	200004ac 	.word	0x200004ac

08001680 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;  
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200004ac 	.word	0x200004ac

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	@ (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	@ (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	@ 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017dc:	f7ff ff8e 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff47 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff5c 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff8e 	bl	8001750 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5d 	bl	80016fc <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffb0 	bl	80017b8 <SysTick_Config>
 8001858:	4603      	mov	r3, r0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001872:	e154      	b.n	8001b1e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa01 f303 	lsl.w	r3, r1, r3
 8001880:	4013      	ands	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8146 	beq.w	8001b18 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d005      	beq.n	80018a4 <HAL_GPIO_Init+0x40>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d130      	bne.n	8001906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018da:	2201      	movs	r2, #1
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	f003 0201 	and.w	r2, r3, #1
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b03      	cmp	r3, #3
 8001910:	d017      	beq.n	8001942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2203      	movs	r2, #3
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d123      	bne.n	8001996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	6939      	ldr	r1, [r7, #16]
 8001992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0203 	and.w	r2, r3, #3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80a0 	beq.w	8001b18 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d8:	4b58      	ldr	r3, [pc, #352]	@ (8001b3c <HAL_GPIO_Init+0x2d8>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a57      	ldr	r2, [pc, #348]	@ (8001b3c <HAL_GPIO_Init+0x2d8>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b55      	ldr	r3, [pc, #340]	@ (8001b3c <HAL_GPIO_Init+0x2d8>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f0:	4a53      	ldr	r2, [pc, #332]	@ (8001b40 <HAL_GPIO_Init+0x2dc>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a1a:	d019      	beq.n	8001a50 <HAL_GPIO_Init+0x1ec>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a49      	ldr	r2, [pc, #292]	@ (8001b44 <HAL_GPIO_Init+0x2e0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_GPIO_Init+0x1e8>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a48      	ldr	r2, [pc, #288]	@ (8001b48 <HAL_GPIO_Init+0x2e4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00d      	beq.n	8001a48 <HAL_GPIO_Init+0x1e4>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a47      	ldr	r2, [pc, #284]	@ (8001b4c <HAL_GPIO_Init+0x2e8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d007      	beq.n	8001a44 <HAL_GPIO_Init+0x1e0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a46      	ldr	r2, [pc, #280]	@ (8001b50 <HAL_GPIO_Init+0x2ec>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_GPIO_Init+0x1dc>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	e008      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a40:	2305      	movs	r3, #5
 8001a42:	e006      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a44:	2303      	movs	r3, #3
 8001a46:	e004      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e002      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_GPIO_Init+0x1ee>
 8001a50:	2300      	movs	r3, #0
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	f002 0203 	and.w	r2, r2, #3
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	4093      	lsls	r3, r2
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a62:	4937      	ldr	r1, [pc, #220]	@ (8001b40 <HAL_GPIO_Init+0x2dc>)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a70:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a94:	4a2f      	ldr	r2, [pc, #188]	@ (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001abe:	4a25      	ldr	r2, [pc, #148]	@ (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ac4:	4b23      	ldr	r3, [pc, #140]	@ (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aee:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b12:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <HAL_GPIO_Init+0x2f0>)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f47f aea3 	bne.w	8001874 <HAL_GPIO_Init+0x10>
  }
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000
 8001b44:	48000400 	.word	0x48000400
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	48000c00 	.word	0x48000c00
 8001b50:	48001000 	.word	0x48001000
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e08d      	b.n	8001ce6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff faa4 	bl	800112c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2224      	movs	r2, #36	@ 0x24
 8001be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d107      	bne.n	8001c32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	e006      	b.n	8001c40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d108      	bne.n	8001c5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	e007      	b.n	8001c6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69d9      	ldr	r1, [r3, #28]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1a      	ldr	r2, [r3, #32]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d138      	bne.n	8001d76 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e032      	b.n	8001d78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2224      	movs	r2, #36	@ 0x24
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0201 	bic.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d40:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6819      	ldr	r1, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d76:	2302      	movs	r3, #2
  }
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d139      	bne.n	8001e0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e033      	b.n	8001e10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2224      	movs	r2, #36	@ 0x24
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001dd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
  }
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0b9      	b.n	8001fa2 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fa70 	bl	8001328 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 fdb3 	bl	80049c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e03e      	b.n	8001ede <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3311      	adds	r3, #17
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	3310      	adds	r3, #16
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3313      	adds	r3, #19
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3320      	adds	r3, #32
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3324      	adds	r3, #36	@ 0x24
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	3301      	adds	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	791b      	ldrb	r3, [r3, #4]
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d3bb      	bcc.n	8001e60 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e044      	b.n	8001f78 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	3301      	adds	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	791b      	ldrb	r3, [r3, #4]
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3b5      	bcc.n	8001eee <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f8e:	f002 fd32 	bl	80049f6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fbc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f001 b823 	b.w	8003018 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 817d 	beq.w	80022e2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fe8:	4bbc      	ldr	r3, [pc, #752]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d00c      	beq.n	800200e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff4:	4bb9      	ldr	r3, [pc, #740]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d15c      	bne.n	80020ba <HAL_RCC_OscConfig+0x10e>
 8002000:	4bb6      	ldr	r3, [pc, #728]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800200c:	d155      	bne.n	80020ba <HAL_RCC_OscConfig+0x10e>
 800200e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002012:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002022:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d102      	bne.n	8002040 <HAL_RCC_OscConfig+0x94>
 800203a:	4ba8      	ldr	r3, [pc, #672]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	e015      	b.n	800206c <HAL_RCC_OscConfig+0xc0>
 8002040:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002044:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002054:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002058:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800205c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002068:	4b9c      	ldr	r3, [pc, #624]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002070:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002074:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002078:	fa92 f2a2 	rbit	r2, r2
 800207c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002080:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	f042 0220 	orr.w	r2, r2, #32
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f002 021f 	and.w	r2, r2, #31
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 811f 	beq.w	80022e0 <HAL_RCC_OscConfig+0x334>
 80020a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8116 	bne.w	80022e0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f000 bfaf 	b.w	8003018 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x12e>
 80020cc:	4b83      	ldr	r3, [pc, #524]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a82      	ldr	r2, [pc, #520]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e036      	b.n	8002148 <HAL_RCC_OscConfig+0x19c>
 80020da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x158>
 80020ea:	4b7c      	ldr	r3, [pc, #496]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7b      	ldr	r2, [pc, #492]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 80020f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b79      	ldr	r3, [pc, #484]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a78      	ldr	r2, [pc, #480]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 80020fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e021      	b.n	8002148 <HAL_RCC_OscConfig+0x19c>
 8002104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002108:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x184>
 8002116:	4b71      	ldr	r3, [pc, #452]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a70      	ldr	r2, [pc, #448]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 800211c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b6e      	ldr	r3, [pc, #440]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a6d      	ldr	r2, [pc, #436]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0x19c>
 8002130:	4b6a      	ldr	r3, [pc, #424]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a69      	ldr	r2, [pc, #420]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 8002136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b67      	ldr	r3, [pc, #412]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a66      	ldr	r2, [pc, #408]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 8002142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002146:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002148:	4b64      	ldr	r3, [pc, #400]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	f023 020f 	bic.w	r2, r3, #15
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	495f      	ldr	r1, [pc, #380]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 800215e:	4313      	orrs	r3, r2
 8002160:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002166:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d059      	beq.n	8002226 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7ff fa85 	bl	8001680 <HAL_GetTick>
 8002176:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	e00a      	b.n	8002192 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fa80 	bl	8001680 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b64      	cmp	r3, #100	@ 0x64
 800218a:	d902      	bls.n	8002192 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	f000 bf43 	b.w	8003018 <HAL_RCC_OscConfig+0x106c>
 8002192:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002196:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80021a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0x218>
 80021be:	4b47      	ldr	r3, [pc, #284]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	e015      	b.n	80021f0 <HAL_RCC_OscConfig+0x244>
 80021c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021c8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80021d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021dc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80021e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80021e4:	fa93 f3a3 	rbit	r3, r3
 80021e8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021f4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80021f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80021fc:	fa92 f2a2 	rbit	r2, r2
 8002200:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002204:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002208:	fab2 f282 	clz	r2, r2
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f042 0220 	orr.w	r2, r2, #32
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f002 021f 	and.w	r2, r2, #31
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f202 	lsl.w	r2, r1, r2
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ab      	beq.n	800217c <HAL_RCC_OscConfig+0x1d0>
 8002224:	e05d      	b.n	80022e2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7ff fa2b 	bl	8001680 <HAL_GetTick>
 800222a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002230:	f7ff fa26 	bl	8001680 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b64      	cmp	r3, #100	@ 0x64
 800223e:	d902      	bls.n	8002246 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	f000 bee9 	b.w	8003018 <HAL_RCC_OscConfig+0x106c>
 8002246:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800224a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800225a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <HAL_RCC_OscConfig+0x2cc>
 8002272:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	e015      	b.n	80022a4 <HAL_RCC_OscConfig+0x2f8>
 8002278:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800227c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800228c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002290:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002294:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002298:	fa93 f3a3 	rbit	r3, r3
 800229c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80022a0:	4b0e      	ldr	r3, [pc, #56]	@ (80022dc <HAL_RCC_OscConfig+0x330>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022a8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80022ac:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80022b0:	fa92 f2a2 	rbit	r2, r2
 80022b4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80022b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f042 0220 	orr.w	r2, r2, #32
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	f002 021f 	and.w	r2, r2, #31
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f202 	lsl.w	r2, r1, r2
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ab      	bne.n	8002230 <HAL_RCC_OscConfig+0x284>
 80022d8:	e003      	b.n	80022e2 <HAL_RCC_OscConfig+0x336>
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 817d 	beq.w	80025f2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022f8:	4ba6      	ldr	r3, [pc, #664]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002304:	4ba3      	ldr	r3, [pc, #652]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d172      	bne.n	80023f6 <HAL_RCC_OscConfig+0x44a>
 8002310:	4ba0      	ldr	r3, [pc, #640]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d16c      	bne.n	80023f6 <HAL_RCC_OscConfig+0x44a>
 800231c:	2302      	movs	r3, #2
 800231e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800232e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <HAL_RCC_OscConfig+0x3a0>
 8002346:	4b93      	ldr	r3, [pc, #588]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	e013      	b.n	8002374 <HAL_RCC_OscConfig+0x3c8>
 800234c:	2302      	movs	r3, #2
 800234e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002364:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002370:	4b88      	ldr	r3, [pc, #544]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	2202      	movs	r2, #2
 8002376:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800237a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002386:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800238a:	fab2 f282 	clz	r2, r2
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f042 0220 	orr.w	r2, r2, #32
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	f002 021f 	and.w	r2, r2, #31
 800239a:	2101      	movs	r1, #1
 800239c:	fa01 f202 	lsl.w	r2, r1, r2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCC_OscConfig+0x410>
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d002      	beq.n	80023bc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f000 be2e 	b.w	8003018 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b75      	ldr	r3, [pc, #468]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	21f8      	movs	r1, #248	@ 0xf8
 80023d2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80023da:	fa91 f1a1 	rbit	r1, r1
 80023de:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80023e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80023e6:	fab1 f181 	clz	r1, r1
 80023ea:	b2c9      	uxtb	r1, r1
 80023ec:	408b      	lsls	r3, r1
 80023ee:	4969      	ldr	r1, [pc, #420]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f4:	e0fd      	b.n	80025f2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8088 	beq.w	8002518 <HAL_RCC_OscConfig+0x56c>
 8002408:	2301      	movs	r3, #1
 800240a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800241a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002428:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	461a      	mov	r2, r3
 8002430:	2301      	movs	r3, #1
 8002432:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7ff f924 	bl	8001680 <HAL_GetTick>
 8002438:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243e:	f7ff f91f 	bl	8001680 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d902      	bls.n	8002454 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	f000 bde2 	b.w	8003018 <HAL_RCC_OscConfig+0x106c>
 8002454:	2302      	movs	r3, #2
 8002456:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002466:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d102      	bne.n	8002484 <HAL_RCC_OscConfig+0x4d8>
 800247e:	4b45      	ldr	r3, [pc, #276]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	e013      	b.n	80024ac <HAL_RCC_OscConfig+0x500>
 8002484:	2302      	movs	r3, #2
 8002486:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002496:	2302      	movs	r3, #2
 8002498:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800249c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80024a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	2202      	movs	r2, #2
 80024ae:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80024b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80024b6:	fa92 f2a2 	rbit	r2, r2
 80024ba:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80024be:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80024c2:	fab2 f282 	clz	r2, r2
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f042 0220 	orr.w	r2, r2, #32
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f002 021f 	and.w	r2, r2, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0af      	beq.n	800243e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	4b2d      	ldr	r3, [pc, #180]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	21f8      	movs	r1, #248	@ 0xf8
 80024f4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80024fc:	fa91 f1a1 	rbit	r1, r1
 8002500:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002504:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002508:	fab1 f181 	clz	r1, r1
 800250c:	b2c9      	uxtb	r1, r1
 800250e:	408b      	lsls	r3, r1
 8002510:	4920      	ldr	r1, [pc, #128]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
 8002516:	e06c      	b.n	80025f2 <HAL_RCC_OscConfig+0x646>
 8002518:	2301      	movs	r3, #1
 800251a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800252a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002538:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	461a      	mov	r2, r3
 8002540:	2300      	movs	r3, #0
 8002542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff f89c 	bl	8001680 <HAL_GetTick>
 8002548:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff f897 	bl	8001680 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d902      	bls.n	8002564 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	f000 bd5a 	b.w	8003018 <HAL_RCC_OscConfig+0x106c>
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002576:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d104      	bne.n	8002598 <HAL_RCC_OscConfig+0x5ec>
 800258e:	4b01      	ldr	r3, [pc, #4]	@ (8002594 <HAL_RCC_OscConfig+0x5e8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e015      	b.n	80025c0 <HAL_RCC_OscConfig+0x614>
 8002594:	40021000 	.word	0x40021000
 8002598:	2302      	movs	r3, #2
 800259a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80025aa:	2302      	movs	r3, #2
 80025ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80025b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80025bc:	4bc8      	ldr	r3, [pc, #800]	@ (80028e0 <HAL_RCC_OscConfig+0x934>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	2202      	movs	r2, #2
 80025c2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80025c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80025ca:	fa92 f2a2 	rbit	r2, r2
 80025ce:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80025d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80025d6:	fab2 f282 	clz	r2, r2
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	f042 0220 	orr.w	r2, r2, #32
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f002 021f 	and.w	r2, r2, #31
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ad      	bne.n	800254e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8110 	beq.w	8002828 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d079      	beq.n	800270c <HAL_RCC_OscConfig+0x760>
 8002618:	2301      	movs	r3, #1
 800261a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800262a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	4bab      	ldr	r3, [pc, #684]	@ (80028e4 <HAL_RCC_OscConfig+0x938>)
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	461a      	mov	r2, r3
 800263e:	2301      	movs	r3, #1
 8002640:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7ff f81d 	bl	8001680 <HAL_GetTick>
 8002646:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264c:	f7ff f818 	bl	8001680 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d902      	bls.n	8002662 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	f000 bcdb 	b.w	8003018 <HAL_RCC_OscConfig+0x106c>
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002678:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800267c:	2202      	movs	r2, #2
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	fa93 f2a3 	rbit	r2, r3
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800269c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026a0:	2202      	movs	r2, #2
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026bc:	4b88      	ldr	r3, [pc, #544]	@ (80028e0 <HAL_RCC_OscConfig+0x934>)
 80026be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026c8:	2102      	movs	r1, #2
 80026ca:	6019      	str	r1, [r3, #0]
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	fa93 f1a3 	rbit	r1, r3
 80026da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026e2:	6019      	str	r1, [r3, #0]
  return result;
 80026e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0a0      	beq.n	800264c <HAL_RCC_OscConfig+0x6a0>
 800270a:	e08d      	b.n	8002828 <HAL_RCC_OscConfig+0x87c>
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800272e:	601a      	str	r2, [r3, #0]
  return result;
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002738:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	4b68      	ldr	r3, [pc, #416]	@ (80028e4 <HAL_RCC_OscConfig+0x938>)
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	461a      	mov	r2, r3
 800274a:	2300      	movs	r3, #0
 800274c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7fe ff97 	bl	8001680 <HAL_GetTick>
 8002752:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7fe ff92 	bl	8001680 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d902      	bls.n	800276e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	f000 bc55 	b.w	8003018 <HAL_RCC_OscConfig+0x106c>
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002776:	2202      	movs	r2, #2
 8002778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fa93 f2a3 	rbit	r2, r3
 8002788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002796:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800279a:	2202      	movs	r2, #2
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	fa93 f2a3 	rbit	r2, r3
 80027ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027be:	2202      	movs	r2, #2
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fa93 f2a3 	rbit	r2, r3
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027da:	4b41      	ldr	r3, [pc, #260]	@ (80028e0 <HAL_RCC_OscConfig+0x934>)
 80027dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027e6:	2102      	movs	r1, #2
 80027e8:	6019      	str	r1, [r3, #0]
 80027ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	fa93 f1a3 	rbit	r1, r3
 80027f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002800:	6019      	str	r1, [r3, #0]
  return result;
 8002802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002806:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d197      	bne.n	8002758 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 81a1 	beq.w	8002b80 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002844:	4b26      	ldr	r3, [pc, #152]	@ (80028e0 <HAL_RCC_OscConfig+0x934>)
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d116      	bne.n	800287e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	4b23      	ldr	r3, [pc, #140]	@ (80028e0 <HAL_RCC_OscConfig+0x934>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	4a22      	ldr	r2, [pc, #136]	@ (80028e0 <HAL_RCC_OscConfig+0x934>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285a:	61d3      	str	r3, [r2, #28]
 800285c:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_RCC_OscConfig+0x934>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002868:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002872:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002876:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <HAL_RCC_OscConfig+0x93c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11a      	bne.n	80028c0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <HAL_RCC_OscConfig+0x93c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <HAL_RCC_OscConfig+0x93c>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002894:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7fe fef3 	bl	8001680 <HAL_GetTick>
 800289a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	e009      	b.n	80028b4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a0:	f7fe feee 	bl	8001680 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b64      	cmp	r3, #100	@ 0x64
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e3b1      	b.n	8003018 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <HAL_RCC_OscConfig+0x93c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ef      	beq.n	80028a0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10d      	bne.n	80028ec <HAL_RCC_OscConfig+0x940>
 80028d0:	4b03      	ldr	r3, [pc, #12]	@ (80028e0 <HAL_RCC_OscConfig+0x934>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	4a02      	ldr	r2, [pc, #8]	@ (80028e0 <HAL_RCC_OscConfig+0x934>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6213      	str	r3, [r2, #32]
 80028dc:	e03c      	b.n	8002958 <HAL_RCC_OscConfig+0x9ac>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	10908120 	.word	0x10908120
 80028e8:	40007000 	.word	0x40007000
 80028ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10c      	bne.n	8002916 <HAL_RCC_OscConfig+0x96a>
 80028fc:	4bc1      	ldr	r3, [pc, #772]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4ac0      	ldr	r2, [pc, #768]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6213      	str	r3, [r2, #32]
 8002908:	4bbe      	ldr	r3, [pc, #760]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4abd      	ldr	r2, [pc, #756]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e020      	b.n	8002958 <HAL_RCC_OscConfig+0x9ac>
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b05      	cmp	r3, #5
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x994>
 8002926:	4bb7      	ldr	r3, [pc, #732]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4ab6      	ldr	r2, [pc, #728]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	6213      	str	r3, [r2, #32]
 8002932:	4bb4      	ldr	r3, [pc, #720]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4ab3      	ldr	r2, [pc, #716]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0x9ac>
 8002940:	4bb0      	ldr	r3, [pc, #704]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4aaf      	ldr	r2, [pc, #700]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	4bad      	ldr	r3, [pc, #692]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4aac      	ldr	r2, [pc, #688]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002952:	f023 0304 	bic.w	r3, r3, #4
 8002956:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8081 	beq.w	8002a6c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7fe fe89 	bl	8001680 <HAL_GetTick>
 800296e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7fe fe84 	bl	8001680 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e345      	b.n	8003018 <HAL_RCC_OscConfig+0x106c>
 800298c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002990:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002994:	2202      	movs	r2, #2
 8002996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fa93 f2a3 	rbit	r2, r3
 80029a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029aa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029b8:	2202      	movs	r2, #2
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029d2:	601a      	str	r2, [r3, #0]
  return result;
 80029d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d102      	bne.n	80029f8 <HAL_RCC_OscConfig+0xa4c>
 80029f2:	4b84      	ldr	r3, [pc, #528]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	e013      	b.n	8002a20 <HAL_RCC_OscConfig+0xa74>
 80029f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a00:	2202      	movs	r2, #2
 8002a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a16:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	4b79      	ldr	r3, [pc, #484]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a24:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a28:	2102      	movs	r1, #2
 8002a2a:	6011      	str	r1, [r2, #0]
 8002a2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a30:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	fa92 f1a2 	rbit	r1, r2
 8002a3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a3e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a42:	6011      	str	r1, [r2, #0]
  return result;
 8002a44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a48:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	fab2 f282 	clz	r2, r2
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	f002 021f 	and.w	r2, r2, #31
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f202 	lsl.w	r2, r1, r2
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d084      	beq.n	8002974 <HAL_RCC_OscConfig+0x9c8>
 8002a6a:	e07f      	b.n	8002b6c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fe08 	bl	8001680 <HAL_GetTick>
 8002a70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a74:	e00b      	b.n	8002a8e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fe fe03 	bl	8001680 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e2c4      	b.n	8003018 <HAL_RCC_OscConfig+0x106c>
 8002a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a92:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a96:	2202      	movs	r2, #2
 8002a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f2a3 	rbit	r2, r3
 8002aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aac:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002aba:	2202      	movs	r2, #2
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	fa93 f2a3 	rbit	r2, r3
 8002acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ad4:	601a      	str	r2, [r3, #0]
  return result;
 8002ad6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ada:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ade:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d102      	bne.n	8002afa <HAL_RCC_OscConfig+0xb4e>
 8002af4:	4b43      	ldr	r3, [pc, #268]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	e013      	b.n	8002b22 <HAL_RCC_OscConfig+0xb76>
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b02:	2202      	movs	r2, #2
 8002b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fa93 f2a3 	rbit	r2, r3
 8002b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b18:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	4b39      	ldr	r3, [pc, #228]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b26:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	6011      	str	r1, [r2, #0]
 8002b2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b32:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	fa92 f1a2 	rbit	r1, r2
 8002b3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b40:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b44:	6011      	str	r1, [r2, #0]
  return result;
 8002b46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b4a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	fab2 f282 	clz	r2, r2
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f002 021f 	and.w	r2, r2, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d184      	bne.n	8002a76 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b6c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b23      	ldr	r3, [pc, #140]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b7e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8242 	beq.w	8003016 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b92:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <HAL_RCC_OscConfig+0xc58>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	f000 8213 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	f040 8162 	bne.w	8002e76 <HAL_RCC_OscConfig+0xeca>
 8002bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002bba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002bd6:	601a      	str	r2, [r3, #0]
  return result;
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002be0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fd42 	bl	8001680 <HAL_GetTick>
 8002bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c00:	e00c      	b.n	8002c1c <HAL_RCC_OscConfig+0xc70>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fd3a 	bl	8001680 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e1fd      	b.n	8003018 <HAL_RCC_OscConfig+0x106c>
 8002c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c20:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c40:	601a      	str	r2, [r3, #0]
  return result;
 8002c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c46:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_OscConfig+0xcba>
 8002c60:	4bb0      	ldr	r3, [pc, #704]	@ (8002f24 <HAL_RCC_OscConfig+0xf78>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	e027      	b.n	8002cb6 <HAL_RCC_OscConfig+0xd0a>
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	fa93 f2a3 	rbit	r2, r3
 8002c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c86:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c90:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c9e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	fa93 f2a3 	rbit	r2, r3
 8002ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cac:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	4b9c      	ldr	r3, [pc, #624]	@ (8002f24 <HAL_RCC_OscConfig+0xf78>)
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cba:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002cbe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cc2:	6011      	str	r1, [r2, #0]
 8002cc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cc8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	fa92 f1a2 	rbit	r1, r2
 8002cd2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cd6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cda:	6011      	str	r1, [r2, #0]
  return result;
 8002cdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ce0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	fab2 f282 	clz	r2, r2
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	f042 0220 	orr.w	r2, r2, #32
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	f002 021f 	and.w	r2, r2, #31
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d182      	bne.n	8002c08 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d02:	4b88      	ldr	r3, [pc, #544]	@ (8002f24 <HAL_RCC_OscConfig+0xf78>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	430b      	orrs	r3, r1
 8002d24:	497f      	ldr	r1, [pc, #508]	@ (8002f24 <HAL_RCC_OscConfig+0xf78>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
 8002d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	fa93 f2a3 	rbit	r2, r3
 8002d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d4e:	601a      	str	r2, [r3, #0]
  return result;
 8002d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d54:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d58:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d64:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe fc86 	bl	8001680 <HAL_GetTick>
 8002d74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d78:	e009      	b.n	8002d8e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7fe fc81 	bl	8001680 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e144      	b.n	8003018 <HAL_RCC_OscConfig+0x106c>
 8002d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d92:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	fa93 f2a3 	rbit	r2, r3
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002db2:	601a      	str	r2, [r3, #0]
  return result;
 8002db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002dbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d102      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xe2c>
 8002dd2:	4b54      	ldr	r3, [pc, #336]	@ (8002f24 <HAL_RCC_OscConfig+0xf78>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	e027      	b.n	8002e28 <HAL_RCC_OscConfig+0xe7c>
 8002dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ddc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002de0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dea:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	fa93 f2a3 	rbit	r2, r3
 8002df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e02:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e10:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f2a3 	rbit	r2, r3
 8002e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	4b3f      	ldr	r3, [pc, #252]	@ (8002f24 <HAL_RCC_OscConfig+0xf78>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e2c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e30:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e34:	6011      	str	r1, [r2, #0]
 8002e36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e3a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	fa92 f1a2 	rbit	r1, r2
 8002e44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e48:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e4c:	6011      	str	r1, [r2, #0]
  return result;
 8002e4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e52:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	fab2 f282 	clz	r2, r2
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	f042 0220 	orr.w	r2, r2, #32
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	f002 021f 	and.w	r2, r2, #31
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d082      	beq.n	8002d7a <HAL_RCC_OscConfig+0xdce>
 8002e74:	e0cf      	b.n	8003016 <HAL_RCC_OscConfig+0x106a>
 8002e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e88:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e96:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e9a:	601a      	str	r2, [r3, #0]
  return result;
 8002e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ea4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002eb0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fbe0 	bl	8001680 <HAL_GetTick>
 8002ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec4:	e009      	b.n	8002eda <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe fbdb 	bl	8001680 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e09e      	b.n	8003018 <HAL_RCC_OscConfig+0x106c>
 8002eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ede:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ee2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eec:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	fa93 f2a3 	rbit	r2, r3
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002efe:	601a      	str	r2, [r3, #0]
  return result;
 8002f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f04:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d104      	bne.n	8002f28 <HAL_RCC_OscConfig+0xf7c>
 8002f1e:	4b01      	ldr	r3, [pc, #4]	@ (8002f24 <HAL_RCC_OscConfig+0xf78>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	e029      	b.n	8002f78 <HAL_RCC_OscConfig+0xfcc>
 8002f24:	40021000 	.word	0x40021000
 8002f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fa93 f2a3 	rbit	r2, r3
 8002f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f48:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f60:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	fa93 f2a3 	rbit	r2, r3
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	4b2b      	ldr	r3, [pc, #172]	@ (8003024 <HAL_RCC_OscConfig+0x1078>)
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f7c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f84:	6011      	str	r1, [r2, #0]
 8002f86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f8a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	fa92 f1a2 	rbit	r1, r2
 8002f94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f98:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002f9c:	6011      	str	r1, [r2, #0]
  return result;
 8002f9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	fab2 f282 	clz	r2, r2
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f042 0220 	orr.w	r2, r2, #32
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	f002 021f 	and.w	r2, r2, #31
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d180      	bne.n	8002ec6 <HAL_RCC_OscConfig+0xf1a>
 8002fc4:	e027      	b.n	8003016 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e01e      	b.n	8003018 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <HAL_RCC_OscConfig+0x1078>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fe2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002fe6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d10b      	bne.n	8003012 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ffa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002ffe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003006:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800300e:	429a      	cmp	r2, r3
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000

08003028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b09e      	sub	sp, #120	@ 0x78
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e162      	b.n	8003306 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b90      	ldr	r3, [pc, #576]	@ (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d910      	bls.n	8003070 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b8d      	ldr	r3, [pc, #564]	@ (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 0207 	bic.w	r2, r3, #7
 8003056:	498b      	ldr	r1, [pc, #556]	@ (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b89      	ldr	r3, [pc, #548]	@ (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e14a      	b.n	8003306 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307c:	4b82      	ldr	r3, [pc, #520]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	497f      	ldr	r1, [pc, #508]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80dc 	beq.w	8003254 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d13c      	bne.n	800311e <HAL_RCC_ClockConfig+0xf6>
 80030a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d102      	bne.n	80030ce <HAL_RCC_ClockConfig+0xa6>
 80030c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	e00f      	b.n	80030ee <HAL_RCC_ClockConfig+0xc6>
 80030ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	667b      	str	r3, [r7, #100]	@ 0x64
 80030dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030ea:	4b67      	ldr	r3, [pc, #412]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030f6:	fa92 f2a2 	rbit	r2, r2
 80030fa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80030fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80030fe:	fab2 f282 	clz	r2, r2
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	f042 0220 	orr.w	r2, r2, #32
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	f002 021f 	and.w	r2, r2, #31
 800310e:	2101      	movs	r1, #1
 8003110:	fa01 f202 	lsl.w	r2, r1, r2
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d17b      	bne.n	8003212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0f3      	b.n	8003306 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d13c      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x178>
 8003126:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800312a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <HAL_RCC_ClockConfig+0x128>
 800314a:	4b4f      	ldr	r3, [pc, #316]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	e00f      	b.n	8003170 <HAL_RCC_ClockConfig+0x148>
 8003150:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003154:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	647b      	str	r3, [r7, #68]	@ 0x44
 800315e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003162:	643b      	str	r3, [r7, #64]	@ 0x40
 8003164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800316c:	4b46      	ldr	r3, [pc, #280]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003174:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003176:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003178:	fa92 f2a2 	rbit	r2, r2
 800317c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800317e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003180:	fab2 f282 	clz	r2, r2
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	f042 0220 	orr.w	r2, r2, #32
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	f002 021f 	and.w	r2, r2, #31
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d13a      	bne.n	8003212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0b2      	b.n	8003306 <HAL_RCC_ClockConfig+0x2de>
 80031a0:	2302      	movs	r3, #2
 80031a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d102      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x1a0>
 80031c2:	4b31      	ldr	r3, [pc, #196]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	e00d      	b.n	80031e4 <HAL_RCC_ClockConfig+0x1bc>
 80031c8:	2302      	movs	r3, #2
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d4:	2302      	movs	r3, #2
 80031d6:	623b      	str	r3, [r7, #32]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	4b29      	ldr	r3, [pc, #164]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	2202      	movs	r2, #2
 80031e6:	61ba      	str	r2, [r7, #24]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	fa92 f2a2 	rbit	r2, r2
 80031ee:	617a      	str	r2, [r7, #20]
  return result;
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	fab2 f282 	clz	r2, r2
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	f042 0220 	orr.w	r2, r2, #32
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f002 021f 	and.w	r2, r2, #31
 8003202:	2101      	movs	r1, #1
 8003204:	fa01 f202 	lsl.w	r2, r1, r2
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e079      	b.n	8003306 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003212:	4b1d      	ldr	r3, [pc, #116]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f023 0203 	bic.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	491a      	ldr	r1, [pc, #104]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003224:	f7fe fa2c 	bl	8001680 <HAL_GetTick>
 8003228:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	e00a      	b.n	8003242 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322c:	f7fe fa28 	bl	8001680 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e061      	b.n	8003306 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <HAL_RCC_ClockConfig+0x260>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 020c 	and.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	429a      	cmp	r2, r3
 8003252:	d1eb      	bne.n	800322c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d214      	bcs.n	800328c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 0207 	bic.w	r2, r3, #7
 800326a:	4906      	ldr	r1, [pc, #24]	@ (8003284 <HAL_RCC_ClockConfig+0x25c>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <HAL_RCC_ClockConfig+0x25c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e040      	b.n	8003306 <HAL_RCC_ClockConfig+0x2de>
 8003284:	40022000 	.word	0x40022000
 8003288:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003298:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <HAL_RCC_ClockConfig+0x2e8>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	491a      	ldr	r1, [pc, #104]	@ (8003310 <HAL_RCC_ClockConfig+0x2e8>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b6:	4b16      	ldr	r3, [pc, #88]	@ (8003310 <HAL_RCC_ClockConfig+0x2e8>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4912      	ldr	r1, [pc, #72]	@ (8003310 <HAL_RCC_ClockConfig+0x2e8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032ca:	f000 f829 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 80032ce:	4601      	mov	r1, r0
 80032d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003310 <HAL_RCC_ClockConfig+0x2e8>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032d8:	22f0      	movs	r2, #240	@ 0xf0
 80032da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	fa92 f2a2 	rbit	r2, r2
 80032e2:	60fa      	str	r2, [r7, #12]
  return result;
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	fab2 f282 	clz	r2, r2
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	40d3      	lsrs	r3, r2
 80032ee:	4a09      	ldr	r2, [pc, #36]	@ (8003314 <HAL_RCC_ClockConfig+0x2ec>)
 80032f0:	5cd3      	ldrb	r3, [r2, r3]
 80032f2:	fa21 f303 	lsr.w	r3, r1, r3
 80032f6:	4a08      	ldr	r2, [pc, #32]	@ (8003318 <HAL_RCC_ClockConfig+0x2f0>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032fa:	4b08      	ldr	r3, [pc, #32]	@ (800331c <HAL_RCC_ClockConfig+0x2f4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe f97a 	bl	80015f8 <HAL_InitTick>
  
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3778      	adds	r7, #120	@ 0x78
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	080058b4 	.word	0x080058b4
 8003318:	20000000 	.word	0x20000000
 800331c:	20000004 	.word	0x20000004

08003320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800333a:	4b1e      	ldr	r3, [pc, #120]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b04      	cmp	r3, #4
 8003348:	d002      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x30>
 800334a:	2b08      	cmp	r3, #8
 800334c:	d003      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x36>
 800334e:	e026      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003350:	4b19      	ldr	r3, [pc, #100]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003352:	613b      	str	r3, [r7, #16]
      break;
 8003354:	e026      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	0c9b      	lsrs	r3, r3, #18
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	4a17      	ldr	r2, [pc, #92]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003360:	5cd3      	ldrb	r3, [r2, r3]
 8003362:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003364:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	4a14      	ldr	r2, [pc, #80]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800337c:	4a0e      	ldr	r2, [pc, #56]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	fbb2 f2f3 	udiv	r2, r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e004      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a0c      	ldr	r2, [pc, #48]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	613b      	str	r3, [r7, #16]
      break;
 800339c:	e002      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800339e:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80033a0:	613b      	str	r3, [r7, #16]
      break;
 80033a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a4:	693b      	ldr	r3, [r7, #16]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	007a1200 	.word	0x007a1200
 80033bc:	080058c4 	.word	0x080058c4
 80033c0:	080058d4 	.word	0x080058d4
 80033c4:	003d0900 	.word	0x003d0900

080033c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b092      	sub	sp, #72	@ 0x48
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80d4 	beq.w	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ec:	4b4e      	ldr	r3, [pc, #312]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10e      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003402:	61d3      	str	r3, [r2, #28]
 8003404:	4b48      	ldr	r3, [pc, #288]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003416:	4b45      	ldr	r3, [pc, #276]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d118      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003422:	4b42      	ldr	r3, [pc, #264]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a41      	ldr	r2, [pc, #260]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800342c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342e:	f7fe f927 	bl	8001680 <HAL_GetTick>
 8003432:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003434:	e008      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003436:	f7fe f923 	bl	8001680 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b64      	cmp	r3, #100	@ 0x64
 8003442:	d901      	bls.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e169      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	4b38      	ldr	r3, [pc, #224]	@ (800352c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003454:	4b34      	ldr	r3, [pc, #208]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800345c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800345e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8084 	beq.w	800356e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800346e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003470:	429a      	cmp	r2, r3
 8003472:	d07c      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003474:	4b2c      	ldr	r3, [pc, #176]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800347c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800347e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003482:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800348c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	4b26      	ldr	r3, [pc, #152]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	461a      	mov	r2, r3
 800349e:	2301      	movs	r3, #1
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80034b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	461a      	mov	r2, r3
 80034c2:	2300      	movs	r3, #0
 80034c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034c6:	4a18      	ldr	r2, [pc, #96]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d04b      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fe f8d3 	bl	8001680 <HAL_GetTick>
 80034da:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7fe f8cf 	bl	8001680 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e113      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80034f4:	2302      	movs	r3, #2
 80034f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003500:	2302      	movs	r3, #2
 8003502:	623b      	str	r3, [r7, #32]
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	61fb      	str	r3, [r7, #28]
  return result;
 800350c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d108      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003522:	4b01      	ldr	r3, [pc, #4]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	e00d      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003528:	40021000 	.word	0x40021000
 800352c:	40007000 	.word	0x40007000
 8003530:	10908100 	.word	0x10908100
 8003534:	2302      	movs	r3, #2
 8003536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	4b78      	ldr	r3, [pc, #480]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	2202      	movs	r2, #2
 8003546:	613a      	str	r2, [r7, #16]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	fa92 f2a2 	rbit	r2, r2
 800354e:	60fa      	str	r2, [r7, #12]
  return result;
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	fab2 f282 	clz	r2, r2
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	f002 021f 	and.w	r2, r2, #31
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0b7      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800356e:	4b6d      	ldr	r3, [pc, #436]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	496a      	ldr	r1, [pc, #424]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800357c:	4313      	orrs	r3, r2
 800357e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003580:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003584:	2b01      	cmp	r3, #1
 8003586:	d105      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003588:	4b66      	ldr	r3, [pc, #408]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	4a65      	ldr	r2, [pc, #404]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800358e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003592:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035a0:	4b60      	ldr	r3, [pc, #384]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a4:	f023 0203 	bic.w	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	495d      	ldr	r1, [pc, #372]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d008      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035be:	4b59      	ldr	r3, [pc, #356]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4956      	ldr	r1, [pc, #344]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035dc:	4b51      	ldr	r3, [pc, #324]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	494e      	ldr	r1, [pc, #312]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	f023 0210 	bic.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4947      	ldr	r1, [pc, #284]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003618:	4b42      	ldr	r3, [pc, #264]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003624:	493f      	ldr	r1, [pc, #252]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003636:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	f023 0220 	bic.w	r2, r3, #32
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4938      	ldr	r1, [pc, #224]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003654:	4b33      	ldr	r3, [pc, #204]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	4930      	ldr	r1, [pc, #192]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003662:	4313      	orrs	r3, r2
 8003664:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003672:	4b2c      	ldr	r3, [pc, #176]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	4929      	ldr	r1, [pc, #164]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003680:	4313      	orrs	r3, r2
 8003682:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003690:	4b24      	ldr	r3, [pc, #144]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	4921      	ldr	r1, [pc, #132]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	491a      	ldr	r1, [pc, #104]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80036cc:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d8:	4912      	ldr	r1, [pc, #72]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	490b      	ldr	r1, [pc, #44]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003708:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003714:	4903      	ldr	r1, [pc, #12]	@ (8003724 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3748      	adds	r7, #72	@ 0x48
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e09d      	b.n	8003876 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800374a:	d009      	beq.n	8003760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	61da      	str	r2, [r3, #28]
 8003752:	e005      	b.n	8003760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fd1a 	bl	80011b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003796:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037a0:	d902      	bls.n	80037a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e002      	b.n	80037ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80037b6:	d007      	beq.n	80037c8 <HAL_SPI_Init+0xa0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037c0:	d002      	beq.n	80037c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380a:	ea42 0103 	orr.w	r1, r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	0c1b      	lsrs	r3, r3, #16
 8003824:	f003 0204 	and.w	r2, r3, #4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003844:	ea42 0103 	orr.w	r1, r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e049      	b.n	8003924 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fd fcc7 	bl	8001238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f000 fbcd 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d001      	beq.n	8003944 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e042      	b.n	80039ca <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a21      	ldr	r2, [pc, #132]	@ (80039d8 <HAL_TIM_Base_Start+0xac>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d018      	beq.n	8003988 <HAL_TIM_Base_Start+0x5c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395e:	d013      	beq.n	8003988 <HAL_TIM_Base_Start+0x5c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1d      	ldr	r2, [pc, #116]	@ (80039dc <HAL_TIM_Base_Start+0xb0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00e      	beq.n	8003988 <HAL_TIM_Base_Start+0x5c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1c      	ldr	r2, [pc, #112]	@ (80039e0 <HAL_TIM_Base_Start+0xb4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_TIM_Base_Start+0x5c>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1a      	ldr	r2, [pc, #104]	@ (80039e4 <HAL_TIM_Base_Start+0xb8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_TIM_Base_Start+0x5c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <HAL_TIM_Base_Start+0xbc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d115      	bne.n	80039b4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	4b17      	ldr	r3, [pc, #92]	@ (80039ec <HAL_TIM_Base_Start+0xc0>)
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b06      	cmp	r3, #6
 8003998:	d015      	beq.n	80039c6 <HAL_TIM_Base_Start+0x9a>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a0:	d011      	beq.n	80039c6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b2:	e008      	b.n	80039c6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	e000      	b.n	80039c8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800
 80039e4:	40013400 	.word	0x40013400
 80039e8:	40014000 	.word	0x40014000
 80039ec:	00010007 	.word	0x00010007

080039f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e049      	b.n	8003a96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd fc2e 	bl	8001278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f000 fb14 	bl	800405c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_TIM_PWM_Start+0x24>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e03c      	b.n	8003b3e <HAL_TIM_PWM_Start+0x9e>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d109      	bne.n	8003ade <HAL_TIM_PWM_Start+0x3e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e02f      	b.n	8003b3e <HAL_TIM_PWM_Start+0x9e>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d109      	bne.n	8003af8 <HAL_TIM_PWM_Start+0x58>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e022      	b.n	8003b3e <HAL_TIM_PWM_Start+0x9e>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	d109      	bne.n	8003b12 <HAL_TIM_PWM_Start+0x72>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e015      	b.n	8003b3e <HAL_TIM_PWM_Start+0x9e>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d109      	bne.n	8003b2c <HAL_TIM_PWM_Start+0x8c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e008      	b.n	8003b3e <HAL_TIM_PWM_Start+0x9e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e097      	b.n	8003c76 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_TIM_PWM_Start+0xb6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b54:	e023      	b.n	8003b9e <HAL_TIM_PWM_Start+0xfe>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_PWM_Start+0xc6>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b64:	e01b      	b.n	8003b9e <HAL_TIM_PWM_Start+0xfe>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_PWM_Start+0xd6>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b74:	e013      	b.n	8003b9e <HAL_TIM_PWM_Start+0xfe>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b0c      	cmp	r3, #12
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_PWM_Start+0xe6>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b84:	e00b      	b.n	8003b9e <HAL_TIM_PWM_Start+0xfe>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_PWM_Start+0xf6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b94:	e003      	b.n	8003b9e <HAL_TIM_PWM_Start+0xfe>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fe64 	bl	8004874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a33      	ldr	r2, [pc, #204]	@ (8003c80 <HAL_TIM_PWM_Start+0x1e0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_TIM_PWM_Start+0x13e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a32      	ldr	r2, [pc, #200]	@ (8003c84 <HAL_TIM_PWM_Start+0x1e4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIM_PWM_Start+0x13e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a30      	ldr	r2, [pc, #192]	@ (8003c88 <HAL_TIM_PWM_Start+0x1e8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_TIM_PWM_Start+0x13e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2f      	ldr	r2, [pc, #188]	@ (8003c8c <HAL_TIM_PWM_Start+0x1ec>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIM_PWM_Start+0x13e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8003c90 <HAL_TIM_PWM_Start+0x1f0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_PWM_Start+0x142>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <HAL_TIM_PWM_Start+0x144>
 8003be2:	2300      	movs	r3, #0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bf6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a20      	ldr	r2, [pc, #128]	@ (8003c80 <HAL_TIM_PWM_Start+0x1e0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d018      	beq.n	8003c34 <HAL_TIM_PWM_Start+0x194>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0a:	d013      	beq.n	8003c34 <HAL_TIM_PWM_Start+0x194>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a20      	ldr	r2, [pc, #128]	@ (8003c94 <HAL_TIM_PWM_Start+0x1f4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00e      	beq.n	8003c34 <HAL_TIM_PWM_Start+0x194>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c98 <HAL_TIM_PWM_Start+0x1f8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d009      	beq.n	8003c34 <HAL_TIM_PWM_Start+0x194>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a17      	ldr	r2, [pc, #92]	@ (8003c84 <HAL_TIM_PWM_Start+0x1e4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <HAL_TIM_PWM_Start+0x194>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a16      	ldr	r2, [pc, #88]	@ (8003c88 <HAL_TIM_PWM_Start+0x1e8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d115      	bne.n	8003c60 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	4b18      	ldr	r3, [pc, #96]	@ (8003c9c <HAL_TIM_PWM_Start+0x1fc>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b06      	cmp	r3, #6
 8003c44:	d015      	beq.n	8003c72 <HAL_TIM_PWM_Start+0x1d2>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4c:	d011      	beq.n	8003c72 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5e:	e008      	b.n	8003c72 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e000      	b.n	8003c74 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40012c00 	.word	0x40012c00
 8003c84:	40013400 	.word	0x40013400
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40014400 	.word	0x40014400
 8003c90:	40014800 	.word	0x40014800
 8003c94:	40000400 	.word	0x40000400
 8003c98:	40000800 	.word	0x40000800
 8003c9c:	00010007 	.word	0x00010007

08003ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0ff      	b.n	8003ebe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b14      	cmp	r3, #20
 8003cca:	f200 80f0 	bhi.w	8003eae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cce:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003d29 	.word	0x08003d29
 8003cd8:	08003eaf 	.word	0x08003eaf
 8003cdc:	08003eaf 	.word	0x08003eaf
 8003ce0:	08003eaf 	.word	0x08003eaf
 8003ce4:	08003d69 	.word	0x08003d69
 8003ce8:	08003eaf 	.word	0x08003eaf
 8003cec:	08003eaf 	.word	0x08003eaf
 8003cf0:	08003eaf 	.word	0x08003eaf
 8003cf4:	08003dab 	.word	0x08003dab
 8003cf8:	08003eaf 	.word	0x08003eaf
 8003cfc:	08003eaf 	.word	0x08003eaf
 8003d00:	08003eaf 	.word	0x08003eaf
 8003d04:	08003deb 	.word	0x08003deb
 8003d08:	08003eaf 	.word	0x08003eaf
 8003d0c:	08003eaf 	.word	0x08003eaf
 8003d10:	08003eaf 	.word	0x08003eaf
 8003d14:	08003e2d 	.word	0x08003e2d
 8003d18:	08003eaf 	.word	0x08003eaf
 8003d1c:	08003eaf 	.word	0x08003eaf
 8003d20:	08003eaf 	.word	0x08003eaf
 8003d24:	08003e6d 	.word	0x08003e6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fa30 	bl	8004194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0204 	bic.w	r2, r2, #4
 8003d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6999      	ldr	r1, [r3, #24]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	619a      	str	r2, [r3, #24]
      break;
 8003d66:	e0a5      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 faa0 	bl	80042b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6999      	ldr	r1, [r3, #24]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	619a      	str	r2, [r3, #24]
      break;
 8003da8:	e084      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fb09 	bl	80043c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0208 	orr.w	r2, r2, #8
 8003dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0204 	bic.w	r2, r2, #4
 8003dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69d9      	ldr	r1, [r3, #28]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	61da      	str	r2, [r3, #28]
      break;
 8003de8:	e064      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fb71 	bl	80044d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69d9      	ldr	r1, [r3, #28]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	021a      	lsls	r2, r3, #8
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	61da      	str	r2, [r3, #28]
      break;
 8003e2a:	e043      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fbba 	bl	80045ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e6a:	e023      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fbfe 	bl	8004674 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	021a      	lsls	r2, r3, #8
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003eac:	e002      	b.n	8003eb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop

08003ec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e0b6      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x18a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f20:	d03e      	beq.n	8003fa0 <HAL_TIM_ConfigClockSource+0xd8>
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f26:	f200 8087 	bhi.w	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2e:	f000 8086 	beq.w	800403e <HAL_TIM_ConfigClockSource+0x176>
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f36:	d87f      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f38:	2b70      	cmp	r3, #112	@ 0x70
 8003f3a:	d01a      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0xaa>
 8003f3c:	2b70      	cmp	r3, #112	@ 0x70
 8003f3e:	d87b      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f40:	2b60      	cmp	r3, #96	@ 0x60
 8003f42:	d050      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0x11e>
 8003f44:	2b60      	cmp	r3, #96	@ 0x60
 8003f46:	d877      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f48:	2b50      	cmp	r3, #80	@ 0x50
 8003f4a:	d03c      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0xfe>
 8003f4c:	2b50      	cmp	r3, #80	@ 0x50
 8003f4e:	d873      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f50:	2b40      	cmp	r3, #64	@ 0x40
 8003f52:	d058      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x13e>
 8003f54:	2b40      	cmp	r3, #64	@ 0x40
 8003f56:	d86f      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f58:	2b30      	cmp	r3, #48	@ 0x30
 8003f5a:	d064      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15e>
 8003f5c:	2b30      	cmp	r3, #48	@ 0x30
 8003f5e:	d86b      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d060      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15e>
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d867      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05c      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15e>
 8003f6c:	2b10      	cmp	r3, #16
 8003f6e:	d05a      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0x15e>
 8003f70:	e062      	b.n	8004038 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f82:	f000 fc57 	bl	8004834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	609a      	str	r2, [r3, #8]
      break;
 8003f9e:	e04f      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fb0:	f000 fc40 	bl	8004834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fc2:	609a      	str	r2, [r3, #8]
      break;
 8003fc4:	e03c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f000 fbb4 	bl	8004740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2150      	movs	r1, #80	@ 0x50
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fc0d 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8003fe4:	e02c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f000 fbd3 	bl	800479e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2160      	movs	r1, #96	@ 0x60
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fbfd 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004004:	e01c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004012:	461a      	mov	r2, r3
 8004014:	f000 fb94 	bl	8004740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2140      	movs	r1, #64	@ 0x40
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fbed 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004024:	e00c      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f000 fbe4 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004036:	e003      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
      break;
 800403c:	e000      	b.n	8004040 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800403e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a42      	ldr	r2, [pc, #264]	@ (8004178 <TIM_Base_SetConfig+0x11c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3f      	ldr	r2, [pc, #252]	@ (800417c <TIM_Base_SetConfig+0x120>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3e      	ldr	r2, [pc, #248]	@ (8004180 <TIM_Base_SetConfig+0x124>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x38>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3d      	ldr	r2, [pc, #244]	@ (8004184 <TIM_Base_SetConfig+0x128>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a33      	ldr	r2, [pc, #204]	@ (8004178 <TIM_Base_SetConfig+0x11c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01b      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b4:	d017      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a30      	ldr	r2, [pc, #192]	@ (800417c <TIM_Base_SetConfig+0x120>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d013      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004180 <TIM_Base_SetConfig+0x124>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00f      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004184 <TIM_Base_SetConfig+0x128>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00b      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004188 <TIM_Base_SetConfig+0x12c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a2c      	ldr	r2, [pc, #176]	@ (800418c <TIM_Base_SetConfig+0x130>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_Base_SetConfig+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004190 <TIM_Base_SetConfig+0x134>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d108      	bne.n	80040f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a16      	ldr	r2, [pc, #88]	@ (8004178 <TIM_Base_SetConfig+0x11c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00f      	beq.n	8004144 <TIM_Base_SetConfig+0xe8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a17      	ldr	r2, [pc, #92]	@ (8004184 <TIM_Base_SetConfig+0x128>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00b      	beq.n	8004144 <TIM_Base_SetConfig+0xe8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a16      	ldr	r2, [pc, #88]	@ (8004188 <TIM_Base_SetConfig+0x12c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d007      	beq.n	8004144 <TIM_Base_SetConfig+0xe8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a15      	ldr	r2, [pc, #84]	@ (800418c <TIM_Base_SetConfig+0x130>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_Base_SetConfig+0xe8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a14      	ldr	r2, [pc, #80]	@ (8004190 <TIM_Base_SetConfig+0x134>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d103      	bne.n	800414c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	611a      	str	r2, [r3, #16]
  }
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40013400 	.word	0x40013400
 8004188:	40014000 	.word	0x40014000
 800418c:	40014400 	.word	0x40014400
 8004190:	40014800 	.word	0x40014800

08004194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 0201 	bic.w	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0303 	bic.w	r3, r3, #3
 80041ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f023 0302 	bic.w	r3, r3, #2
 80041e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a2c      	ldr	r2, [pc, #176]	@ (80042a0 <TIM_OC1_SetConfig+0x10c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00f      	beq.n	8004214 <TIM_OC1_SetConfig+0x80>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a2b      	ldr	r2, [pc, #172]	@ (80042a4 <TIM_OC1_SetConfig+0x110>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_OC1_SetConfig+0x80>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a2a      	ldr	r2, [pc, #168]	@ (80042a8 <TIM_OC1_SetConfig+0x114>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <TIM_OC1_SetConfig+0x80>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a29      	ldr	r2, [pc, #164]	@ (80042ac <TIM_OC1_SetConfig+0x118>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_OC1_SetConfig+0x80>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a28      	ldr	r2, [pc, #160]	@ (80042b0 <TIM_OC1_SetConfig+0x11c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10c      	bne.n	800422e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0308 	bic.w	r3, r3, #8
 800421a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f023 0304 	bic.w	r3, r3, #4
 800422c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1b      	ldr	r2, [pc, #108]	@ (80042a0 <TIM_OC1_SetConfig+0x10c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00f      	beq.n	8004256 <TIM_OC1_SetConfig+0xc2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1a      	ldr	r2, [pc, #104]	@ (80042a4 <TIM_OC1_SetConfig+0x110>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00b      	beq.n	8004256 <TIM_OC1_SetConfig+0xc2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a19      	ldr	r2, [pc, #100]	@ (80042a8 <TIM_OC1_SetConfig+0x114>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_OC1_SetConfig+0xc2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a18      	ldr	r2, [pc, #96]	@ (80042ac <TIM_OC1_SetConfig+0x118>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_OC1_SetConfig+0xc2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a17      	ldr	r2, [pc, #92]	@ (80042b0 <TIM_OC1_SetConfig+0x11c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d111      	bne.n	800427a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800425c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	621a      	str	r2, [r3, #32]
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40013400 	.word	0x40013400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800

080042b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	f023 0210 	bic.w	r2, r3, #16
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f023 0320 	bic.w	r3, r3, #32
 8004302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a28      	ldr	r2, [pc, #160]	@ (80043b4 <TIM_OC2_SetConfig+0x100>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_OC2_SetConfig+0x6c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a27      	ldr	r2, [pc, #156]	@ (80043b8 <TIM_OC2_SetConfig+0x104>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10d      	bne.n	800433c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800433a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a1d      	ldr	r2, [pc, #116]	@ (80043b4 <TIM_OC2_SetConfig+0x100>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00f      	beq.n	8004364 <TIM_OC2_SetConfig+0xb0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a1c      	ldr	r2, [pc, #112]	@ (80043b8 <TIM_OC2_SetConfig+0x104>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00b      	beq.n	8004364 <TIM_OC2_SetConfig+0xb0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a1b      	ldr	r2, [pc, #108]	@ (80043bc <TIM_OC2_SetConfig+0x108>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d007      	beq.n	8004364 <TIM_OC2_SetConfig+0xb0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a1a      	ldr	r2, [pc, #104]	@ (80043c0 <TIM_OC2_SetConfig+0x10c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <TIM_OC2_SetConfig+0xb0>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a19      	ldr	r2, [pc, #100]	@ (80043c4 <TIM_OC2_SetConfig+0x110>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d113      	bne.n	800438c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800436a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004372:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40013400 	.word	0x40013400
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400
 80043c4:	40014800 	.word	0x40014800

080043c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a27      	ldr	r2, [pc, #156]	@ (80044c4 <TIM_OC3_SetConfig+0xfc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d003      	beq.n	8004432 <TIM_OC3_SetConfig+0x6a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a26      	ldr	r2, [pc, #152]	@ (80044c8 <TIM_OC3_SetConfig+0x100>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10d      	bne.n	800444e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800444c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a1c      	ldr	r2, [pc, #112]	@ (80044c4 <TIM_OC3_SetConfig+0xfc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00f      	beq.n	8004476 <TIM_OC3_SetConfig+0xae>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a1b      	ldr	r2, [pc, #108]	@ (80044c8 <TIM_OC3_SetConfig+0x100>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00b      	beq.n	8004476 <TIM_OC3_SetConfig+0xae>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a1a      	ldr	r2, [pc, #104]	@ (80044cc <TIM_OC3_SetConfig+0x104>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <TIM_OC3_SetConfig+0xae>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a19      	ldr	r2, [pc, #100]	@ (80044d0 <TIM_OC3_SetConfig+0x108>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d003      	beq.n	8004476 <TIM_OC3_SetConfig+0xae>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a18      	ldr	r2, [pc, #96]	@ (80044d4 <TIM_OC3_SetConfig+0x10c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d113      	bne.n	800449e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800447c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40013400 	.word	0x40013400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40014400 	.word	0x40014400
 80044d4:	40014800 	.word	0x40014800

080044d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800450a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	031b      	lsls	r3, r3, #12
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a18      	ldr	r2, [pc, #96]	@ (8004598 <TIM_OC4_SetConfig+0xc0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00f      	beq.n	800455c <TIM_OC4_SetConfig+0x84>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a17      	ldr	r2, [pc, #92]	@ (800459c <TIM_OC4_SetConfig+0xc4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d00b      	beq.n	800455c <TIM_OC4_SetConfig+0x84>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a16      	ldr	r2, [pc, #88]	@ (80045a0 <TIM_OC4_SetConfig+0xc8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_OC4_SetConfig+0x84>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a15      	ldr	r2, [pc, #84]	@ (80045a4 <TIM_OC4_SetConfig+0xcc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_OC4_SetConfig+0x84>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a14      	ldr	r2, [pc, #80]	@ (80045a8 <TIM_OC4_SetConfig+0xd0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d109      	bne.n	8004570 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	019b      	lsls	r3, r3, #6
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40013400 	.word	0x40013400
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800

080045ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80045f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a17      	ldr	r2, [pc, #92]	@ (8004660 <TIM_OC5_SetConfig+0xb4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00f      	beq.n	8004626 <TIM_OC5_SetConfig+0x7a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a16      	ldr	r2, [pc, #88]	@ (8004664 <TIM_OC5_SetConfig+0xb8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_OC5_SetConfig+0x7a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a15      	ldr	r2, [pc, #84]	@ (8004668 <TIM_OC5_SetConfig+0xbc>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d007      	beq.n	8004626 <TIM_OC5_SetConfig+0x7a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a14      	ldr	r2, [pc, #80]	@ (800466c <TIM_OC5_SetConfig+0xc0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_OC5_SetConfig+0x7a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a13      	ldr	r2, [pc, #76]	@ (8004670 <TIM_OC5_SetConfig+0xc4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d109      	bne.n	800463a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800462c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40013400 	.word	0x40013400
 8004668:	40014000 	.word	0x40014000
 800466c:	40014400 	.word	0x40014400
 8004670:	40014800 	.word	0x40014800

08004674 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	051b      	lsls	r3, r3, #20
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a18      	ldr	r2, [pc, #96]	@ (800472c <TIM_OC6_SetConfig+0xb8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00f      	beq.n	80046f0 <TIM_OC6_SetConfig+0x7c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a17      	ldr	r2, [pc, #92]	@ (8004730 <TIM_OC6_SetConfig+0xbc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00b      	beq.n	80046f0 <TIM_OC6_SetConfig+0x7c>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a16      	ldr	r2, [pc, #88]	@ (8004734 <TIM_OC6_SetConfig+0xc0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d007      	beq.n	80046f0 <TIM_OC6_SetConfig+0x7c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a15      	ldr	r2, [pc, #84]	@ (8004738 <TIM_OC6_SetConfig+0xc4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_OC6_SetConfig+0x7c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a14      	ldr	r2, [pc, #80]	@ (800473c <TIM_OC6_SetConfig+0xc8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d109      	bne.n	8004704 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	029b      	lsls	r3, r3, #10
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40013400 	.word	0x40013400
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800

08004740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800476a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 030a 	bic.w	r3, r3, #10
 800477c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800479e:	b480      	push	{r7}
 80047a0:	b087      	sub	sp, #28
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f023 0210 	bic.w	r2, r3, #16
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	031b      	lsls	r3, r3, #12
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	f043 0307 	orr.w	r3, r3, #7
 8004820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	609a      	str	r2, [r3, #8]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800484e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	021a      	lsls	r2, r3, #8
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	431a      	orrs	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4313      	orrs	r3, r2
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	609a      	str	r2, [r3, #8]
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2201      	movs	r2, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1a      	ldr	r2, [r3, #32]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	43db      	mvns	r3, r3
 8004896:	401a      	ands	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a1a      	ldr	r2, [r3, #32]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e063      	b.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a2b      	ldr	r2, [pc, #172]	@ (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a2a      	ldr	r2, [pc, #168]	@ (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d108      	bne.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004912:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004924:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d018      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800494a:	d013      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a18      	ldr	r2, [pc, #96]	@ (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a17      	ldr	r2, [pc, #92]	@ (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a12      	ldr	r2, [pc, #72]	@ (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a13      	ldr	r2, [pc, #76]	@ (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d10c      	bne.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800497a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	4313      	orrs	r3, r2
 8004984:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40013400 	.word	0x40013400
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40014000 	.word	0x40014000

080049c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049c8:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80049cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	b29b      	uxth	r3, r3
 80049de:	4013      	ands	r3, r2
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <std>:
 8004a34:	2300      	movs	r3, #0
 8004a36:	b510      	push	{r4, lr}
 8004a38:	4604      	mov	r4, r0
 8004a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a42:	6083      	str	r3, [r0, #8]
 8004a44:	8181      	strh	r1, [r0, #12]
 8004a46:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a48:	81c2      	strh	r2, [r0, #14]
 8004a4a:	6183      	str	r3, [r0, #24]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	2208      	movs	r2, #8
 8004a50:	305c      	adds	r0, #92	@ 0x5c
 8004a52:	f000 f8c3 	bl	8004bdc <memset>
 8004a56:	4b0d      	ldr	r3, [pc, #52]	@ (8004a8c <std+0x58>)
 8004a58:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a90 <std+0x5c>)
 8004a5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <std+0x60>)
 8004a60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a62:	4b0d      	ldr	r3, [pc, #52]	@ (8004a98 <std+0x64>)
 8004a64:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a66:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <std+0x68>)
 8004a68:	6224      	str	r4, [r4, #32]
 8004a6a:	429c      	cmp	r4, r3
 8004a6c:	d006      	beq.n	8004a7c <std+0x48>
 8004a6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a72:	4294      	cmp	r4, r2
 8004a74:	d002      	beq.n	8004a7c <std+0x48>
 8004a76:	33d0      	adds	r3, #208	@ 0xd0
 8004a78:	429c      	cmp	r4, r3
 8004a7a:	d105      	bne.n	8004a88 <std+0x54>
 8004a7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a84:	f000 b8dc 	b.w	8004c40 <__retarget_lock_init_recursive>
 8004a88:	bd10      	pop	{r4, pc}
 8004a8a:	bf00      	nop
 8004a8c:	08005499 	.word	0x08005499
 8004a90:	080054bb 	.word	0x080054bb
 8004a94:	080054f3 	.word	0x080054f3
 8004a98:	08005517 	.word	0x08005517
 8004a9c:	200004b0 	.word	0x200004b0

08004aa0 <stdio_exit_handler>:
 8004aa0:	4a02      	ldr	r2, [pc, #8]	@ (8004aac <stdio_exit_handler+0xc>)
 8004aa2:	4903      	ldr	r1, [pc, #12]	@ (8004ab0 <stdio_exit_handler+0x10>)
 8004aa4:	4803      	ldr	r0, [pc, #12]	@ (8004ab4 <stdio_exit_handler+0x14>)
 8004aa6:	f000 b869 	b.w	8004b7c <_fwalk_sglue>
 8004aaa:	bf00      	nop
 8004aac:	2000000c 	.word	0x2000000c
 8004ab0:	08005431 	.word	0x08005431
 8004ab4:	2000001c 	.word	0x2000001c

08004ab8 <cleanup_stdio>:
 8004ab8:	6841      	ldr	r1, [r0, #4]
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <cleanup_stdio+0x34>)
 8004abc:	4299      	cmp	r1, r3
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	d001      	beq.n	8004ac8 <cleanup_stdio+0x10>
 8004ac4:	f000 fcb4 	bl	8005430 <_fflush_r>
 8004ac8:	68a1      	ldr	r1, [r4, #8]
 8004aca:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <cleanup_stdio+0x38>)
 8004acc:	4299      	cmp	r1, r3
 8004ace:	d002      	beq.n	8004ad6 <cleanup_stdio+0x1e>
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f000 fcad 	bl	8005430 <_fflush_r>
 8004ad6:	68e1      	ldr	r1, [r4, #12]
 8004ad8:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <cleanup_stdio+0x3c>)
 8004ada:	4299      	cmp	r1, r3
 8004adc:	d004      	beq.n	8004ae8 <cleanup_stdio+0x30>
 8004ade:	4620      	mov	r0, r4
 8004ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae4:	f000 bca4 	b.w	8005430 <_fflush_r>
 8004ae8:	bd10      	pop	{r4, pc}
 8004aea:	bf00      	nop
 8004aec:	200004b0 	.word	0x200004b0
 8004af0:	20000518 	.word	0x20000518
 8004af4:	20000580 	.word	0x20000580

08004af8 <global_stdio_init.part.0>:
 8004af8:	b510      	push	{r4, lr}
 8004afa:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <global_stdio_init.part.0+0x30>)
 8004afc:	4c0b      	ldr	r4, [pc, #44]	@ (8004b2c <global_stdio_init.part.0+0x34>)
 8004afe:	4a0c      	ldr	r2, [pc, #48]	@ (8004b30 <global_stdio_init.part.0+0x38>)
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	4620      	mov	r0, r4
 8004b04:	2200      	movs	r2, #0
 8004b06:	2104      	movs	r1, #4
 8004b08:	f7ff ff94 	bl	8004a34 <std>
 8004b0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b10:	2201      	movs	r2, #1
 8004b12:	2109      	movs	r1, #9
 8004b14:	f7ff ff8e 	bl	8004a34 <std>
 8004b18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b22:	2112      	movs	r1, #18
 8004b24:	f7ff bf86 	b.w	8004a34 <std>
 8004b28:	200005e8 	.word	0x200005e8
 8004b2c:	200004b0 	.word	0x200004b0
 8004b30:	08004aa1 	.word	0x08004aa1

08004b34 <__sfp_lock_acquire>:
 8004b34:	4801      	ldr	r0, [pc, #4]	@ (8004b3c <__sfp_lock_acquire+0x8>)
 8004b36:	f000 b884 	b.w	8004c42 <__retarget_lock_acquire_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	200005ed 	.word	0x200005ed

08004b40 <__sfp_lock_release>:
 8004b40:	4801      	ldr	r0, [pc, #4]	@ (8004b48 <__sfp_lock_release+0x8>)
 8004b42:	f000 b87f 	b.w	8004c44 <__retarget_lock_release_recursive>
 8004b46:	bf00      	nop
 8004b48:	200005ed 	.word	0x200005ed

08004b4c <__sinit>:
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	4604      	mov	r4, r0
 8004b50:	f7ff fff0 	bl	8004b34 <__sfp_lock_acquire>
 8004b54:	6a23      	ldr	r3, [r4, #32]
 8004b56:	b11b      	cbz	r3, 8004b60 <__sinit+0x14>
 8004b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5c:	f7ff bff0 	b.w	8004b40 <__sfp_lock_release>
 8004b60:	4b04      	ldr	r3, [pc, #16]	@ (8004b74 <__sinit+0x28>)
 8004b62:	6223      	str	r3, [r4, #32]
 8004b64:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <__sinit+0x2c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f5      	bne.n	8004b58 <__sinit+0xc>
 8004b6c:	f7ff ffc4 	bl	8004af8 <global_stdio_init.part.0>
 8004b70:	e7f2      	b.n	8004b58 <__sinit+0xc>
 8004b72:	bf00      	nop
 8004b74:	08004ab9 	.word	0x08004ab9
 8004b78:	200005e8 	.word	0x200005e8

08004b7c <_fwalk_sglue>:
 8004b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b80:	4607      	mov	r7, r0
 8004b82:	4688      	mov	r8, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	2600      	movs	r6, #0
 8004b88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b8c:	f1b9 0901 	subs.w	r9, r9, #1
 8004b90:	d505      	bpl.n	8004b9e <_fwalk_sglue+0x22>
 8004b92:	6824      	ldr	r4, [r4, #0]
 8004b94:	2c00      	cmp	r4, #0
 8004b96:	d1f7      	bne.n	8004b88 <_fwalk_sglue+0xc>
 8004b98:	4630      	mov	r0, r6
 8004b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b9e:	89ab      	ldrh	r3, [r5, #12]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d907      	bls.n	8004bb4 <_fwalk_sglue+0x38>
 8004ba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	d003      	beq.n	8004bb4 <_fwalk_sglue+0x38>
 8004bac:	4629      	mov	r1, r5
 8004bae:	4638      	mov	r0, r7
 8004bb0:	47c0      	blx	r8
 8004bb2:	4306      	orrs	r6, r0
 8004bb4:	3568      	adds	r5, #104	@ 0x68
 8004bb6:	e7e9      	b.n	8004b8c <_fwalk_sglue+0x10>

08004bb8 <iprintf>:
 8004bb8:	b40f      	push	{r0, r1, r2, r3}
 8004bba:	b507      	push	{r0, r1, r2, lr}
 8004bbc:	4906      	ldr	r1, [pc, #24]	@ (8004bd8 <iprintf+0x20>)
 8004bbe:	ab04      	add	r3, sp, #16
 8004bc0:	6808      	ldr	r0, [r1, #0]
 8004bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bc6:	6881      	ldr	r1, [r0, #8]
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	f000 f865 	bl	8004c98 <_vfiprintf_r>
 8004bce:	b003      	add	sp, #12
 8004bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bd4:	b004      	add	sp, #16
 8004bd6:	4770      	bx	lr
 8004bd8:	20000018 	.word	0x20000018

08004bdc <memset>:
 8004bdc:	4402      	add	r2, r0
 8004bde:	4603      	mov	r3, r0
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d100      	bne.n	8004be6 <memset+0xa>
 8004be4:	4770      	bx	lr
 8004be6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bea:	e7f9      	b.n	8004be0 <memset+0x4>

08004bec <__errno>:
 8004bec:	4b01      	ldr	r3, [pc, #4]	@ (8004bf4 <__errno+0x8>)
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000018 	.word	0x20000018

08004bf8 <__libc_init_array>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	4d0d      	ldr	r5, [pc, #52]	@ (8004c30 <__libc_init_array+0x38>)
 8004bfc:	4c0d      	ldr	r4, [pc, #52]	@ (8004c34 <__libc_init_array+0x3c>)
 8004bfe:	1b64      	subs	r4, r4, r5
 8004c00:	10a4      	asrs	r4, r4, #2
 8004c02:	2600      	movs	r6, #0
 8004c04:	42a6      	cmp	r6, r4
 8004c06:	d109      	bne.n	8004c1c <__libc_init_array+0x24>
 8004c08:	4d0b      	ldr	r5, [pc, #44]	@ (8004c38 <__libc_init_array+0x40>)
 8004c0a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c3c <__libc_init_array+0x44>)
 8004c0c:	f000 fe40 	bl	8005890 <_init>
 8004c10:	1b64      	subs	r4, r4, r5
 8004c12:	10a4      	asrs	r4, r4, #2
 8004c14:	2600      	movs	r6, #0
 8004c16:	42a6      	cmp	r6, r4
 8004c18:	d105      	bne.n	8004c26 <__libc_init_array+0x2e>
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c20:	4798      	blx	r3
 8004c22:	3601      	adds	r6, #1
 8004c24:	e7ee      	b.n	8004c04 <__libc_init_array+0xc>
 8004c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2a:	4798      	blx	r3
 8004c2c:	3601      	adds	r6, #1
 8004c2e:	e7f2      	b.n	8004c16 <__libc_init_array+0x1e>
 8004c30:	08005920 	.word	0x08005920
 8004c34:	08005920 	.word	0x08005920
 8004c38:	08005920 	.word	0x08005920
 8004c3c:	08005924 	.word	0x08005924

08004c40 <__retarget_lock_init_recursive>:
 8004c40:	4770      	bx	lr

08004c42 <__retarget_lock_acquire_recursive>:
 8004c42:	4770      	bx	lr

08004c44 <__retarget_lock_release_recursive>:
 8004c44:	4770      	bx	lr

08004c46 <__sfputc_r>:
 8004c46:	6893      	ldr	r3, [r2, #8]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	b410      	push	{r4}
 8004c4e:	6093      	str	r3, [r2, #8]
 8004c50:	da08      	bge.n	8004c64 <__sfputc_r+0x1e>
 8004c52:	6994      	ldr	r4, [r2, #24]
 8004c54:	42a3      	cmp	r3, r4
 8004c56:	db01      	blt.n	8004c5c <__sfputc_r+0x16>
 8004c58:	290a      	cmp	r1, #10
 8004c5a:	d103      	bne.n	8004c64 <__sfputc_r+0x1e>
 8004c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c60:	f000 bc5d 	b.w	800551e <__swbuf_r>
 8004c64:	6813      	ldr	r3, [r2, #0]
 8004c66:	1c58      	adds	r0, r3, #1
 8004c68:	6010      	str	r0, [r2, #0]
 8004c6a:	7019      	strb	r1, [r3, #0]
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <__sfputs_r>:
 8004c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c76:	4606      	mov	r6, r0
 8004c78:	460f      	mov	r7, r1
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	18d5      	adds	r5, r2, r3
 8004c7e:	42ac      	cmp	r4, r5
 8004c80:	d101      	bne.n	8004c86 <__sfputs_r+0x12>
 8004c82:	2000      	movs	r0, #0
 8004c84:	e007      	b.n	8004c96 <__sfputs_r+0x22>
 8004c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c8a:	463a      	mov	r2, r7
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f7ff ffda 	bl	8004c46 <__sfputc_r>
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	d1f3      	bne.n	8004c7e <__sfputs_r+0xa>
 8004c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c98 <_vfiprintf_r>:
 8004c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	b09d      	sub	sp, #116	@ 0x74
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	4698      	mov	r8, r3
 8004ca4:	4606      	mov	r6, r0
 8004ca6:	b118      	cbz	r0, 8004cb0 <_vfiprintf_r+0x18>
 8004ca8:	6a03      	ldr	r3, [r0, #32]
 8004caa:	b90b      	cbnz	r3, 8004cb0 <_vfiprintf_r+0x18>
 8004cac:	f7ff ff4e 	bl	8004b4c <__sinit>
 8004cb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cb2:	07d9      	lsls	r1, r3, #31
 8004cb4:	d405      	bmi.n	8004cc2 <_vfiprintf_r+0x2a>
 8004cb6:	89ab      	ldrh	r3, [r5, #12]
 8004cb8:	059a      	lsls	r2, r3, #22
 8004cba:	d402      	bmi.n	8004cc2 <_vfiprintf_r+0x2a>
 8004cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cbe:	f7ff ffc0 	bl	8004c42 <__retarget_lock_acquire_recursive>
 8004cc2:	89ab      	ldrh	r3, [r5, #12]
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	d501      	bpl.n	8004ccc <_vfiprintf_r+0x34>
 8004cc8:	692b      	ldr	r3, [r5, #16]
 8004cca:	b99b      	cbnz	r3, 8004cf4 <_vfiprintf_r+0x5c>
 8004ccc:	4629      	mov	r1, r5
 8004cce:	4630      	mov	r0, r6
 8004cd0:	f000 fc64 	bl	800559c <__swsetup_r>
 8004cd4:	b170      	cbz	r0, 8004cf4 <_vfiprintf_r+0x5c>
 8004cd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cd8:	07dc      	lsls	r4, r3, #31
 8004cda:	d504      	bpl.n	8004ce6 <_vfiprintf_r+0x4e>
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ce0:	b01d      	add	sp, #116	@ 0x74
 8004ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	0598      	lsls	r0, r3, #22
 8004cea:	d4f7      	bmi.n	8004cdc <_vfiprintf_r+0x44>
 8004cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cee:	f7ff ffa9 	bl	8004c44 <__retarget_lock_release_recursive>
 8004cf2:	e7f3      	b.n	8004cdc <_vfiprintf_r+0x44>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d02:	2330      	movs	r3, #48	@ 0x30
 8004d04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004eb4 <_vfiprintf_r+0x21c>
 8004d08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d0c:	f04f 0901 	mov.w	r9, #1
 8004d10:	4623      	mov	r3, r4
 8004d12:	469a      	mov	sl, r3
 8004d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d18:	b10a      	cbz	r2, 8004d1e <_vfiprintf_r+0x86>
 8004d1a:	2a25      	cmp	r2, #37	@ 0x25
 8004d1c:	d1f9      	bne.n	8004d12 <_vfiprintf_r+0x7a>
 8004d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d22:	d00b      	beq.n	8004d3c <_vfiprintf_r+0xa4>
 8004d24:	465b      	mov	r3, fp
 8004d26:	4622      	mov	r2, r4
 8004d28:	4629      	mov	r1, r5
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f7ff ffa2 	bl	8004c74 <__sfputs_r>
 8004d30:	3001      	adds	r0, #1
 8004d32:	f000 80a7 	beq.w	8004e84 <_vfiprintf_r+0x1ec>
 8004d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d38:	445a      	add	r2, fp
 8004d3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 809f 	beq.w	8004e84 <_vfiprintf_r+0x1ec>
 8004d46:	2300      	movs	r3, #0
 8004d48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d50:	f10a 0a01 	add.w	sl, sl, #1
 8004d54:	9304      	str	r3, [sp, #16]
 8004d56:	9307      	str	r3, [sp, #28]
 8004d58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d5e:	4654      	mov	r4, sl
 8004d60:	2205      	movs	r2, #5
 8004d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d66:	4853      	ldr	r0, [pc, #332]	@ (8004eb4 <_vfiprintf_r+0x21c>)
 8004d68:	f7fb fa32 	bl	80001d0 <memchr>
 8004d6c:	9a04      	ldr	r2, [sp, #16]
 8004d6e:	b9d8      	cbnz	r0, 8004da8 <_vfiprintf_r+0x110>
 8004d70:	06d1      	lsls	r1, r2, #27
 8004d72:	bf44      	itt	mi
 8004d74:	2320      	movmi	r3, #32
 8004d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d7a:	0713      	lsls	r3, r2, #28
 8004d7c:	bf44      	itt	mi
 8004d7e:	232b      	movmi	r3, #43	@ 0x2b
 8004d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d84:	f89a 3000 	ldrb.w	r3, [sl]
 8004d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d8a:	d015      	beq.n	8004db8 <_vfiprintf_r+0x120>
 8004d8c:	9a07      	ldr	r2, [sp, #28]
 8004d8e:	4654      	mov	r4, sl
 8004d90:	2000      	movs	r0, #0
 8004d92:	f04f 0c0a 	mov.w	ip, #10
 8004d96:	4621      	mov	r1, r4
 8004d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d9c:	3b30      	subs	r3, #48	@ 0x30
 8004d9e:	2b09      	cmp	r3, #9
 8004da0:	d94b      	bls.n	8004e3a <_vfiprintf_r+0x1a2>
 8004da2:	b1b0      	cbz	r0, 8004dd2 <_vfiprintf_r+0x13a>
 8004da4:	9207      	str	r2, [sp, #28]
 8004da6:	e014      	b.n	8004dd2 <_vfiprintf_r+0x13a>
 8004da8:	eba0 0308 	sub.w	r3, r0, r8
 8004dac:	fa09 f303 	lsl.w	r3, r9, r3
 8004db0:	4313      	orrs	r3, r2
 8004db2:	9304      	str	r3, [sp, #16]
 8004db4:	46a2      	mov	sl, r4
 8004db6:	e7d2      	b.n	8004d5e <_vfiprintf_r+0xc6>
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	1d19      	adds	r1, r3, #4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	9103      	str	r1, [sp, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bfbb      	ittet	lt
 8004dc4:	425b      	neglt	r3, r3
 8004dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8004dca:	9307      	strge	r3, [sp, #28]
 8004dcc:	9307      	strlt	r3, [sp, #28]
 8004dce:	bfb8      	it	lt
 8004dd0:	9204      	strlt	r2, [sp, #16]
 8004dd2:	7823      	ldrb	r3, [r4, #0]
 8004dd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dd6:	d10a      	bne.n	8004dee <_vfiprintf_r+0x156>
 8004dd8:	7863      	ldrb	r3, [r4, #1]
 8004dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ddc:	d132      	bne.n	8004e44 <_vfiprintf_r+0x1ac>
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	1d1a      	adds	r2, r3, #4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	9203      	str	r2, [sp, #12]
 8004de6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004dea:	3402      	adds	r4, #2
 8004dec:	9305      	str	r3, [sp, #20]
 8004dee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ec4 <_vfiprintf_r+0x22c>
 8004df2:	7821      	ldrb	r1, [r4, #0]
 8004df4:	2203      	movs	r2, #3
 8004df6:	4650      	mov	r0, sl
 8004df8:	f7fb f9ea 	bl	80001d0 <memchr>
 8004dfc:	b138      	cbz	r0, 8004e0e <_vfiprintf_r+0x176>
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	eba0 000a 	sub.w	r0, r0, sl
 8004e04:	2240      	movs	r2, #64	@ 0x40
 8004e06:	4082      	lsls	r2, r0
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	3401      	adds	r4, #1
 8004e0c:	9304      	str	r3, [sp, #16]
 8004e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e12:	4829      	ldr	r0, [pc, #164]	@ (8004eb8 <_vfiprintf_r+0x220>)
 8004e14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e18:	2206      	movs	r2, #6
 8004e1a:	f7fb f9d9 	bl	80001d0 <memchr>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d03f      	beq.n	8004ea2 <_vfiprintf_r+0x20a>
 8004e22:	4b26      	ldr	r3, [pc, #152]	@ (8004ebc <_vfiprintf_r+0x224>)
 8004e24:	bb1b      	cbnz	r3, 8004e6e <_vfiprintf_r+0x1d6>
 8004e26:	9b03      	ldr	r3, [sp, #12]
 8004e28:	3307      	adds	r3, #7
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	3308      	adds	r3, #8
 8004e30:	9303      	str	r3, [sp, #12]
 8004e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e34:	443b      	add	r3, r7
 8004e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e38:	e76a      	b.n	8004d10 <_vfiprintf_r+0x78>
 8004e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e3e:	460c      	mov	r4, r1
 8004e40:	2001      	movs	r0, #1
 8004e42:	e7a8      	b.n	8004d96 <_vfiprintf_r+0xfe>
 8004e44:	2300      	movs	r3, #0
 8004e46:	3401      	adds	r4, #1
 8004e48:	9305      	str	r3, [sp, #20]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f04f 0c0a 	mov.w	ip, #10
 8004e50:	4620      	mov	r0, r4
 8004e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e56:	3a30      	subs	r2, #48	@ 0x30
 8004e58:	2a09      	cmp	r2, #9
 8004e5a:	d903      	bls.n	8004e64 <_vfiprintf_r+0x1cc>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0c6      	beq.n	8004dee <_vfiprintf_r+0x156>
 8004e60:	9105      	str	r1, [sp, #20]
 8004e62:	e7c4      	b.n	8004dee <_vfiprintf_r+0x156>
 8004e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e68:	4604      	mov	r4, r0
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e7f0      	b.n	8004e50 <_vfiprintf_r+0x1b8>
 8004e6e:	ab03      	add	r3, sp, #12
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	462a      	mov	r2, r5
 8004e74:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <_vfiprintf_r+0x228>)
 8004e76:	a904      	add	r1, sp, #16
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f3af 8000 	nop.w
 8004e7e:	4607      	mov	r7, r0
 8004e80:	1c78      	adds	r0, r7, #1
 8004e82:	d1d6      	bne.n	8004e32 <_vfiprintf_r+0x19a>
 8004e84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e86:	07d9      	lsls	r1, r3, #31
 8004e88:	d405      	bmi.n	8004e96 <_vfiprintf_r+0x1fe>
 8004e8a:	89ab      	ldrh	r3, [r5, #12]
 8004e8c:	059a      	lsls	r2, r3, #22
 8004e8e:	d402      	bmi.n	8004e96 <_vfiprintf_r+0x1fe>
 8004e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e92:	f7ff fed7 	bl	8004c44 <__retarget_lock_release_recursive>
 8004e96:	89ab      	ldrh	r3, [r5, #12]
 8004e98:	065b      	lsls	r3, r3, #25
 8004e9a:	f53f af1f 	bmi.w	8004cdc <_vfiprintf_r+0x44>
 8004e9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ea0:	e71e      	b.n	8004ce0 <_vfiprintf_r+0x48>
 8004ea2:	ab03      	add	r3, sp, #12
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <_vfiprintf_r+0x228>)
 8004eaa:	a904      	add	r1, sp, #16
 8004eac:	4630      	mov	r0, r6
 8004eae:	f000 f91b 	bl	80050e8 <_printf_i>
 8004eb2:	e7e4      	b.n	8004e7e <_vfiprintf_r+0x1e6>
 8004eb4:	080058e4 	.word	0x080058e4
 8004eb8:	080058ee 	.word	0x080058ee
 8004ebc:	00000000 	.word	0x00000000
 8004ec0:	08004c75 	.word	0x08004c75
 8004ec4:	080058ea 	.word	0x080058ea

08004ec8 <sbrk_aligned>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	4e0f      	ldr	r6, [pc, #60]	@ (8004f08 <sbrk_aligned+0x40>)
 8004ecc:	460c      	mov	r4, r1
 8004ece:	6831      	ldr	r1, [r6, #0]
 8004ed0:	4605      	mov	r5, r0
 8004ed2:	b911      	cbnz	r1, 8004eda <sbrk_aligned+0x12>
 8004ed4:	f000 fc70 	bl	80057b8 <_sbrk_r>
 8004ed8:	6030      	str	r0, [r6, #0]
 8004eda:	4621      	mov	r1, r4
 8004edc:	4628      	mov	r0, r5
 8004ede:	f000 fc6b 	bl	80057b8 <_sbrk_r>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	d103      	bne.n	8004eee <sbrk_aligned+0x26>
 8004ee6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004eea:	4620      	mov	r0, r4
 8004eec:	bd70      	pop	{r4, r5, r6, pc}
 8004eee:	1cc4      	adds	r4, r0, #3
 8004ef0:	f024 0403 	bic.w	r4, r4, #3
 8004ef4:	42a0      	cmp	r0, r4
 8004ef6:	d0f8      	beq.n	8004eea <sbrk_aligned+0x22>
 8004ef8:	1a21      	subs	r1, r4, r0
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 fc5c 	bl	80057b8 <_sbrk_r>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d1f2      	bne.n	8004eea <sbrk_aligned+0x22>
 8004f04:	e7ef      	b.n	8004ee6 <sbrk_aligned+0x1e>
 8004f06:	bf00      	nop
 8004f08:	200005f0 	.word	0x200005f0

08004f0c <_malloc_r>:
 8004f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f10:	1ccd      	adds	r5, r1, #3
 8004f12:	f025 0503 	bic.w	r5, r5, #3
 8004f16:	3508      	adds	r5, #8
 8004f18:	2d0c      	cmp	r5, #12
 8004f1a:	bf38      	it	cc
 8004f1c:	250c      	movcc	r5, #12
 8004f1e:	2d00      	cmp	r5, #0
 8004f20:	4606      	mov	r6, r0
 8004f22:	db01      	blt.n	8004f28 <_malloc_r+0x1c>
 8004f24:	42a9      	cmp	r1, r5
 8004f26:	d904      	bls.n	8004f32 <_malloc_r+0x26>
 8004f28:	230c      	movs	r3, #12
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005008 <_malloc_r+0xfc>
 8004f36:	f000 faa3 	bl	8005480 <__malloc_lock>
 8004f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f3e:	461c      	mov	r4, r3
 8004f40:	bb44      	cbnz	r4, 8004f94 <_malloc_r+0x88>
 8004f42:	4629      	mov	r1, r5
 8004f44:	4630      	mov	r0, r6
 8004f46:	f7ff ffbf 	bl	8004ec8 <sbrk_aligned>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	d158      	bne.n	8005002 <_malloc_r+0xf6>
 8004f50:	f8d8 4000 	ldr.w	r4, [r8]
 8004f54:	4627      	mov	r7, r4
 8004f56:	2f00      	cmp	r7, #0
 8004f58:	d143      	bne.n	8004fe2 <_malloc_r+0xd6>
 8004f5a:	2c00      	cmp	r4, #0
 8004f5c:	d04b      	beq.n	8004ff6 <_malloc_r+0xea>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	4639      	mov	r1, r7
 8004f62:	4630      	mov	r0, r6
 8004f64:	eb04 0903 	add.w	r9, r4, r3
 8004f68:	f000 fc26 	bl	80057b8 <_sbrk_r>
 8004f6c:	4581      	cmp	r9, r0
 8004f6e:	d142      	bne.n	8004ff6 <_malloc_r+0xea>
 8004f70:	6821      	ldr	r1, [r4, #0]
 8004f72:	1a6d      	subs	r5, r5, r1
 8004f74:	4629      	mov	r1, r5
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff ffa6 	bl	8004ec8 <sbrk_aligned>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d03a      	beq.n	8004ff6 <_malloc_r+0xea>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	442b      	add	r3, r5
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	f8d8 3000 	ldr.w	r3, [r8]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	bb62      	cbnz	r2, 8004fe8 <_malloc_r+0xdc>
 8004f8e:	f8c8 7000 	str.w	r7, [r8]
 8004f92:	e00f      	b.n	8004fb4 <_malloc_r+0xa8>
 8004f94:	6822      	ldr	r2, [r4, #0]
 8004f96:	1b52      	subs	r2, r2, r5
 8004f98:	d420      	bmi.n	8004fdc <_malloc_r+0xd0>
 8004f9a:	2a0b      	cmp	r2, #11
 8004f9c:	d917      	bls.n	8004fce <_malloc_r+0xc2>
 8004f9e:	1961      	adds	r1, r4, r5
 8004fa0:	42a3      	cmp	r3, r4
 8004fa2:	6025      	str	r5, [r4, #0]
 8004fa4:	bf18      	it	ne
 8004fa6:	6059      	strne	r1, [r3, #4]
 8004fa8:	6863      	ldr	r3, [r4, #4]
 8004faa:	bf08      	it	eq
 8004fac:	f8c8 1000 	streq.w	r1, [r8]
 8004fb0:	5162      	str	r2, [r4, r5]
 8004fb2:	604b      	str	r3, [r1, #4]
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f000 fa69 	bl	800548c <__malloc_unlock>
 8004fba:	f104 000b 	add.w	r0, r4, #11
 8004fbe:	1d23      	adds	r3, r4, #4
 8004fc0:	f020 0007 	bic.w	r0, r0, #7
 8004fc4:	1ac2      	subs	r2, r0, r3
 8004fc6:	bf1c      	itt	ne
 8004fc8:	1a1b      	subne	r3, r3, r0
 8004fca:	50a3      	strne	r3, [r4, r2]
 8004fcc:	e7af      	b.n	8004f2e <_malloc_r+0x22>
 8004fce:	6862      	ldr	r2, [r4, #4]
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	bf0c      	ite	eq
 8004fd4:	f8c8 2000 	streq.w	r2, [r8]
 8004fd8:	605a      	strne	r2, [r3, #4]
 8004fda:	e7eb      	b.n	8004fb4 <_malloc_r+0xa8>
 8004fdc:	4623      	mov	r3, r4
 8004fde:	6864      	ldr	r4, [r4, #4]
 8004fe0:	e7ae      	b.n	8004f40 <_malloc_r+0x34>
 8004fe2:	463c      	mov	r4, r7
 8004fe4:	687f      	ldr	r7, [r7, #4]
 8004fe6:	e7b6      	b.n	8004f56 <_malloc_r+0x4a>
 8004fe8:	461a      	mov	r2, r3
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	d1fb      	bne.n	8004fe8 <_malloc_r+0xdc>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	6053      	str	r3, [r2, #4]
 8004ff4:	e7de      	b.n	8004fb4 <_malloc_r+0xa8>
 8004ff6:	230c      	movs	r3, #12
 8004ff8:	6033      	str	r3, [r6, #0]
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	f000 fa46 	bl	800548c <__malloc_unlock>
 8005000:	e794      	b.n	8004f2c <_malloc_r+0x20>
 8005002:	6005      	str	r5, [r0, #0]
 8005004:	e7d6      	b.n	8004fb4 <_malloc_r+0xa8>
 8005006:	bf00      	nop
 8005008:	200005f4 	.word	0x200005f4

0800500c <_printf_common>:
 800500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	4616      	mov	r6, r2
 8005012:	4698      	mov	r8, r3
 8005014:	688a      	ldr	r2, [r1, #8]
 8005016:	690b      	ldr	r3, [r1, #16]
 8005018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800501c:	4293      	cmp	r3, r2
 800501e:	bfb8      	it	lt
 8005020:	4613      	movlt	r3, r2
 8005022:	6033      	str	r3, [r6, #0]
 8005024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005028:	4607      	mov	r7, r0
 800502a:	460c      	mov	r4, r1
 800502c:	b10a      	cbz	r2, 8005032 <_printf_common+0x26>
 800502e:	3301      	adds	r3, #1
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	0699      	lsls	r1, r3, #26
 8005036:	bf42      	ittt	mi
 8005038:	6833      	ldrmi	r3, [r6, #0]
 800503a:	3302      	addmi	r3, #2
 800503c:	6033      	strmi	r3, [r6, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	f015 0506 	ands.w	r5, r5, #6
 8005044:	d106      	bne.n	8005054 <_printf_common+0x48>
 8005046:	f104 0a19 	add.w	sl, r4, #25
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	6832      	ldr	r2, [r6, #0]
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	42ab      	cmp	r3, r5
 8005052:	dc26      	bgt.n	80050a2 <_printf_common+0x96>
 8005054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	3b00      	subs	r3, #0
 800505c:	bf18      	it	ne
 800505e:	2301      	movne	r3, #1
 8005060:	0692      	lsls	r2, r2, #26
 8005062:	d42b      	bmi.n	80050bc <_printf_common+0xb0>
 8005064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005068:	4641      	mov	r1, r8
 800506a:	4638      	mov	r0, r7
 800506c:	47c8      	blx	r9
 800506e:	3001      	adds	r0, #1
 8005070:	d01e      	beq.n	80050b0 <_printf_common+0xa4>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	6922      	ldr	r2, [r4, #16]
 8005076:	f003 0306 	and.w	r3, r3, #6
 800507a:	2b04      	cmp	r3, #4
 800507c:	bf02      	ittt	eq
 800507e:	68e5      	ldreq	r5, [r4, #12]
 8005080:	6833      	ldreq	r3, [r6, #0]
 8005082:	1aed      	subeq	r5, r5, r3
 8005084:	68a3      	ldr	r3, [r4, #8]
 8005086:	bf0c      	ite	eq
 8005088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800508c:	2500      	movne	r5, #0
 800508e:	4293      	cmp	r3, r2
 8005090:	bfc4      	itt	gt
 8005092:	1a9b      	subgt	r3, r3, r2
 8005094:	18ed      	addgt	r5, r5, r3
 8005096:	2600      	movs	r6, #0
 8005098:	341a      	adds	r4, #26
 800509a:	42b5      	cmp	r5, r6
 800509c:	d11a      	bne.n	80050d4 <_printf_common+0xc8>
 800509e:	2000      	movs	r0, #0
 80050a0:	e008      	b.n	80050b4 <_printf_common+0xa8>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4652      	mov	r2, sl
 80050a6:	4641      	mov	r1, r8
 80050a8:	4638      	mov	r0, r7
 80050aa:	47c8      	blx	r9
 80050ac:	3001      	adds	r0, #1
 80050ae:	d103      	bne.n	80050b8 <_printf_common+0xac>
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b8:	3501      	adds	r5, #1
 80050ba:	e7c6      	b.n	800504a <_printf_common+0x3e>
 80050bc:	18e1      	adds	r1, r4, r3
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	2030      	movs	r0, #48	@ 0x30
 80050c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050c6:	4422      	add	r2, r4
 80050c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050d0:	3302      	adds	r3, #2
 80050d2:	e7c7      	b.n	8005064 <_printf_common+0x58>
 80050d4:	2301      	movs	r3, #1
 80050d6:	4622      	mov	r2, r4
 80050d8:	4641      	mov	r1, r8
 80050da:	4638      	mov	r0, r7
 80050dc:	47c8      	blx	r9
 80050de:	3001      	adds	r0, #1
 80050e0:	d0e6      	beq.n	80050b0 <_printf_common+0xa4>
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7d9      	b.n	800509a <_printf_common+0x8e>
	...

080050e8 <_printf_i>:
 80050e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	7e0f      	ldrb	r7, [r1, #24]
 80050ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050f0:	2f78      	cmp	r7, #120	@ 0x78
 80050f2:	4691      	mov	r9, r2
 80050f4:	4680      	mov	r8, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	469a      	mov	sl, r3
 80050fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050fe:	d807      	bhi.n	8005110 <_printf_i+0x28>
 8005100:	2f62      	cmp	r7, #98	@ 0x62
 8005102:	d80a      	bhi.n	800511a <_printf_i+0x32>
 8005104:	2f00      	cmp	r7, #0
 8005106:	f000 80d2 	beq.w	80052ae <_printf_i+0x1c6>
 800510a:	2f58      	cmp	r7, #88	@ 0x58
 800510c:	f000 80b9 	beq.w	8005282 <_printf_i+0x19a>
 8005110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005118:	e03a      	b.n	8005190 <_printf_i+0xa8>
 800511a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800511e:	2b15      	cmp	r3, #21
 8005120:	d8f6      	bhi.n	8005110 <_printf_i+0x28>
 8005122:	a101      	add	r1, pc, #4	@ (adr r1, 8005128 <_printf_i+0x40>)
 8005124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005128:	08005181 	.word	0x08005181
 800512c:	08005195 	.word	0x08005195
 8005130:	08005111 	.word	0x08005111
 8005134:	08005111 	.word	0x08005111
 8005138:	08005111 	.word	0x08005111
 800513c:	08005111 	.word	0x08005111
 8005140:	08005195 	.word	0x08005195
 8005144:	08005111 	.word	0x08005111
 8005148:	08005111 	.word	0x08005111
 800514c:	08005111 	.word	0x08005111
 8005150:	08005111 	.word	0x08005111
 8005154:	08005295 	.word	0x08005295
 8005158:	080051bf 	.word	0x080051bf
 800515c:	0800524f 	.word	0x0800524f
 8005160:	08005111 	.word	0x08005111
 8005164:	08005111 	.word	0x08005111
 8005168:	080052b7 	.word	0x080052b7
 800516c:	08005111 	.word	0x08005111
 8005170:	080051bf 	.word	0x080051bf
 8005174:	08005111 	.word	0x08005111
 8005178:	08005111 	.word	0x08005111
 800517c:	08005257 	.word	0x08005257
 8005180:	6833      	ldr	r3, [r6, #0]
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6032      	str	r2, [r6, #0]
 8005188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800518c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005190:	2301      	movs	r3, #1
 8005192:	e09d      	b.n	80052d0 <_printf_i+0x1e8>
 8005194:	6833      	ldr	r3, [r6, #0]
 8005196:	6820      	ldr	r0, [r4, #0]
 8005198:	1d19      	adds	r1, r3, #4
 800519a:	6031      	str	r1, [r6, #0]
 800519c:	0606      	lsls	r6, r0, #24
 800519e:	d501      	bpl.n	80051a4 <_printf_i+0xbc>
 80051a0:	681d      	ldr	r5, [r3, #0]
 80051a2:	e003      	b.n	80051ac <_printf_i+0xc4>
 80051a4:	0645      	lsls	r5, r0, #25
 80051a6:	d5fb      	bpl.n	80051a0 <_printf_i+0xb8>
 80051a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051ac:	2d00      	cmp	r5, #0
 80051ae:	da03      	bge.n	80051b8 <_printf_i+0xd0>
 80051b0:	232d      	movs	r3, #45	@ 0x2d
 80051b2:	426d      	negs	r5, r5
 80051b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051b8:	4859      	ldr	r0, [pc, #356]	@ (8005320 <_printf_i+0x238>)
 80051ba:	230a      	movs	r3, #10
 80051bc:	e011      	b.n	80051e2 <_printf_i+0xfa>
 80051be:	6821      	ldr	r1, [r4, #0]
 80051c0:	6833      	ldr	r3, [r6, #0]
 80051c2:	0608      	lsls	r0, r1, #24
 80051c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80051c8:	d402      	bmi.n	80051d0 <_printf_i+0xe8>
 80051ca:	0649      	lsls	r1, r1, #25
 80051cc:	bf48      	it	mi
 80051ce:	b2ad      	uxthmi	r5, r5
 80051d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80051d2:	4853      	ldr	r0, [pc, #332]	@ (8005320 <_printf_i+0x238>)
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	bf14      	ite	ne
 80051d8:	230a      	movne	r3, #10
 80051da:	2308      	moveq	r3, #8
 80051dc:	2100      	movs	r1, #0
 80051de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051e2:	6866      	ldr	r6, [r4, #4]
 80051e4:	60a6      	str	r6, [r4, #8]
 80051e6:	2e00      	cmp	r6, #0
 80051e8:	bfa2      	ittt	ge
 80051ea:	6821      	ldrge	r1, [r4, #0]
 80051ec:	f021 0104 	bicge.w	r1, r1, #4
 80051f0:	6021      	strge	r1, [r4, #0]
 80051f2:	b90d      	cbnz	r5, 80051f8 <_printf_i+0x110>
 80051f4:	2e00      	cmp	r6, #0
 80051f6:	d04b      	beq.n	8005290 <_printf_i+0x1a8>
 80051f8:	4616      	mov	r6, r2
 80051fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80051fe:	fb03 5711 	mls	r7, r3, r1, r5
 8005202:	5dc7      	ldrb	r7, [r0, r7]
 8005204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005208:	462f      	mov	r7, r5
 800520a:	42bb      	cmp	r3, r7
 800520c:	460d      	mov	r5, r1
 800520e:	d9f4      	bls.n	80051fa <_printf_i+0x112>
 8005210:	2b08      	cmp	r3, #8
 8005212:	d10b      	bne.n	800522c <_printf_i+0x144>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	07df      	lsls	r7, r3, #31
 8005218:	d508      	bpl.n	800522c <_printf_i+0x144>
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	6861      	ldr	r1, [r4, #4]
 800521e:	4299      	cmp	r1, r3
 8005220:	bfde      	ittt	le
 8005222:	2330      	movle	r3, #48	@ 0x30
 8005224:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005228:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800522c:	1b92      	subs	r2, r2, r6
 800522e:	6122      	str	r2, [r4, #16]
 8005230:	f8cd a000 	str.w	sl, [sp]
 8005234:	464b      	mov	r3, r9
 8005236:	aa03      	add	r2, sp, #12
 8005238:	4621      	mov	r1, r4
 800523a:	4640      	mov	r0, r8
 800523c:	f7ff fee6 	bl	800500c <_printf_common>
 8005240:	3001      	adds	r0, #1
 8005242:	d14a      	bne.n	80052da <_printf_i+0x1f2>
 8005244:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005248:	b004      	add	sp, #16
 800524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	f043 0320 	orr.w	r3, r3, #32
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	4833      	ldr	r0, [pc, #204]	@ (8005324 <_printf_i+0x23c>)
 8005258:	2778      	movs	r7, #120	@ 0x78
 800525a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	6831      	ldr	r1, [r6, #0]
 8005262:	061f      	lsls	r7, r3, #24
 8005264:	f851 5b04 	ldr.w	r5, [r1], #4
 8005268:	d402      	bmi.n	8005270 <_printf_i+0x188>
 800526a:	065f      	lsls	r7, r3, #25
 800526c:	bf48      	it	mi
 800526e:	b2ad      	uxthmi	r5, r5
 8005270:	6031      	str	r1, [r6, #0]
 8005272:	07d9      	lsls	r1, r3, #31
 8005274:	bf44      	itt	mi
 8005276:	f043 0320 	orrmi.w	r3, r3, #32
 800527a:	6023      	strmi	r3, [r4, #0]
 800527c:	b11d      	cbz	r5, 8005286 <_printf_i+0x19e>
 800527e:	2310      	movs	r3, #16
 8005280:	e7ac      	b.n	80051dc <_printf_i+0xf4>
 8005282:	4827      	ldr	r0, [pc, #156]	@ (8005320 <_printf_i+0x238>)
 8005284:	e7e9      	b.n	800525a <_printf_i+0x172>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	f023 0320 	bic.w	r3, r3, #32
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	e7f6      	b.n	800527e <_printf_i+0x196>
 8005290:	4616      	mov	r6, r2
 8005292:	e7bd      	b.n	8005210 <_printf_i+0x128>
 8005294:	6833      	ldr	r3, [r6, #0]
 8005296:	6825      	ldr	r5, [r4, #0]
 8005298:	6961      	ldr	r1, [r4, #20]
 800529a:	1d18      	adds	r0, r3, #4
 800529c:	6030      	str	r0, [r6, #0]
 800529e:	062e      	lsls	r6, r5, #24
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	d501      	bpl.n	80052a8 <_printf_i+0x1c0>
 80052a4:	6019      	str	r1, [r3, #0]
 80052a6:	e002      	b.n	80052ae <_printf_i+0x1c6>
 80052a8:	0668      	lsls	r0, r5, #25
 80052aa:	d5fb      	bpl.n	80052a4 <_printf_i+0x1bc>
 80052ac:	8019      	strh	r1, [r3, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	6123      	str	r3, [r4, #16]
 80052b2:	4616      	mov	r6, r2
 80052b4:	e7bc      	b.n	8005230 <_printf_i+0x148>
 80052b6:	6833      	ldr	r3, [r6, #0]
 80052b8:	1d1a      	adds	r2, r3, #4
 80052ba:	6032      	str	r2, [r6, #0]
 80052bc:	681e      	ldr	r6, [r3, #0]
 80052be:	6862      	ldr	r2, [r4, #4]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4630      	mov	r0, r6
 80052c4:	f7fa ff84 	bl	80001d0 <memchr>
 80052c8:	b108      	cbz	r0, 80052ce <_printf_i+0x1e6>
 80052ca:	1b80      	subs	r0, r0, r6
 80052cc:	6060      	str	r0, [r4, #4]
 80052ce:	6863      	ldr	r3, [r4, #4]
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	2300      	movs	r3, #0
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d8:	e7aa      	b.n	8005230 <_printf_i+0x148>
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	4632      	mov	r2, r6
 80052de:	4649      	mov	r1, r9
 80052e0:	4640      	mov	r0, r8
 80052e2:	47d0      	blx	sl
 80052e4:	3001      	adds	r0, #1
 80052e6:	d0ad      	beq.n	8005244 <_printf_i+0x15c>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	079b      	lsls	r3, r3, #30
 80052ec:	d413      	bmi.n	8005316 <_printf_i+0x22e>
 80052ee:	68e0      	ldr	r0, [r4, #12]
 80052f0:	9b03      	ldr	r3, [sp, #12]
 80052f2:	4298      	cmp	r0, r3
 80052f4:	bfb8      	it	lt
 80052f6:	4618      	movlt	r0, r3
 80052f8:	e7a6      	b.n	8005248 <_printf_i+0x160>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4632      	mov	r2, r6
 80052fe:	4649      	mov	r1, r9
 8005300:	4640      	mov	r0, r8
 8005302:	47d0      	blx	sl
 8005304:	3001      	adds	r0, #1
 8005306:	d09d      	beq.n	8005244 <_printf_i+0x15c>
 8005308:	3501      	adds	r5, #1
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	9903      	ldr	r1, [sp, #12]
 800530e:	1a5b      	subs	r3, r3, r1
 8005310:	42ab      	cmp	r3, r5
 8005312:	dcf2      	bgt.n	80052fa <_printf_i+0x212>
 8005314:	e7eb      	b.n	80052ee <_printf_i+0x206>
 8005316:	2500      	movs	r5, #0
 8005318:	f104 0619 	add.w	r6, r4, #25
 800531c:	e7f5      	b.n	800530a <_printf_i+0x222>
 800531e:	bf00      	nop
 8005320:	080058f5 	.word	0x080058f5
 8005324:	08005906 	.word	0x08005906

08005328 <__sflush_r>:
 8005328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005330:	0716      	lsls	r6, r2, #28
 8005332:	4605      	mov	r5, r0
 8005334:	460c      	mov	r4, r1
 8005336:	d454      	bmi.n	80053e2 <__sflush_r+0xba>
 8005338:	684b      	ldr	r3, [r1, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	dc02      	bgt.n	8005344 <__sflush_r+0x1c>
 800533e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	dd48      	ble.n	80053d6 <__sflush_r+0xae>
 8005344:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005346:	2e00      	cmp	r6, #0
 8005348:	d045      	beq.n	80053d6 <__sflush_r+0xae>
 800534a:	2300      	movs	r3, #0
 800534c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005350:	682f      	ldr	r7, [r5, #0]
 8005352:	6a21      	ldr	r1, [r4, #32]
 8005354:	602b      	str	r3, [r5, #0]
 8005356:	d030      	beq.n	80053ba <__sflush_r+0x92>
 8005358:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	0759      	lsls	r1, r3, #29
 800535e:	d505      	bpl.n	800536c <__sflush_r+0x44>
 8005360:	6863      	ldr	r3, [r4, #4]
 8005362:	1ad2      	subs	r2, r2, r3
 8005364:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005366:	b10b      	cbz	r3, 800536c <__sflush_r+0x44>
 8005368:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800536a:	1ad2      	subs	r2, r2, r3
 800536c:	2300      	movs	r3, #0
 800536e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005370:	6a21      	ldr	r1, [r4, #32]
 8005372:	4628      	mov	r0, r5
 8005374:	47b0      	blx	r6
 8005376:	1c43      	adds	r3, r0, #1
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	d106      	bne.n	800538a <__sflush_r+0x62>
 800537c:	6829      	ldr	r1, [r5, #0]
 800537e:	291d      	cmp	r1, #29
 8005380:	d82b      	bhi.n	80053da <__sflush_r+0xb2>
 8005382:	4a2a      	ldr	r2, [pc, #168]	@ (800542c <__sflush_r+0x104>)
 8005384:	410a      	asrs	r2, r1
 8005386:	07d6      	lsls	r6, r2, #31
 8005388:	d427      	bmi.n	80053da <__sflush_r+0xb2>
 800538a:	2200      	movs	r2, #0
 800538c:	6062      	str	r2, [r4, #4]
 800538e:	04d9      	lsls	r1, r3, #19
 8005390:	6922      	ldr	r2, [r4, #16]
 8005392:	6022      	str	r2, [r4, #0]
 8005394:	d504      	bpl.n	80053a0 <__sflush_r+0x78>
 8005396:	1c42      	adds	r2, r0, #1
 8005398:	d101      	bne.n	800539e <__sflush_r+0x76>
 800539a:	682b      	ldr	r3, [r5, #0]
 800539c:	b903      	cbnz	r3, 80053a0 <__sflush_r+0x78>
 800539e:	6560      	str	r0, [r4, #84]	@ 0x54
 80053a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053a2:	602f      	str	r7, [r5, #0]
 80053a4:	b1b9      	cbz	r1, 80053d6 <__sflush_r+0xae>
 80053a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053aa:	4299      	cmp	r1, r3
 80053ac:	d002      	beq.n	80053b4 <__sflush_r+0x8c>
 80053ae:	4628      	mov	r0, r5
 80053b0:	f000 fa24 	bl	80057fc <_free_r>
 80053b4:	2300      	movs	r3, #0
 80053b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80053b8:	e00d      	b.n	80053d6 <__sflush_r+0xae>
 80053ba:	2301      	movs	r3, #1
 80053bc:	4628      	mov	r0, r5
 80053be:	47b0      	blx	r6
 80053c0:	4602      	mov	r2, r0
 80053c2:	1c50      	adds	r0, r2, #1
 80053c4:	d1c9      	bne.n	800535a <__sflush_r+0x32>
 80053c6:	682b      	ldr	r3, [r5, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0c6      	beq.n	800535a <__sflush_r+0x32>
 80053cc:	2b1d      	cmp	r3, #29
 80053ce:	d001      	beq.n	80053d4 <__sflush_r+0xac>
 80053d0:	2b16      	cmp	r3, #22
 80053d2:	d11e      	bne.n	8005412 <__sflush_r+0xea>
 80053d4:	602f      	str	r7, [r5, #0]
 80053d6:	2000      	movs	r0, #0
 80053d8:	e022      	b.n	8005420 <__sflush_r+0xf8>
 80053da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053de:	b21b      	sxth	r3, r3
 80053e0:	e01b      	b.n	800541a <__sflush_r+0xf2>
 80053e2:	690f      	ldr	r7, [r1, #16]
 80053e4:	2f00      	cmp	r7, #0
 80053e6:	d0f6      	beq.n	80053d6 <__sflush_r+0xae>
 80053e8:	0793      	lsls	r3, r2, #30
 80053ea:	680e      	ldr	r6, [r1, #0]
 80053ec:	bf08      	it	eq
 80053ee:	694b      	ldreq	r3, [r1, #20]
 80053f0:	600f      	str	r7, [r1, #0]
 80053f2:	bf18      	it	ne
 80053f4:	2300      	movne	r3, #0
 80053f6:	eba6 0807 	sub.w	r8, r6, r7
 80053fa:	608b      	str	r3, [r1, #8]
 80053fc:	f1b8 0f00 	cmp.w	r8, #0
 8005400:	dde9      	ble.n	80053d6 <__sflush_r+0xae>
 8005402:	6a21      	ldr	r1, [r4, #32]
 8005404:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005406:	4643      	mov	r3, r8
 8005408:	463a      	mov	r2, r7
 800540a:	4628      	mov	r0, r5
 800540c:	47b0      	blx	r6
 800540e:	2800      	cmp	r0, #0
 8005410:	dc08      	bgt.n	8005424 <__sflush_r+0xfc>
 8005412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005424:	4407      	add	r7, r0
 8005426:	eba8 0800 	sub.w	r8, r8, r0
 800542a:	e7e7      	b.n	80053fc <__sflush_r+0xd4>
 800542c:	dfbffffe 	.word	0xdfbffffe

08005430 <_fflush_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	690b      	ldr	r3, [r1, #16]
 8005434:	4605      	mov	r5, r0
 8005436:	460c      	mov	r4, r1
 8005438:	b913      	cbnz	r3, 8005440 <_fflush_r+0x10>
 800543a:	2500      	movs	r5, #0
 800543c:	4628      	mov	r0, r5
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	b118      	cbz	r0, 800544a <_fflush_r+0x1a>
 8005442:	6a03      	ldr	r3, [r0, #32]
 8005444:	b90b      	cbnz	r3, 800544a <_fflush_r+0x1a>
 8005446:	f7ff fb81 	bl	8004b4c <__sinit>
 800544a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f3      	beq.n	800543a <_fflush_r+0xa>
 8005452:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005454:	07d0      	lsls	r0, r2, #31
 8005456:	d404      	bmi.n	8005462 <_fflush_r+0x32>
 8005458:	0599      	lsls	r1, r3, #22
 800545a:	d402      	bmi.n	8005462 <_fflush_r+0x32>
 800545c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800545e:	f7ff fbf0 	bl	8004c42 <__retarget_lock_acquire_recursive>
 8005462:	4628      	mov	r0, r5
 8005464:	4621      	mov	r1, r4
 8005466:	f7ff ff5f 	bl	8005328 <__sflush_r>
 800546a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800546c:	07da      	lsls	r2, r3, #31
 800546e:	4605      	mov	r5, r0
 8005470:	d4e4      	bmi.n	800543c <_fflush_r+0xc>
 8005472:	89a3      	ldrh	r3, [r4, #12]
 8005474:	059b      	lsls	r3, r3, #22
 8005476:	d4e1      	bmi.n	800543c <_fflush_r+0xc>
 8005478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800547a:	f7ff fbe3 	bl	8004c44 <__retarget_lock_release_recursive>
 800547e:	e7dd      	b.n	800543c <_fflush_r+0xc>

08005480 <__malloc_lock>:
 8005480:	4801      	ldr	r0, [pc, #4]	@ (8005488 <__malloc_lock+0x8>)
 8005482:	f7ff bbde 	b.w	8004c42 <__retarget_lock_acquire_recursive>
 8005486:	bf00      	nop
 8005488:	200005ec 	.word	0x200005ec

0800548c <__malloc_unlock>:
 800548c:	4801      	ldr	r0, [pc, #4]	@ (8005494 <__malloc_unlock+0x8>)
 800548e:	f7ff bbd9 	b.w	8004c44 <__retarget_lock_release_recursive>
 8005492:	bf00      	nop
 8005494:	200005ec 	.word	0x200005ec

08005498 <__sread>:
 8005498:	b510      	push	{r4, lr}
 800549a:	460c      	mov	r4, r1
 800549c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a0:	f000 f978 	bl	8005794 <_read_r>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	bfab      	itete	ge
 80054a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054aa:	89a3      	ldrhlt	r3, [r4, #12]
 80054ac:	181b      	addge	r3, r3, r0
 80054ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054b2:	bfac      	ite	ge
 80054b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054b6:	81a3      	strhlt	r3, [r4, #12]
 80054b8:	bd10      	pop	{r4, pc}

080054ba <__swrite>:
 80054ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054be:	461f      	mov	r7, r3
 80054c0:	898b      	ldrh	r3, [r1, #12]
 80054c2:	05db      	lsls	r3, r3, #23
 80054c4:	4605      	mov	r5, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	4616      	mov	r6, r2
 80054ca:	d505      	bpl.n	80054d8 <__swrite+0x1e>
 80054cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d0:	2302      	movs	r3, #2
 80054d2:	2200      	movs	r2, #0
 80054d4:	f000 f94c 	bl	8005770 <_lseek_r>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054e2:	81a3      	strh	r3, [r4, #12]
 80054e4:	4632      	mov	r2, r6
 80054e6:	463b      	mov	r3, r7
 80054e8:	4628      	mov	r0, r5
 80054ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ee:	f000 b973 	b.w	80057d8 <_write_r>

080054f2 <__sseek>:
 80054f2:	b510      	push	{r4, lr}
 80054f4:	460c      	mov	r4, r1
 80054f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fa:	f000 f939 	bl	8005770 <_lseek_r>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	bf15      	itete	ne
 8005504:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005506:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800550a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800550e:	81a3      	strheq	r3, [r4, #12]
 8005510:	bf18      	it	ne
 8005512:	81a3      	strhne	r3, [r4, #12]
 8005514:	bd10      	pop	{r4, pc}

08005516 <__sclose>:
 8005516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551a:	f000 b8f7 	b.w	800570c <_close_r>

0800551e <__swbuf_r>:
 800551e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005520:	460e      	mov	r6, r1
 8005522:	4614      	mov	r4, r2
 8005524:	4605      	mov	r5, r0
 8005526:	b118      	cbz	r0, 8005530 <__swbuf_r+0x12>
 8005528:	6a03      	ldr	r3, [r0, #32]
 800552a:	b90b      	cbnz	r3, 8005530 <__swbuf_r+0x12>
 800552c:	f7ff fb0e 	bl	8004b4c <__sinit>
 8005530:	69a3      	ldr	r3, [r4, #24]
 8005532:	60a3      	str	r3, [r4, #8]
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	071a      	lsls	r2, r3, #28
 8005538:	d501      	bpl.n	800553e <__swbuf_r+0x20>
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	b943      	cbnz	r3, 8005550 <__swbuf_r+0x32>
 800553e:	4621      	mov	r1, r4
 8005540:	4628      	mov	r0, r5
 8005542:	f000 f82b 	bl	800559c <__swsetup_r>
 8005546:	b118      	cbz	r0, 8005550 <__swbuf_r+0x32>
 8005548:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800554c:	4638      	mov	r0, r7
 800554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	6922      	ldr	r2, [r4, #16]
 8005554:	1a98      	subs	r0, r3, r2
 8005556:	6963      	ldr	r3, [r4, #20]
 8005558:	b2f6      	uxtb	r6, r6
 800555a:	4283      	cmp	r3, r0
 800555c:	4637      	mov	r7, r6
 800555e:	dc05      	bgt.n	800556c <__swbuf_r+0x4e>
 8005560:	4621      	mov	r1, r4
 8005562:	4628      	mov	r0, r5
 8005564:	f7ff ff64 	bl	8005430 <_fflush_r>
 8005568:	2800      	cmp	r0, #0
 800556a:	d1ed      	bne.n	8005548 <__swbuf_r+0x2a>
 800556c:	68a3      	ldr	r3, [r4, #8]
 800556e:	3b01      	subs	r3, #1
 8005570:	60a3      	str	r3, [r4, #8]
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	6022      	str	r2, [r4, #0]
 8005578:	701e      	strb	r6, [r3, #0]
 800557a:	6962      	ldr	r2, [r4, #20]
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	429a      	cmp	r2, r3
 8005580:	d004      	beq.n	800558c <__swbuf_r+0x6e>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	07db      	lsls	r3, r3, #31
 8005586:	d5e1      	bpl.n	800554c <__swbuf_r+0x2e>
 8005588:	2e0a      	cmp	r6, #10
 800558a:	d1df      	bne.n	800554c <__swbuf_r+0x2e>
 800558c:	4621      	mov	r1, r4
 800558e:	4628      	mov	r0, r5
 8005590:	f7ff ff4e 	bl	8005430 <_fflush_r>
 8005594:	2800      	cmp	r0, #0
 8005596:	d0d9      	beq.n	800554c <__swbuf_r+0x2e>
 8005598:	e7d6      	b.n	8005548 <__swbuf_r+0x2a>
	...

0800559c <__swsetup_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4b29      	ldr	r3, [pc, #164]	@ (8005644 <__swsetup_r+0xa8>)
 80055a0:	4605      	mov	r5, r0
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	460c      	mov	r4, r1
 80055a6:	b118      	cbz	r0, 80055b0 <__swsetup_r+0x14>
 80055a8:	6a03      	ldr	r3, [r0, #32]
 80055aa:	b90b      	cbnz	r3, 80055b0 <__swsetup_r+0x14>
 80055ac:	f7ff face 	bl	8004b4c <__sinit>
 80055b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055b4:	0719      	lsls	r1, r3, #28
 80055b6:	d422      	bmi.n	80055fe <__swsetup_r+0x62>
 80055b8:	06da      	lsls	r2, r3, #27
 80055ba:	d407      	bmi.n	80055cc <__swsetup_r+0x30>
 80055bc:	2209      	movs	r2, #9
 80055be:	602a      	str	r2, [r5, #0]
 80055c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055ca:	e033      	b.n	8005634 <__swsetup_r+0x98>
 80055cc:	0758      	lsls	r0, r3, #29
 80055ce:	d512      	bpl.n	80055f6 <__swsetup_r+0x5a>
 80055d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055d2:	b141      	cbz	r1, 80055e6 <__swsetup_r+0x4a>
 80055d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055d8:	4299      	cmp	r1, r3
 80055da:	d002      	beq.n	80055e2 <__swsetup_r+0x46>
 80055dc:	4628      	mov	r0, r5
 80055de:	f000 f90d 	bl	80057fc <_free_r>
 80055e2:	2300      	movs	r3, #0
 80055e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	2300      	movs	r3, #0
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	f043 0308 	orr.w	r3, r3, #8
 80055fc:	81a3      	strh	r3, [r4, #12]
 80055fe:	6923      	ldr	r3, [r4, #16]
 8005600:	b94b      	cbnz	r3, 8005616 <__swsetup_r+0x7a>
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800560c:	d003      	beq.n	8005616 <__swsetup_r+0x7a>
 800560e:	4621      	mov	r1, r4
 8005610:	4628      	mov	r0, r5
 8005612:	f000 f83f 	bl	8005694 <__smakebuf_r>
 8005616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800561a:	f013 0201 	ands.w	r2, r3, #1
 800561e:	d00a      	beq.n	8005636 <__swsetup_r+0x9a>
 8005620:	2200      	movs	r2, #0
 8005622:	60a2      	str	r2, [r4, #8]
 8005624:	6962      	ldr	r2, [r4, #20]
 8005626:	4252      	negs	r2, r2
 8005628:	61a2      	str	r2, [r4, #24]
 800562a:	6922      	ldr	r2, [r4, #16]
 800562c:	b942      	cbnz	r2, 8005640 <__swsetup_r+0xa4>
 800562e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005632:	d1c5      	bne.n	80055c0 <__swsetup_r+0x24>
 8005634:	bd38      	pop	{r3, r4, r5, pc}
 8005636:	0799      	lsls	r1, r3, #30
 8005638:	bf58      	it	pl
 800563a:	6962      	ldrpl	r2, [r4, #20]
 800563c:	60a2      	str	r2, [r4, #8]
 800563e:	e7f4      	b.n	800562a <__swsetup_r+0x8e>
 8005640:	2000      	movs	r0, #0
 8005642:	e7f7      	b.n	8005634 <__swsetup_r+0x98>
 8005644:	20000018 	.word	0x20000018

08005648 <__swhatbuf_r>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	460c      	mov	r4, r1
 800564c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005650:	2900      	cmp	r1, #0
 8005652:	b096      	sub	sp, #88	@ 0x58
 8005654:	4615      	mov	r5, r2
 8005656:	461e      	mov	r6, r3
 8005658:	da0d      	bge.n	8005676 <__swhatbuf_r+0x2e>
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005660:	f04f 0100 	mov.w	r1, #0
 8005664:	bf14      	ite	ne
 8005666:	2340      	movne	r3, #64	@ 0x40
 8005668:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800566c:	2000      	movs	r0, #0
 800566e:	6031      	str	r1, [r6, #0]
 8005670:	602b      	str	r3, [r5, #0]
 8005672:	b016      	add	sp, #88	@ 0x58
 8005674:	bd70      	pop	{r4, r5, r6, pc}
 8005676:	466a      	mov	r2, sp
 8005678:	f000 f858 	bl	800572c <_fstat_r>
 800567c:	2800      	cmp	r0, #0
 800567e:	dbec      	blt.n	800565a <__swhatbuf_r+0x12>
 8005680:	9901      	ldr	r1, [sp, #4]
 8005682:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005686:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800568a:	4259      	negs	r1, r3
 800568c:	4159      	adcs	r1, r3
 800568e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005692:	e7eb      	b.n	800566c <__swhatbuf_r+0x24>

08005694 <__smakebuf_r>:
 8005694:	898b      	ldrh	r3, [r1, #12]
 8005696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005698:	079d      	lsls	r5, r3, #30
 800569a:	4606      	mov	r6, r0
 800569c:	460c      	mov	r4, r1
 800569e:	d507      	bpl.n	80056b0 <__smakebuf_r+0x1c>
 80056a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	6123      	str	r3, [r4, #16]
 80056a8:	2301      	movs	r3, #1
 80056aa:	6163      	str	r3, [r4, #20]
 80056ac:	b003      	add	sp, #12
 80056ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b0:	ab01      	add	r3, sp, #4
 80056b2:	466a      	mov	r2, sp
 80056b4:	f7ff ffc8 	bl	8005648 <__swhatbuf_r>
 80056b8:	9f00      	ldr	r7, [sp, #0]
 80056ba:	4605      	mov	r5, r0
 80056bc:	4639      	mov	r1, r7
 80056be:	4630      	mov	r0, r6
 80056c0:	f7ff fc24 	bl	8004f0c <_malloc_r>
 80056c4:	b948      	cbnz	r0, 80056da <__smakebuf_r+0x46>
 80056c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ca:	059a      	lsls	r2, r3, #22
 80056cc:	d4ee      	bmi.n	80056ac <__smakebuf_r+0x18>
 80056ce:	f023 0303 	bic.w	r3, r3, #3
 80056d2:	f043 0302 	orr.w	r3, r3, #2
 80056d6:	81a3      	strh	r3, [r4, #12]
 80056d8:	e7e2      	b.n	80056a0 <__smakebuf_r+0xc>
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	6020      	str	r0, [r4, #0]
 80056de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	9b01      	ldr	r3, [sp, #4]
 80056e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056ea:	b15b      	cbz	r3, 8005704 <__smakebuf_r+0x70>
 80056ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f0:	4630      	mov	r0, r6
 80056f2:	f000 f82d 	bl	8005750 <_isatty_r>
 80056f6:	b128      	cbz	r0, 8005704 <__smakebuf_r+0x70>
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	81a3      	strh	r3, [r4, #12]
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	431d      	orrs	r5, r3
 8005708:	81a5      	strh	r5, [r4, #12]
 800570a:	e7cf      	b.n	80056ac <__smakebuf_r+0x18>

0800570c <_close_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4d06      	ldr	r5, [pc, #24]	@ (8005728 <_close_r+0x1c>)
 8005710:	2300      	movs	r3, #0
 8005712:	4604      	mov	r4, r0
 8005714:	4608      	mov	r0, r1
 8005716:	602b      	str	r3, [r5, #0]
 8005718:	f7fb feb2 	bl	8001480 <_close>
 800571c:	1c43      	adds	r3, r0, #1
 800571e:	d102      	bne.n	8005726 <_close_r+0x1a>
 8005720:	682b      	ldr	r3, [r5, #0]
 8005722:	b103      	cbz	r3, 8005726 <_close_r+0x1a>
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	bd38      	pop	{r3, r4, r5, pc}
 8005728:	200005f8 	.word	0x200005f8

0800572c <_fstat_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d07      	ldr	r5, [pc, #28]	@ (800574c <_fstat_r+0x20>)
 8005730:	2300      	movs	r3, #0
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	4611      	mov	r1, r2
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	f7fb fead 	bl	8001498 <_fstat>
 800573e:	1c43      	adds	r3, r0, #1
 8005740:	d102      	bne.n	8005748 <_fstat_r+0x1c>
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	b103      	cbz	r3, 8005748 <_fstat_r+0x1c>
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	bd38      	pop	{r3, r4, r5, pc}
 800574a:	bf00      	nop
 800574c:	200005f8 	.word	0x200005f8

08005750 <_isatty_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4d06      	ldr	r5, [pc, #24]	@ (800576c <_isatty_r+0x1c>)
 8005754:	2300      	movs	r3, #0
 8005756:	4604      	mov	r4, r0
 8005758:	4608      	mov	r0, r1
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	f7fb feac 	bl	80014b8 <_isatty>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d102      	bne.n	800576a <_isatty_r+0x1a>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	b103      	cbz	r3, 800576a <_isatty_r+0x1a>
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	200005f8 	.word	0x200005f8

08005770 <_lseek_r>:
 8005770:	b538      	push	{r3, r4, r5, lr}
 8005772:	4d07      	ldr	r5, [pc, #28]	@ (8005790 <_lseek_r+0x20>)
 8005774:	4604      	mov	r4, r0
 8005776:	4608      	mov	r0, r1
 8005778:	4611      	mov	r1, r2
 800577a:	2200      	movs	r2, #0
 800577c:	602a      	str	r2, [r5, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	f7fb fea5 	bl	80014ce <_lseek>
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	d102      	bne.n	800578e <_lseek_r+0x1e>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	b103      	cbz	r3, 800578e <_lseek_r+0x1e>
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	200005f8 	.word	0x200005f8

08005794 <_read_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4d07      	ldr	r5, [pc, #28]	@ (80057b4 <_read_r+0x20>)
 8005798:	4604      	mov	r4, r0
 800579a:	4608      	mov	r0, r1
 800579c:	4611      	mov	r1, r2
 800579e:	2200      	movs	r2, #0
 80057a0:	602a      	str	r2, [r5, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f7fb fe33 	bl	800140e <_read>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_read_r+0x1e>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_read_r+0x1e>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	200005f8 	.word	0x200005f8

080057b8 <_sbrk_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4d06      	ldr	r5, [pc, #24]	@ (80057d4 <_sbrk_r+0x1c>)
 80057bc:	2300      	movs	r3, #0
 80057be:	4604      	mov	r4, r0
 80057c0:	4608      	mov	r0, r1
 80057c2:	602b      	str	r3, [r5, #0]
 80057c4:	f7fb fe90 	bl	80014e8 <_sbrk>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	d102      	bne.n	80057d2 <_sbrk_r+0x1a>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	b103      	cbz	r3, 80057d2 <_sbrk_r+0x1a>
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	200005f8 	.word	0x200005f8

080057d8 <_write_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4d07      	ldr	r5, [pc, #28]	@ (80057f8 <_write_r+0x20>)
 80057dc:	4604      	mov	r4, r0
 80057de:	4608      	mov	r0, r1
 80057e0:	4611      	mov	r1, r2
 80057e2:	2200      	movs	r2, #0
 80057e4:	602a      	str	r2, [r5, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	f7fb fe2e 	bl	8001448 <_write>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d102      	bne.n	80057f6 <_write_r+0x1e>
 80057f0:	682b      	ldr	r3, [r5, #0]
 80057f2:	b103      	cbz	r3, 80057f6 <_write_r+0x1e>
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	200005f8 	.word	0x200005f8

080057fc <_free_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4605      	mov	r5, r0
 8005800:	2900      	cmp	r1, #0
 8005802:	d041      	beq.n	8005888 <_free_r+0x8c>
 8005804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005808:	1f0c      	subs	r4, r1, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	bfb8      	it	lt
 800580e:	18e4      	addlt	r4, r4, r3
 8005810:	f7ff fe36 	bl	8005480 <__malloc_lock>
 8005814:	4a1d      	ldr	r2, [pc, #116]	@ (800588c <_free_r+0x90>)
 8005816:	6813      	ldr	r3, [r2, #0]
 8005818:	b933      	cbnz	r3, 8005828 <_free_r+0x2c>
 800581a:	6063      	str	r3, [r4, #4]
 800581c:	6014      	str	r4, [r2, #0]
 800581e:	4628      	mov	r0, r5
 8005820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005824:	f7ff be32 	b.w	800548c <__malloc_unlock>
 8005828:	42a3      	cmp	r3, r4
 800582a:	d908      	bls.n	800583e <_free_r+0x42>
 800582c:	6820      	ldr	r0, [r4, #0]
 800582e:	1821      	adds	r1, r4, r0
 8005830:	428b      	cmp	r3, r1
 8005832:	bf01      	itttt	eq
 8005834:	6819      	ldreq	r1, [r3, #0]
 8005836:	685b      	ldreq	r3, [r3, #4]
 8005838:	1809      	addeq	r1, r1, r0
 800583a:	6021      	streq	r1, [r4, #0]
 800583c:	e7ed      	b.n	800581a <_free_r+0x1e>
 800583e:	461a      	mov	r2, r3
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	b10b      	cbz	r3, 8005848 <_free_r+0x4c>
 8005844:	42a3      	cmp	r3, r4
 8005846:	d9fa      	bls.n	800583e <_free_r+0x42>
 8005848:	6811      	ldr	r1, [r2, #0]
 800584a:	1850      	adds	r0, r2, r1
 800584c:	42a0      	cmp	r0, r4
 800584e:	d10b      	bne.n	8005868 <_free_r+0x6c>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	4401      	add	r1, r0
 8005854:	1850      	adds	r0, r2, r1
 8005856:	4283      	cmp	r3, r0
 8005858:	6011      	str	r1, [r2, #0]
 800585a:	d1e0      	bne.n	800581e <_free_r+0x22>
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	6053      	str	r3, [r2, #4]
 8005862:	4408      	add	r0, r1
 8005864:	6010      	str	r0, [r2, #0]
 8005866:	e7da      	b.n	800581e <_free_r+0x22>
 8005868:	d902      	bls.n	8005870 <_free_r+0x74>
 800586a:	230c      	movs	r3, #12
 800586c:	602b      	str	r3, [r5, #0]
 800586e:	e7d6      	b.n	800581e <_free_r+0x22>
 8005870:	6820      	ldr	r0, [r4, #0]
 8005872:	1821      	adds	r1, r4, r0
 8005874:	428b      	cmp	r3, r1
 8005876:	bf04      	itt	eq
 8005878:	6819      	ldreq	r1, [r3, #0]
 800587a:	685b      	ldreq	r3, [r3, #4]
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	bf04      	itt	eq
 8005880:	1809      	addeq	r1, r1, r0
 8005882:	6021      	streq	r1, [r4, #0]
 8005884:	6054      	str	r4, [r2, #4]
 8005886:	e7ca      	b.n	800581e <_free_r+0x22>
 8005888:	bd38      	pop	{r3, r4, r5, pc}
 800588a:	bf00      	nop
 800588c:	200005f4 	.word	0x200005f4

08005890 <_init>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr

0800589c <_fini>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr
